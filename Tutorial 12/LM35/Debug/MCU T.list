
MCU T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001b58  08001b58  00011b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b94  08001b94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b94  08001b94  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b94  08001b94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b94  08001b94  00011b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b98  08001b98  00011b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08001ba8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08001ba8  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7ae  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000205f  00000000  00000000  0002d825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000811a  00000000  00000000  0002f884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000818  00000000  00000000  000379a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d37  00000000  00000000  000381b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000ffb0  00000000  00000000  00038eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000107d8  00000000  00000000  00048e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00062353  00000000  00000000  00059677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001994  00000000  00000000  000bb9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000bd360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001b40 	.word	0x08001b40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001b40 	.word	0x08001b40

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <send_to_lcd.constprop.0>:
/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80003f4:	2090      	movs	r0, #144	; 0x90
void send_to_lcd (char data, int rs)
 80003f6:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80003f8:	2200      	movs	r2, #0
 80003fa:	2101      	movs	r1, #1
 80003fc:	05c0      	lsls	r0, r0, #23
 80003fe:	f000 fee1 	bl	80011c4 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000402:	2090      	movs	r0, #144	; 0x90
 8000404:	2200      	movs	r2, #0
 8000406:	2140      	movs	r1, #64	; 0x40
 8000408:	05c0      	lsls	r0, r0, #23
 800040a:	f000 fedb 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 800040e:	2090      	movs	r0, #144	; 0x90
 8000410:	2200      	movs	r2, #0
 8000412:	2120      	movs	r1, #32
 8000414:	05c0      	lsls	r0, r0, #23
 8000416:	f000 fed5 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800041a:	2090      	movs	r0, #144	; 0x90
 800041c:	2200      	movs	r2, #0
 800041e:	2110      	movs	r1, #16
 8000420:	05c0      	lsls	r0, r0, #23
 8000422:	f000 fecf 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000426:	2090      	movs	r0, #144	; 0x90
 8000428:	2200      	movs	r2, #0
 800042a:	2108      	movs	r1, #8
 800042c:	05c0      	lsls	r0, r0, #23
 800042e:	f000 fec9 	bl	80011c4 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000432:	2090      	movs	r0, #144	; 0x90
 8000434:	2201      	movs	r2, #1
 8000436:	2104      	movs	r1, #4
 8000438:	05c0      	lsls	r0, r0, #23
 800043a:	f000 fec3 	bl	80011c4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800043e:	2300      	movs	r3, #0
 8000440:	4c09      	ldr	r4, [pc, #36]	; (8000468 <send_to_lcd.constprop.0+0x74>)
 8000442:	6822      	ldr	r2, [r4, #0]
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000446:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000448:	2b13      	cmp	r3, #19
 800044a:	d9fc      	bls.n	8000446 <send_to_lcd.constprop.0+0x52>
	delay (20);
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800044c:	2090      	movs	r0, #144	; 0x90
 800044e:	2200      	movs	r2, #0
 8000450:	2104      	movs	r1, #4
 8000452:	05c0      	lsls	r0, r0, #23
 8000454:	f000 feb6 	bl	80011c4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000458:	2300      	movs	r3, #0
 800045a:	6822      	ldr	r2, [r4, #0]
 800045c:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800045e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000460:	2b13      	cmp	r3, #19
 8000462:	d9fc      	bls.n	800045e <send_to_lcd.constprop.0+0x6a>
	delay (20);
}
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	2000006c 	.word	0x2000006c

0800046c <send_to_lcd.constprop.1>:
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 800046c:	2090      	movs	r0, #144	; 0x90
void send_to_lcd (char data, int rs)
 800046e:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000470:	2200      	movs	r2, #0
 8000472:	2101      	movs	r1, #1
 8000474:	05c0      	lsls	r0, r0, #23
 8000476:	f000 fea5 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800047a:	2090      	movs	r0, #144	; 0x90
 800047c:	2200      	movs	r2, #0
 800047e:	2140      	movs	r1, #64	; 0x40
 8000480:	05c0      	lsls	r0, r0, #23
 8000482:	f000 fe9f 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000486:	2090      	movs	r0, #144	; 0x90
 8000488:	2200      	movs	r2, #0
 800048a:	2120      	movs	r1, #32
 800048c:	05c0      	lsls	r0, r0, #23
 800048e:	f000 fe99 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000492:	2090      	movs	r0, #144	; 0x90
 8000494:	2201      	movs	r2, #1
 8000496:	2110      	movs	r1, #16
 8000498:	05c0      	lsls	r0, r0, #23
 800049a:	f000 fe93 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 800049e:	2090      	movs	r0, #144	; 0x90
 80004a0:	2201      	movs	r2, #1
 80004a2:	2108      	movs	r1, #8
 80004a4:	05c0      	lsls	r0, r0, #23
 80004a6:	f000 fe8d 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80004aa:	2090      	movs	r0, #144	; 0x90
 80004ac:	2201      	movs	r2, #1
 80004ae:	2104      	movs	r1, #4
 80004b0:	05c0      	lsls	r0, r0, #23
 80004b2:	f000 fe87 	bl	80011c4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80004b6:	2300      	movs	r3, #0
 80004b8:	4c09      	ldr	r4, [pc, #36]	; (80004e0 <send_to_lcd.constprop.1+0x74>)
 80004ba:	6822      	ldr	r2, [r4, #0]
 80004bc:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80004be:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80004c0:	2b13      	cmp	r3, #19
 80004c2:	d9fc      	bls.n	80004be <send_to_lcd.constprop.1+0x52>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80004c4:	2090      	movs	r0, #144	; 0x90
 80004c6:	2200      	movs	r2, #0
 80004c8:	2104      	movs	r1, #4
 80004ca:	05c0      	lsls	r0, r0, #23
 80004cc:	f000 fe7a 	bl	80011c4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80004d0:	2300      	movs	r3, #0
 80004d2:	6822      	ldr	r2, [r4, #0]
 80004d4:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80004d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80004d8:	2b13      	cmp	r3, #19
 80004da:	d9fc      	bls.n	80004d6 <send_to_lcd.constprop.1+0x6a>
}
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	2000006c 	.word	0x2000006c

080004e4 <send_to_lcd>:
{
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80004e8:	2090      	movs	r0, #144	; 0x90
 80004ea:	b2ca      	uxtb	r2, r1
 80004ec:	05c0      	lsls	r0, r0, #23
 80004ee:	2101      	movs	r1, #1
 80004f0:	f000 fe68 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80004f4:	2401      	movs	r4, #1
 80004f6:	2090      	movs	r0, #144	; 0x90
 80004f8:	08ea      	lsrs	r2, r5, #3
 80004fa:	4022      	ands	r2, r4
 80004fc:	2140      	movs	r1, #64	; 0x40
 80004fe:	05c0      	lsls	r0, r0, #23
 8000500:	f000 fe60 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000504:	2090      	movs	r0, #144	; 0x90
 8000506:	08aa      	lsrs	r2, r5, #2
 8000508:	4022      	ands	r2, r4
 800050a:	2120      	movs	r1, #32
 800050c:	05c0      	lsls	r0, r0, #23
 800050e:	f000 fe59 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000512:	2090      	movs	r0, #144	; 0x90
 8000514:	086a      	lsrs	r2, r5, #1
 8000516:	4022      	ands	r2, r4
 8000518:	2110      	movs	r1, #16
 800051a:	05c0      	lsls	r0, r0, #23
 800051c:	f000 fe52 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000520:	0022      	movs	r2, r4
 8000522:	2090      	movs	r0, #144	; 0x90
 8000524:	2108      	movs	r1, #8
 8000526:	402a      	ands	r2, r5
 8000528:	05c0      	lsls	r0, r0, #23
 800052a:	f000 fe4b 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 800052e:	2090      	movs	r0, #144	; 0x90
 8000530:	2201      	movs	r2, #1
 8000532:	2104      	movs	r1, #4
 8000534:	05c0      	lsls	r0, r0, #23
 8000536:	f000 fe45 	bl	80011c4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800053a:	2300      	movs	r3, #0
 800053c:	4c09      	ldr	r4, [pc, #36]	; (8000564 <send_to_lcd+0x80>)
 800053e:	6822      	ldr	r2, [r4, #0]
 8000540:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000542:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000544:	2b13      	cmp	r3, #19
 8000546:	d9fc      	bls.n	8000542 <send_to_lcd+0x5e>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000548:	2090      	movs	r0, #144	; 0x90
 800054a:	2200      	movs	r2, #0
 800054c:	2104      	movs	r1, #4
 800054e:	05c0      	lsls	r0, r0, #23
 8000550:	f000 fe38 	bl	80011c4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000554:	2300      	movs	r3, #0
 8000556:	6822      	ldr	r2, [r4, #0]
 8000558:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800055a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800055c:	2b13      	cmp	r3, #19
 800055e:	d9fc      	bls.n	800055a <send_to_lcd+0x76>
}
 8000560:	bd70      	pop	{r4, r5, r6, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	2000006c 	.word	0x2000006c

08000568 <lcd_xy>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_xy(int row, int col)
{
 8000568:	b510      	push	{r4, lr}
    switch (row)
 800056a:	2800      	cmp	r0, #0
 800056c:	d00e      	beq.n	800058c <lcd_xy+0x24>
 800056e:	2801      	cmp	r0, #1
 8000570:	d101      	bne.n	8000576 <lcd_xy+0xe>
    {
        case 0:
            col |= 0x80;
            break;
        case 1:
            col |= 0xC0;
 8000572:	23c0      	movs	r3, #192	; 0xc0
 8000574:	4319      	orrs	r1, r3
            break;
    }

    lcd_send_cmd (col);
 8000576:	b2cc      	uxtb	r4, r1
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000578:	0920      	lsrs	r0, r4, #4
 800057a:	2100      	movs	r1, #0
 800057c:	f7ff ffb2 	bl	80004e4 <send_to_lcd>
	send_to_lcd(datatosend, 0);
 8000580:	200f      	movs	r0, #15
 8000582:	2100      	movs	r1, #0
 8000584:	4020      	ands	r0, r4
 8000586:	f7ff ffad 	bl	80004e4 <send_to_lcd>
}
 800058a:	bd10      	pop	{r4, pc}
            col |= 0x80;
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	4319      	orrs	r1, r3
            break;
 8000590:	e7f1      	b.n	8000576 <lcd_xy+0xe>
 8000592:	46c0      	nop			; (mov r8, r8)

08000594 <lcd_init>:


void lcd_init (void)
{
 8000594:	b510      	push	{r4, lr}
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000596:	2032      	movs	r0, #50	; 0x32
 8000598:	f000 fa8a 	bl	8000ab0 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 800059c:	f7ff ff66 	bl	800046c <send_to_lcd.constprop.1>
	send_to_lcd(datatosend, 0);
 80005a0:	f7ff ff28 	bl	80003f4 <send_to_lcd.constprop.0>
	lcd_send_cmd (0x30);
	HAL_Delay(5);  // wait for >4.1ms
 80005a4:	2005      	movs	r0, #5
 80005a6:	f000 fa83 	bl	8000ab0 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005aa:	f7ff ff5f 	bl	800046c <send_to_lcd.constprop.1>
	send_to_lcd(datatosend, 0);
 80005ae:	f7ff ff21 	bl	80003f4 <send_to_lcd.constprop.0>
	lcd_send_cmd (0x30);
	HAL_Delay(1);  // wait for >100us
 80005b2:	2001      	movs	r0, #1
 80005b4:	f000 fa7c 	bl	8000ab0 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005b8:	f7ff ff58 	bl	800046c <send_to_lcd.constprop.1>
	send_to_lcd(datatosend, 0);
 80005bc:	f7ff ff1a 	bl	80003f4 <send_to_lcd.constprop.0>
	lcd_send_cmd (0x30);
	HAL_Delay(10);
 80005c0:	200a      	movs	r0, #10
 80005c2:	f000 fa75 	bl	8000ab0 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005c6:	2100      	movs	r1, #0
 80005c8:	2002      	movs	r0, #2
 80005ca:	f7ff ff8b 	bl	80004e4 <send_to_lcd>
	send_to_lcd(datatosend, 0);
 80005ce:	f7ff ff11 	bl	80003f4 <send_to_lcd.constprop.0>
	lcd_send_cmd (0x20);  // 4bit mode
	HAL_Delay(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f000 fa6c 	bl	8000ab0 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005d8:	2100      	movs	r1, #0
 80005da:	2002      	movs	r0, #2
 80005dc:	f7ff ff82 	bl	80004e4 <send_to_lcd>
	send_to_lcd(datatosend, 0);
 80005e0:	2100      	movs	r1, #0
 80005e2:	2008      	movs	r0, #8
 80005e4:	f7ff ff7e 	bl	80004e4 <send_to_lcd>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 fa61 	bl	8000ab0 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005ee:	f7ff ff01 	bl	80003f4 <send_to_lcd.constprop.0>
	send_to_lcd(datatosend, 0);
 80005f2:	2100      	movs	r1, #0
 80005f4:	2008      	movs	r0, #8
 80005f6:	f7ff ff75 	bl	80004e4 <send_to_lcd>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
	HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 fa58 	bl	8000ab0 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000600:	f7ff fef8 	bl	80003f4 <send_to_lcd.constprop.0>
	send_to_lcd(datatosend, 0);
 8000604:	2100      	movs	r1, #0
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff ff6c 	bl	80004e4 <send_to_lcd>
	lcd_send_cmd (0x01);  // clear display
	HAL_Delay(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f000 fa4f 	bl	8000ab0 <HAL_Delay>
	HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 fa4c 	bl	8000ab0 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000618:	f7ff feec 	bl	80003f4 <send_to_lcd.constprop.0>
	send_to_lcd(datatosend, 0);
 800061c:	2100      	movs	r1, #0
 800061e:	2006      	movs	r0, #6
 8000620:	f7ff ff60 	bl	80004e4 <send_to_lcd>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f000 fa43 	bl	8000ab0 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 800062a:	f7ff fee3 	bl	80003f4 <send_to_lcd.constprop.0>
	send_to_lcd(datatosend, 0);
 800062e:	2100      	movs	r1, #0
 8000630:	200c      	movs	r0, #12
 8000632:	f7ff ff57 	bl	80004e4 <send_to_lcd>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}
 8000636:	bd10      	pop	{r4, pc}

08000638 <LCD_String>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**************** Below Function Send String ,Int and Float to LCD*************************************** */

void LCD_String (char *str)
{
 8000638:	b570      	push	{r4, r5, r6, lr}
	while (*str) lcd_send_data (*str++);
 800063a:	7804      	ldrb	r4, [r0, #0]
{
 800063c:	0005      	movs	r5, r0
	while (*str) lcd_send_data (*str++);
 800063e:	2c00      	cmp	r4, #0
 8000640:	d00d      	beq.n	800065e <LCD_String+0x26>
	datatosend = ((data)&0x0f);
 8000642:	260f      	movs	r6, #15
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000644:	0920      	lsrs	r0, r4, #4
 8000646:	2101      	movs	r1, #1
 8000648:	f7ff ff4c 	bl	80004e4 <send_to_lcd>
	send_to_lcd(datatosend, 1);
 800064c:	0020      	movs	r0, r4
 800064e:	2101      	movs	r1, #1
	while (*str) lcd_send_data (*str++);
 8000650:	3501      	adds	r5, #1
	send_to_lcd(datatosend, 1);
 8000652:	4030      	ands	r0, r6
 8000654:	f7ff ff46 	bl	80004e4 <send_to_lcd>
	while (*str) lcd_send_data (*str++);
 8000658:	782c      	ldrb	r4, [r5, #0]
 800065a:	2c00      	cmp	r4, #0
 800065c:	d1f2      	bne.n	8000644 <LCD_String+0xc>
}
 800065e:	bd70      	pop	{r4, r5, r6, pc}

08000660 <LCD_Print_fdot>:


void LCD_Print_fdot( int16_t intd){
  char Humi_Str[6];

  Humi_Str[0] = (intd/1000)%10 + 48; // Extract 0xxxx digit
 8000660:	21fa      	movs	r1, #250	; 0xfa
void LCD_Print_fdot( int16_t intd){
 8000662:	b570      	push	{r4, r5, r6, lr}
  Humi_Str[0] = (intd/1000)%10 + 48; // Extract 0xxxx digit
 8000664:	0089      	lsls	r1, r1, #2
void LCD_Print_fdot( int16_t intd){
 8000666:	b082      	sub	sp, #8
 8000668:	0005      	movs	r5, r0
  Humi_Str[0] = (intd/1000)%10 + 48; // Extract 0xxxx digit
 800066a:	f7ff fdd7 	bl	800021c <__divsi3>
 800066e:	210a      	movs	r1, #10
 8000670:	b200      	sxth	r0, r0
 8000672:	f7ff feb9 	bl	80003e8 <__aeabi_idivmod>
 8000676:	466b      	mov	r3, sp
 8000678:	3130      	adds	r1, #48	; 0x30
 800067a:	b2cc      	uxtb	r4, r1
 800067c:	701c      	strb	r4, [r3, #0]
  Humi_Str[1] = (intd/100)%10 + 48; // Extract 0xxxx digit
 800067e:	2164      	movs	r1, #100	; 0x64
 8000680:	0028      	movs	r0, r5
 8000682:	f7ff fdcb 	bl	800021c <__divsi3>
 8000686:	210a      	movs	r1, #10
 8000688:	b200      	sxth	r0, r0
 800068a:	f7ff fead 	bl	80003e8 <__aeabi_idivmod>
 800068e:	466b      	mov	r3, sp
 8000690:	3130      	adds	r1, #48	; 0x30
  Humi_Str[2] = '.'; // Extract 0xxxx digit
 8000692:	466a      	mov	r2, sp
  Humi_Str[1] = (intd/100)%10 + 48; // Extract 0xxxx digit
 8000694:	7059      	strb	r1, [r3, #1]
  Humi_Str[2] = '.'; // Extract 0xxxx digit
 8000696:	232e      	movs	r3, #46	; 0x2e
  Humi_Str[3] = (intd/10)%10 + 48; // Extract 0xxxx digit
 8000698:	210a      	movs	r1, #10
  Humi_Str[2] = '.'; // Extract 0xxxx digit
 800069a:	7093      	strb	r3, [r2, #2]
  Humi_Str[3] = (intd/10)%10 + 48; // Extract 0xxxx digit
 800069c:	0028      	movs	r0, r5
 800069e:	f7ff fdbd 	bl	800021c <__divsi3>
 80006a2:	210a      	movs	r1, #10
 80006a4:	b200      	sxth	r0, r0
 80006a6:	f7ff fe9f 	bl	80003e8 <__aeabi_idivmod>
 80006aa:	466b      	mov	r3, sp
 80006ac:	3130      	adds	r1, #48	; 0x30
 80006ae:	70d9      	strb	r1, [r3, #3]
  Humi_Str[4] = (intd)%10 + 48; // Extract 0xxxx digit
 80006b0:	0028      	movs	r0, r5
 80006b2:	210a      	movs	r1, #10
 80006b4:	f7ff fe98 	bl	80003e8 <__aeabi_idivmod>
 80006b8:	466b      	mov	r3, sp
 80006ba:	3130      	adds	r1, #48	; 0x30
  Humi_Str[5] = 0;               // String Terminator
 80006bc:	466a      	mov	r2, sp
  Humi_Str[4] = (intd)%10 + 48; // Extract 0xxxx digit
 80006be:	7119      	strb	r1, [r3, #4]
  Humi_Str[5] = 0;               // String Terminator
 80006c0:	2300      	movs	r3, #0
 80006c2:	466d      	mov	r5, sp
	datatosend = ((data)&0x0f);
 80006c4:	260f      	movs	r6, #15
  Humi_Str[5] = 0;               // String Terminator
 80006c6:	7153      	strb	r3, [r2, #5]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80006c8:	0920      	lsrs	r0, r4, #4
 80006ca:	2101      	movs	r1, #1
 80006cc:	f7ff ff0a 	bl	80004e4 <send_to_lcd>
	send_to_lcd(datatosend, 1);
 80006d0:	0020      	movs	r0, r4
 80006d2:	2101      	movs	r1, #1
	while (*str) lcd_send_data (*str++);
 80006d4:	3501      	adds	r5, #1
	send_to_lcd(datatosend, 1);
 80006d6:	4030      	ands	r0, r6
 80006d8:	f7ff ff04 	bl	80004e4 <send_to_lcd>
	while (*str) lcd_send_data (*str++);
 80006dc:	782c      	ldrb	r4, [r5, #0]
 80006de:	2c00      	cmp	r4, #0
 80006e0:	d1f2      	bne.n	80006c8 <LCD_Print_fdot+0x68>

  LCD_String(Humi_Str);  // for degree celcus
  }
 80006e2:	b002      	add	sp, #8
 80006e4:	bd70      	pop	{r4, r5, r6, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b500      	push	{lr}
 80006ea:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ec:	2228      	movs	r2, #40	; 0x28
 80006ee:	2100      	movs	r1, #0
 80006f0:	a806      	add	r0, sp, #24
 80006f2:	f001 f9f9 	bl	8001ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f6:	2210      	movs	r2, #16
 80006f8:	2100      	movs	r1, #0
 80006fa:	4668      	mov	r0, sp
 80006fc:	f001 f9f4 	bl	8001ae8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8000700:	2211      	movs	r2, #17
 8000702:	2301      	movs	r3, #1
 8000704:	9204      	str	r2, [sp, #16]
 8000706:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800070c:	330f      	adds	r3, #15
 800070e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	2202      	movs	r2, #2
 8000714:	025b      	lsls	r3, r3, #9
 8000716:	920c      	str	r2, [sp, #48]	; 0x30
 8000718:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800071a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800071e:	02db      	lsls	r3, r3, #11
 8000720:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f000 fd55 	bl	80011d0 <HAL_RCC_OscConfig>
 8000726:	2800      	cmp	r0, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <SystemClock_Config+0x44>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	3b05      	subs	r3, #5
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000738:	2101      	movs	r1, #1
 800073a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800073e:	f000 ffa1 	bl	8001684 <HAL_RCC_ClockConfig>
 8000742:	2800      	cmp	r0, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x62>
 8000746:	b672      	cpsid	i
  while (1)
 8000748:	e7fe      	b.n	8000748 <SystemClock_Config+0x60>
}
 800074a:	b011      	add	sp, #68	; 0x44
 800074c:	bd00      	pop	{pc}
 800074e:	46c0      	nop			; (mov r8, r8)

08000750 <main>:
{
 8000750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000752:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000754:	f000 f98a 	bl	8000a6c <HAL_Init>
  SystemClock_Config();
 8000758:	f7ff ffc6 	bl	80006e8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	2214      	movs	r2, #20
 800075e:	2100      	movs	r1, #0
 8000760:	a805      	add	r0, sp, #20
 8000762:	f001 f9c1 	bl	8001ae8 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	4b57      	ldr	r3, [pc, #348]	; (80008c8 <main+0x178>)
 800076a:	03c9      	lsls	r1, r1, #15
 800076c:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 800076e:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000770:	430a      	orrs	r2, r1
 8000772:	615a      	str	r2, [r3, #20]
 8000774:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 8000776:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000778:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000780:	695a      	ldr	r2, [r3, #20]
 8000782:	0289      	lsls	r1, r1, #10
 8000784:	430a      	orrs	r2, r1
 8000786:	615a      	str	r2, [r3, #20]
 8000788:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 800078a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	400b      	ands	r3, r1
 800078e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 8000790:	217f      	movs	r1, #127	; 0x7f
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 8000794:	f000 fd16 	bl	80011c4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D4_Pin
 800079c:	237f      	movs	r3, #127	; 0x7f
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	a905      	add	r1, sp, #20
 80007a2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80007a4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f000 fbfe 	bl	8000fac <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b0:	220c      	movs	r2, #12
 80007b2:	2100      	movs	r1, #0
 80007b4:	a805      	add	r0, sp, #20
 80007b6:	f001 f997 	bl	8001ae8 <memset>
  hadc.Instance = ADC1;
 80007ba:	4c44      	ldr	r4, [pc, #272]	; (80008cc <main+0x17c>)
 80007bc:	4b44      	ldr	r3, [pc, #272]	; (80008d0 <main+0x180>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007be:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80007c0:	6023      	str	r3, [r4, #0]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 80007c2:	2308      	movs	r3, #8
 80007c4:	60a3      	str	r3, [r4, #8]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	3b04      	subs	r3, #4
 80007c8:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ca:	23c2      	movs	r3, #194	; 0xc2
 80007cc:	33ff      	adds	r3, #255	; 0xff
 80007ce:	61e3      	str	r3, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007d0:	3b9e      	subs	r3, #158	; 0x9e
 80007d2:	3bff      	subs	r3, #255	; 0xff
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007d4:	61a5      	str	r5, [r4, #24]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d6:	6065      	str	r5, [r4, #4]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d8:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80007da:	6126      	str	r6, [r4, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007dc:	6225      	str	r5, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007de:	54e5      	strb	r5, [r4, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e0:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007e2:	f000 f9d1 	bl	8000b88 <HAL_ADC_Init>
 80007e6:	2800      	cmp	r0, #0
 80007e8:	d001      	beq.n	80007ee <main+0x9e>
 80007ea:	b672      	cpsid	i
  while (1)
 80007ec:	e7fe      	b.n	80007ec <main+0x9c>
  sConfig.Channel = ADC_CHANNEL_7;
 80007ee:	2307      	movs	r3, #7
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007f0:	2780      	movs	r7, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_7;
 80007f2:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007f4:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80007f6:	3b02      	subs	r3, #2
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007f8:	017f      	lsls	r7, r7, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007fa:	a905      	add	r1, sp, #20
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007fc:	9706      	str	r7, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80007fe:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000800:	f000 fb06 	bl	8000e10 <HAL_ADC_ConfigChannel>
 8000804:	1e05      	subs	r5, r0, #0
 8000806:	d11b      	bne.n	8000840 <main+0xf0>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000808:	0001      	movs	r1, r0
 800080a:	2210      	movs	r2, #16
 800080c:	a805      	add	r0, sp, #20
 800080e:	f001 f96b 	bl	8001ae8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000812:	2208      	movs	r2, #8
 8000814:	0029      	movs	r1, r5
 8000816:	a803      	add	r0, sp, #12
 8000818:	f001 f966 	bl	8001ae8 <memset>
  htim1.Instance = TIM1;
 800081c:	4e2d      	ldr	r6, [pc, #180]	; (80008d4 <main+0x184>)
 800081e:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <main+0x188>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000820:	0030      	movs	r0, r6
  htim1.Instance = TIM1;
 8000822:	6033      	str	r3, [r6, #0]
  htim1.Init.Prescaler = 48-1;
 8000824:	232f      	movs	r3, #47	; 0x2f
 8000826:	6073      	str	r3, [r6, #4]
  htim1.Init.Period = 0xffff-1;
 8000828:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <main+0x18c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	60b5      	str	r5, [r6, #8]
  htim1.Init.Period = 0xffff-1;
 800082c:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082e:	6135      	str	r5, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8000830:	6175      	str	r5, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	61b5      	str	r5, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000834:	f000 ffe2 	bl	80017fc <HAL_TIM_Base_Init>
 8000838:	2800      	cmp	r0, #0
 800083a:	d003      	beq.n	8000844 <main+0xf4>
 800083c:	b672      	cpsid	i
  while (1)
 800083e:	e7fe      	b.n	800083e <main+0xee>
 8000840:	b672      	cpsid	i
 8000842:	e7fe      	b.n	8000842 <main+0xf2>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000844:	0030      	movs	r0, r6
 8000846:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000848:	9705      	str	r7, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800084a:	f001 f86b 	bl	8001924 <HAL_TIM_ConfigClockSource>
 800084e:	2800      	cmp	r0, #0
 8000850:	d001      	beq.n	8000856 <main+0x106>
 8000852:	b672      	cpsid	i
  while (1)
 8000854:	e7fe      	b.n	8000854 <main+0x104>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800085a:	a903      	add	r1, sp, #12
 800085c:	0030      	movs	r0, r6
 800085e:	f001 f919 	bl	8001a94 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	1e05      	subs	r5, r0, #0
 8000864:	d001      	beq.n	800086a <main+0x11a>
 8000866:	b672      	cpsid	i
  while (1)
 8000868:	e7fe      	b.n	8000868 <main+0x118>
  HAL_TIM_Base_Start(&htim1);  // Timer On and init this line
 800086a:	0030      	movs	r0, r6
 800086c:	f001 f834 	bl	80018d8 <HAL_TIM_Base_Start>
  lcd_init();                //LCD init
 8000870:	f7ff fe90 	bl	8000594 <lcd_init>
  lcd_xy(0, 4);   // set curser postion
 8000874:	0028      	movs	r0, r5
 8000876:	2104      	movs	r1, #4
 8000878:	f7ff fe76 	bl	8000568 <lcd_xy>
  LCD_String("MCU Temp");  // Print String
 800087c:	4818      	ldr	r0, [pc, #96]	; (80008e0 <main+0x190>)
 800087e:	f7ff fedb 	bl	8000638 <LCD_String>
	int16_t voltage  = ( ADCvalue * 33000) / 1023;
 8000882:	4e18      	ldr	r6, [pc, #96]	; (80008e4 <main+0x194>)
 8000884:	4f18      	ldr	r7, [pc, #96]	; (80008e8 <main+0x198>)
 8000886:	4d19      	ldr	r5, [pc, #100]	; (80008ec <main+0x19c>)
		HAL_ADC_Start(&hadc);
 8000888:	0020      	movs	r0, r4
 800088a:	f000 fa25 	bl	8000cd8 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc,200);
 800088e:	21c8      	movs	r1, #200	; 0xc8
 8000890:	0020      	movs	r0, r4
 8000892:	f000 fa4d 	bl	8000d30 <HAL_ADC_PollForConversion>
	    adcvalue = HAL_ADC_GetValue(&hadc);
 8000896:	0020      	movs	r0, r4
 8000898:	f000 fab6 	bl	8000e08 <HAL_ADC_GetValue>
 800089c:	8038      	strh	r0, [r7, #0]
	int16_t voltage  = ( ADCvalue * 33000) / 1023;
 800089e:	0400      	lsls	r0, r0, #16
 80008a0:	0c00      	lsrs	r0, r0, #16
 80008a2:	4370      	muls	r0, r6
 80008a4:	4912      	ldr	r1, [pc, #72]	; (80008f0 <main+0x1a0>)
 80008a6:	f7ff fcb9 	bl	800021c <__divsi3>
		lcd_xy(1, 0);
 80008aa:	2100      	movs	r1, #0
	    temp =  LM35_tmp (adcvalue);
 80008ac:	8028      	strh	r0, [r5, #0]
		lcd_xy(1, 0);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f7ff fe5a 	bl	8000568 <lcd_xy>
		 LCD_Print_fdot(temp);
 80008b4:	2300      	movs	r3, #0
 80008b6:	5ee8      	ldrsh	r0, [r5, r3]
 80008b8:	f7ff fed2 	bl	8000660 <LCD_Print_fdot>
		HAL_Delay(500);
 80008bc:	20fa      	movs	r0, #250	; 0xfa
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	f000 f8f6 	bl	8000ab0 <HAL_Delay>
  while (1)
 80008c4:	e7e0      	b.n	8000888 <main+0x138>
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	40021000 	.word	0x40021000
 80008cc:	2000002c 	.word	0x2000002c
 80008d0:	40012400 	.word	0x40012400
 80008d4:	2000006c 	.word	0x2000006c
 80008d8:	40012c00 	.word	0x40012c00
 80008dc:	0000fffe 	.word	0x0000fffe
 80008e0:	08001b58 	.word	0x08001b58
 80008e4:	000080e8 	.word	0x000080e8
 80008e8:	20000028 	.word	0x20000028
 80008ec:	200000b4 	.word	0x200000b4
 80008f0:	000003ff 	.word	0x000003ff

080008f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f4:	2201      	movs	r2, #1
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_MspInit+0x2c>)
{
 80008f8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	6999      	ldr	r1, [r3, #24]
 80008fc:	4311      	orrs	r1, r2
 80008fe:	6199      	str	r1, [r3, #24]
 8000900:	6999      	ldr	r1, [r3, #24]
 8000902:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000904:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	9200      	str	r2, [sp, #0]
 8000908:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	69da      	ldr	r2, [r3, #28]
 800090c:	0549      	lsls	r1, r1, #21
 800090e:	430a      	orrs	r2, r1
 8000910:	61da      	str	r2, [r3, #28]
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	400b      	ands	r3, r1
 8000916:	9301      	str	r3, [sp, #4]
 8000918:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	b002      	add	sp, #8
 800091c:	4770      	bx	lr
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000924:	b510      	push	{r4, lr}
 8000926:	0004      	movs	r4, r0
 8000928:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	2214      	movs	r2, #20
 800092c:	2100      	movs	r1, #0
 800092e:	a802      	add	r0, sp, #8
 8000930:	f001 f8da 	bl	8001ae8 <memset>
  if(hadc->Instance==ADC1)
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_ADC_MspInit+0x58>)
 8000936:	6822      	ldr	r2, [r4, #0]
 8000938:	429a      	cmp	r2, r3
 800093a:	d001      	beq.n	8000940 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800093c:	b008      	add	sp, #32
 800093e:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_ADC_MspInit+0x5c>)
 8000944:	0089      	lsls	r1, r1, #2
 8000946:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 800094a:	430a      	orrs	r2, r1
 800094c:	619a      	str	r2, [r3, #24]
 800094e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000952:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000956:	9200      	str	r2, [sp, #0]
 8000958:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	695a      	ldr	r2, [r3, #20]
 800095c:	0289      	lsls	r1, r1, #10
 800095e:	430a      	orrs	r2, r1
 8000960:	615a      	str	r2, [r3, #20]
 8000962:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000964:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	400b      	ands	r3, r1
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800096c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000970:	9202      	str	r2, [sp, #8]
 8000972:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f000 fb1a 	bl	8000fac <HAL_GPIO_Init>
}
 8000978:	e7e0      	b.n	800093c <HAL_ADC_MspInit+0x18>
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	40012400 	.word	0x40012400
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_TIM_Base_MspInit+0x24>)
 8000986:	6802      	ldr	r2, [r0, #0]
{
 8000988:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 800098a:	429a      	cmp	r2, r3
 800098c:	d001      	beq.n	8000992 <HAL_TIM_Base_MspInit+0xe>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800098e:	b002      	add	sp, #8
 8000990:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_TIM_Base_MspInit+0x28>)
 8000996:	0109      	lsls	r1, r1, #4
 8000998:	699a      	ldr	r2, [r3, #24]
 800099a:	430a      	orrs	r2, r1
 800099c:	619a      	str	r2, [r3, #24]
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	400b      	ands	r3, r1
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	9b01      	ldr	r3, [sp, #4]
}
 80009a6:	e7f2      	b.n	800098e <HAL_TIM_Base_MspInit+0xa>
 80009a8:	40012c00 	.word	0x40012c00
 80009ac:	40021000 	.word	0x40021000

080009b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler>
 80009b2:	46c0      	nop			; (mov r8, r8)

080009b4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <HardFault_Handler>
 80009b6:	46c0      	nop			; (mov r8, r8)

080009b8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009b8:	4770      	bx	lr
 80009ba:	46c0      	nop			; (mov r8, r8)

080009bc <PendSV_Handler>:
 80009bc:	4770      	bx	lr
 80009be:	46c0      	nop			; (mov r8, r8)

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 f863 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bd10      	pop	{r4, pc}

080009c8 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009c8:	4770      	bx	lr
 80009ca:	46c0      	nop			; (mov r8, r8)

080009cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009d0:	f7ff fffa 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80009d6:	490d      	ldr	r1, [pc, #52]	; (8000a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <LoopForever+0xe>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ec:	4c0a      	ldr	r4, [pc, #40]	; (8000a18 <LoopForever+0x16>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009fa:	f001 f87d 	bl	8001af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f7ff fea7 	bl	8000750 <main>

08000a02 <LoopForever>:

LoopForever:
    b LoopForever
 8000a02:	e7fe      	b.n	8000a02 <LoopForever>
  ldr   r0, =_estack
 8000a04:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a10:	08001b9c 	.word	0x08001b9c
  ldr r2, =_sbss
 8000a14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a18:	200000bc 	.word	0x200000bc

08000a1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC1_IRQHandler>
	...

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b570      	push	{r4, r5, r6, lr}
 8000a22:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	20fa      	movs	r0, #250	; 0xfa
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_InitTick+0x40>)
 8000a28:	0080      	lsls	r0, r0, #2
 8000a2a:	7819      	ldrb	r1, [r3, #0]
 8000a2c:	f7ff fb6c 	bl	8000108 <__udivsi3>
 8000a30:	4d0c      	ldr	r5, [pc, #48]	; (8000a64 <HAL_InitTick+0x44>)
 8000a32:	0001      	movs	r1, r0
 8000a34:	6828      	ldr	r0, [r5, #0]
 8000a36:	f7ff fb67 	bl	8000108 <__udivsi3>
 8000a3a:	f000 fa9d 	bl	8000f78 <HAL_SYSTICK_Config>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d10c      	bne.n	8000a5c <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8000a42:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a44:	2c03      	cmp	r4, #3
 8000a46:	d900      	bls.n	8000a4a <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4a:	3802      	subs	r0, #2
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	0021      	movs	r1, r4
 8000a50:	f000 fa60 	bl	8000f14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <HAL_InitTick+0x48>)
 8000a56:	2000      	movs	r0, #0
 8000a58:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000a5a:	e7f5      	b.n	8000a48 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	e7f3      	b.n	8000a48 <HAL_InitTick+0x28>
 8000a60:	20000004 	.word	0x20000004
 8000a64:	20000000 	.word	0x20000000
 8000a68:	20000008 	.word	0x20000008

08000a6c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <HAL_Init+0x1c>)
{
 8000a70:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a72:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a74:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a76:	430b      	orrs	r3, r1
 8000a78:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	f7ff ffd1 	bl	8000a20 <HAL_InitTick>
  HAL_MspInit();
 8000a7e:	f7ff ff39 	bl	80008f4 <HAL_MspInit>
}
 8000a82:	2000      	movs	r0, #0
 8000a84:	bd10      	pop	{r4, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	40022000 	.word	0x40022000

08000a8c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a8c:	4a03      	ldr	r2, [pc, #12]	; (8000a9c <HAL_IncTick+0x10>)
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <HAL_IncTick+0x14>)
 8000a90:	6811      	ldr	r1, [r2, #0]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	185b      	adds	r3, r3, r1
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	4770      	bx	lr
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	200000b8 	.word	0x200000b8
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000aa4:	4b01      	ldr	r3, [pc, #4]	; (8000aac <HAL_GetTick+0x8>)
 8000aa6:	6818      	ldr	r0, [r3, #0]
}
 8000aa8:	4770      	bx	lr
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	200000b8 	.word	0x200000b8

08000ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff fff6 	bl	8000aa4 <HAL_GetTick>
 8000ab8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aba:	1c63      	adds	r3, r4, #1
 8000abc:	d002      	beq.n	8000ac4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <HAL_Delay+0x20>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ac4:	f7ff ffee 	bl	8000aa4 <HAL_GetTick>
 8000ac8:	1b40      	subs	r0, r0, r5
 8000aca:	42a0      	cmp	r0, r4
 8000acc:	d3fa      	bcc.n	8000ac4 <HAL_Delay+0x14>
  {
  }
}
 8000ace:	bd70      	pop	{r4, r5, r6, pc}
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <ADC_Enable.constprop.0>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000ad4:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8000ad6:	b570      	push	{r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ad8:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8000ada:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000adc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ade:	6891      	ldr	r1, [r2, #8]
 8000ae0:	3303      	adds	r3, #3
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8000ae2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ae4:	400b      	ands	r3, r1
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d037      	beq.n	8000b5a <ADC_Enable.constprop.0+0x86>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000aea:	6891      	ldr	r1, [r2, #8]
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <ADC_Enable.constprop.0+0xa8>)
 8000aee:	4219      	tst	r1, r3
 8000af0:	d129      	bne.n	8000b46 <ADC_Enable.constprop.0+0x72>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000af2:	2101      	movs	r1, #1
 8000af4:	6893      	ldr	r3, [r2, #8]
 8000af6:	430b      	orrs	r3, r1
 8000af8:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <ADC_Enable.constprop.0+0xac>)
 8000afc:	4921      	ldr	r1, [pc, #132]	; (8000b84 <ADC_Enable.constprop.0+0xb0>)
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	f7ff fb02 	bl	8000108 <__udivsi3>
 8000b04:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000b06:	9b01      	ldr	r3, [sp, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d005      	beq.n	8000b18 <ADC_Enable.constprop.0+0x44>
    {
      wait_loop_index--;
 8000b0c:	9b01      	ldr	r3, [sp, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000b12:	9b01      	ldr	r3, [sp, #4]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1f9      	bne.n	8000b0c <ADC_Enable.constprop.0+0x38>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b18:	f7ff ffc4 	bl	8000aa4 <HAL_GetTick>
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000b1c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000b1e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000b20:	681b      	ldr	r3, [r3, #0]
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000b22:	2501      	movs	r5, #1
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000b24:	07db      	lsls	r3, r3, #31
 8000b26:	d40b      	bmi.n	8000b40 <ADC_Enable.constprop.0+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000b28:	f7ff ffbc 	bl	8000aa4 <HAL_GetTick>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000b2c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000b2e:	1b80      	subs	r0, r0, r6
 8000b30:	2802      	cmp	r0, #2
 8000b32:	d902      	bls.n	8000b3a <ADC_Enable.constprop.0+0x66>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4215      	tst	r5, r2
 8000b38:	d016      	beq.n	8000b68 <ADC_Enable.constprop.0+0x94>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	421d      	tst	r5, r3
 8000b3e:	d0f3      	beq.n	8000b28 <ADC_Enable.constprop.0+0x54>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000b40:	2000      	movs	r0, #0
}
 8000b42:	b002      	add	sp, #8
 8000b44:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b46:	2210      	movs	r2, #16
 8000b48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8000b4a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b52:	3a0f      	subs	r2, #15
 8000b54:	4313      	orrs	r3, r2
 8000b56:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000b58:	e7f3      	b.n	8000b42 <ADC_Enable.constprop.0+0x6e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b5a:	6811      	ldr	r1, [r2, #0]
 8000b5c:	420b      	tst	r3, r1
 8000b5e:	d1ef      	bne.n	8000b40 <ADC_Enable.constprop.0+0x6c>
 8000b60:	68d3      	ldr	r3, [r2, #12]
 8000b62:	041b      	lsls	r3, r3, #16
 8000b64:	d4ec      	bmi.n	8000b40 <ADC_Enable.constprop.0+0x6c>
 8000b66:	e7c0      	b.n	8000aea <ADC_Enable.constprop.0+0x16>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b68:	2210      	movs	r2, #16
 8000b6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 8000b6c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b74:	432b      	orrs	r3, r5
 8000b76:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000b78:	e7e3      	b.n	8000b42 <ADC_Enable.constprop.0+0x6e>
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	80000017 	.word	0x80000017
 8000b80:	20000000 	.word	0x20000000
 8000b84:	000f4240 	.word	0x000f4240

08000b88 <HAL_ADC_Init>:
{
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8000b8c:	d100      	bne.n	8000b90 <HAL_ADC_Init+0x8>
 8000b8e:	e082      	b.n	8000c96 <HAL_ADC_Init+0x10e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b90:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d069      	beq.n	8000c6a <HAL_ADC_Init+0xe2>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b98:	06db      	lsls	r3, r3, #27
 8000b9a:	d460      	bmi.n	8000c5e <HAL_ADC_Init+0xd6>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b9c:	6822      	ldr	r2, [r4, #0]
 8000b9e:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000ba0:	075b      	lsls	r3, r3, #29
 8000ba2:	d45c      	bmi.n	8000c5e <HAL_ADC_Init+0xd6>
    ADC_STATE_CLR_SET(hadc->State,
 8000ba4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ba6:	4949      	ldr	r1, [pc, #292]	; (8000ccc <HAL_ADC_Init+0x144>)
 8000ba8:	400b      	ands	r3, r1
 8000baa:	3106      	adds	r1, #6
 8000bac:	31ff      	adds	r1, #255	; 0xff
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	63a3      	str	r3, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	6891      	ldr	r1, [r2, #8]
 8000bb6:	400b      	ands	r3, r1
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d05c      	beq.n	8000c76 <HAL_ADC_Init+0xee>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000bbc:	2118      	movs	r1, #24
 8000bbe:	68d3      	ldr	r3, [r2, #12]
 8000bc0:	438b      	bics	r3, r1
 8000bc2:	68a1      	ldr	r1, [r4, #8]
 8000bc4:	430b      	orrs	r3, r1
 8000bc6:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000bc8:	6913      	ldr	r3, [r2, #16]
 8000bca:	6861      	ldr	r1, [r4, #4]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000bd4:	68d3      	ldr	r3, [r2, #12]
 8000bd6:	493e      	ldr	r1, [pc, #248]	; (8000cd0 <HAL_ADC_Init+0x148>)
 8000bd8:	400b      	ands	r3, r1
 8000bda:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bdc:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000bde:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000be0:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000be2:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000be4:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000be6:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000be8:	68e1      	ldr	r1, [r4, #12]
 8000bea:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000bec:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000bee:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000bf0:	2124      	movs	r1, #36	; 0x24
 8000bf2:	5c61      	ldrb	r1, [r4, r1]
 8000bf4:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000bf6:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000bf8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000bfa:	3901      	subs	r1, #1
 8000bfc:	1e4d      	subs	r5, r1, #1
 8000bfe:	41a9      	sbcs	r1, r5
 8000c00:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c02:	430b      	orrs	r3, r1
 8000c04:	6921      	ldr	r1, [r4, #16]
 8000c06:	3902      	subs	r1, #2
 8000c08:	424d      	negs	r5, r1
 8000c0a:	4169      	adcs	r1, r5
 8000c0c:	0089      	lsls	r1, r1, #2
 8000c0e:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c10:	7ee1      	ldrb	r1, [r4, #27]
 8000c12:	2901      	cmp	r1, #1
 8000c14:	d04b      	beq.n	8000cae <HAL_ADC_Init+0x126>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c16:	20c2      	movs	r0, #194	; 0xc2
 8000c18:	69e1      	ldr	r1, [r4, #28]
 8000c1a:	30ff      	adds	r0, #255	; 0xff
 8000c1c:	4281      	cmp	r1, r0
 8000c1e:	d002      	beq.n	8000c26 <HAL_ADC_Init+0x9e>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c20:	6a20      	ldr	r0, [r4, #32]
 8000c22:	4301      	orrs	r1, r0
 8000c24:	430b      	orrs	r3, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000c26:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c28:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000c2a:	4319      	orrs	r1, r3
 8000c2c:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	0549      	lsls	r1, r1, #21
 8000c32:	428d      	cmp	r5, r1
 8000c34:	d026      	beq.n	8000c84 <HAL_ADC_Init+0xfc>
 8000c36:	1e69      	subs	r1, r5, #1
 8000c38:	2906      	cmp	r1, #6
 8000c3a:	d923      	bls.n	8000c84 <HAL_ADC_Init+0xfc>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c3c:	68d2      	ldr	r2, [r2, #12]
 8000c3e:	4925      	ldr	r1, [pc, #148]	; (8000cd4 <HAL_ADC_Init+0x14c>)
 8000c40:	400a      	ands	r2, r1
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d029      	beq.n	8000c9a <HAL_ADC_Init+0x112>
      ADC_STATE_CLR_SET(hadc->State,
 8000c46:	2212      	movs	r2, #18
 8000c48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      tmp_hal_status = HAL_ERROR;
 8000c4a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000c4c:	4393      	bics	r3, r2
 8000c4e:	3a02      	subs	r2, #2
 8000c50:	4313      	orrs	r3, r2
 8000c52:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c56:	3a0f      	subs	r2, #15
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8000c5c:	e004      	b.n	8000c68 <HAL_ADC_Init+0xe0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c5e:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 8000c60:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000c64:	4313      	orrs	r3, r2
 8000c66:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Lock = HAL_UNLOCKED;
 8000c6a:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8000c6c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8000c6e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000c70:	f7ff fe58 	bl	8000924 <HAL_ADC_MspInit>
 8000c74:	e78f      	b.n	8000b96 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c76:	6811      	ldr	r1, [r2, #0]
 8000c78:	420b      	tst	r3, r1
 8000c7a:	d1ab      	bne.n	8000bd4 <HAL_ADC_Init+0x4c>
 8000c7c:	68d3      	ldr	r3, [r2, #12]
 8000c7e:	041b      	lsls	r3, r3, #16
 8000c80:	d4a8      	bmi.n	8000bd4 <HAL_ADC_Init+0x4c>
 8000c82:	e79b      	b.n	8000bbc <HAL_ADC_Init+0x34>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000c84:	2107      	movs	r1, #7
 8000c86:	6950      	ldr	r0, [r2, #20]
 8000c88:	4388      	bics	r0, r1
 8000c8a:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000c8c:	6950      	ldr	r0, [r2, #20]
 8000c8e:	4029      	ands	r1, r5
 8000c90:	4301      	orrs	r1, r0
 8000c92:	6151      	str	r1, [r2, #20]
 8000c94:	e7d2      	b.n	8000c3c <HAL_ADC_Init+0xb4>
    return HAL_ERROR;
 8000c96:	2001      	movs	r0, #1
 8000c98:	e7e6      	b.n	8000c68 <HAL_ADC_Init+0xe0>
      ADC_CLEAR_ERRORCODE(hadc);
 8000c9a:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000c9c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000c9e:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8000ca0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000ca4:	4393      	bics	r3, r2
 8000ca6:	3a02      	subs	r2, #2
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	63a3      	str	r3, [r4, #56]	; 0x38
 8000cac:	e7dc      	b.n	8000c68 <HAL_ADC_Init+0xe0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	d103      	bne.n	8000cba <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	0249      	lsls	r1, r1, #9
 8000cb6:	430b      	orrs	r3, r1
 8000cb8:	e7ad      	b.n	8000c16 <HAL_ADC_Init+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cba:	2520      	movs	r5, #32
 8000cbc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000cbe:	4328      	orrs	r0, r5
 8000cc0:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000cc4:	4301      	orrs	r1, r0
 8000cc6:	63e1      	str	r1, [r4, #60]	; 0x3c
 8000cc8:	e7a5      	b.n	8000c16 <HAL_ADC_Init+0x8e>
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	fffffefd 	.word	0xfffffefd
 8000cd0:	fffe0219 	.word	0xfffe0219
 8000cd4:	833fffe7 	.word	0x833fffe7

08000cd8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cd8:	6803      	ldr	r3, [r0, #0]
{
 8000cda:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cdc:	689a      	ldr	r2, [r3, #8]
{
 8000cde:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ce0:	0752      	lsls	r2, r2, #29
 8000ce2:	d421      	bmi.n	8000d28 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 8000ce4:	2234      	movs	r2, #52	; 0x34
 8000ce6:	5c81      	ldrb	r1, [r0, r2]
 8000ce8:	2901      	cmp	r1, #1
 8000cea:	d01d      	beq.n	8000d28 <HAL_ADC_Start+0x50>
 8000cec:	2101      	movs	r1, #1
 8000cee:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000cf0:	7e42      	ldrb	r2, [r0, #25]
 8000cf2:	2a01      	cmp	r2, #1
 8000cf4:	d112      	bne.n	8000d1c <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 8000cf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000cfa:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000cfc:	4011      	ands	r1, r2
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	0052      	lsls	r2, r2, #1
 8000d02:	430a      	orrs	r2, r1
 8000d04:	63a2      	str	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8000d06:	2134      	movs	r1, #52	; 0x34
      ADC_CLEAR_ERRORCODE(hadc);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	63e2      	str	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8000d0c:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d0e:	321c      	adds	r2, #28
 8000d10:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	3930      	subs	r1, #48	; 0x30
 8000d16:	430a      	orrs	r2, r1
 8000d18:	609a      	str	r2, [r3, #8]
}
 8000d1a:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000d1c:	f7ff feda 	bl	8000ad4 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 8000d20:	2800      	cmp	r0, #0
 8000d22:	d1fa      	bne.n	8000d1a <HAL_ADC_Start+0x42>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	e7e6      	b.n	8000cf6 <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 8000d28:	2002      	movs	r0, #2
 8000d2a:	e7f6      	b.n	8000d1a <HAL_ADC_Start+0x42>
 8000d2c:	fffff0fe 	.word	0xfffff0fe

08000d30 <HAL_ADC_PollForConversion>:
{
 8000d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000d32:	6944      	ldr	r4, [r0, #20]
{
 8000d34:	0005      	movs	r5, r0
 8000d36:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000d38:	2c08      	cmp	r4, #8
 8000d3a:	d004      	beq.n	8000d46 <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000d3c:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000d3e:	240c      	movs	r4, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	07db      	lsls	r3, r3, #31
 8000d44:	d44c      	bmi.n	8000de0 <HAL_ADC_PollForConversion+0xb0>
  tickstart = HAL_GetTick();
 8000d46:	f7ff fead 	bl	8000aa4 <HAL_GetTick>
 8000d4a:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000d4c:	682a      	ldr	r2, [r5, #0]
 8000d4e:	1c73      	adds	r3, r6, #1
 8000d50:	d125      	bne.n	8000d9e <HAL_ADC_PollForConversion+0x6e>
 8000d52:	6813      	ldr	r3, [r2, #0]
 8000d54:	4223      	tst	r3, r4
 8000d56:	d0fc      	beq.n	8000d52 <HAL_ADC_PollForConversion+0x22>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	430b      	orrs	r3, r1
 8000d60:	63ab      	str	r3, [r5, #56]	; 0x38
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d62:	23c0      	movs	r3, #192	; 0xc0
 8000d64:	68d1      	ldr	r1, [r2, #12]
 8000d66:	011b      	lsls	r3, r3, #4
 8000d68:	4219      	tst	r1, r3
 8000d6a:	d113      	bne.n	8000d94 <HAL_ADC_PollForConversion+0x64>
 8000d6c:	7eab      	ldrb	r3, [r5, #26]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d110      	bne.n	8000d94 <HAL_ADC_PollForConversion+0x64>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000d72:	6813      	ldr	r3, [r2, #0]
 8000d74:	071b      	lsls	r3, r3, #28
 8000d76:	d50d      	bpl.n	8000d94 <HAL_ADC_PollForConversion+0x64>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d78:	6893      	ldr	r3, [r2, #8]
 8000d7a:	075b      	lsls	r3, r3, #29
 8000d7c:	d439      	bmi.n	8000df2 <HAL_ADC_PollForConversion+0xc2>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000d7e:	210c      	movs	r1, #12
 8000d80:	6853      	ldr	r3, [r2, #4]
 8000d82:	438b      	bics	r3, r1
 8000d84:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8000d86:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000d88:	491e      	ldr	r1, [pc, #120]	; (8000e04 <HAL_ADC_PollForConversion+0xd4>)
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	3104      	adds	r1, #4
 8000d8e:	31ff      	adds	r1, #255	; 0xff
 8000d90:	430b      	orrs	r3, r1
 8000d92:	63ab      	str	r3, [r5, #56]	; 0x38
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000d94:	7e28      	ldrb	r0, [r5, #24]
 8000d96:	2800      	cmp	r0, #0
 8000d98:	d013      	beq.n	8000dc2 <HAL_ADC_PollForConversion+0x92>
  return HAL_OK;
 8000d9a:	2000      	movs	r0, #0
}
 8000d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000d9e:	6813      	ldr	r3, [r2, #0]
 8000da0:	421c      	tst	r4, r3
 8000da2:	d1d9      	bne.n	8000d58 <HAL_ADC_PollForConversion+0x28>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d10f      	bne.n	8000dc8 <HAL_ADC_PollForConversion+0x98>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000da8:	0021      	movs	r1, r4
 8000daa:	6813      	ldr	r3, [r2, #0]
 8000dac:	4019      	ands	r1, r3
 8000dae:	421c      	tst	r4, r3
 8000db0:	d1cd      	bne.n	8000d4e <HAL_ADC_PollForConversion+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000db2:	2204      	movs	r2, #4
 8000db4:	6bab      	ldr	r3, [r5, #56]	; 0x38
          return HAL_TIMEOUT;
 8000db6:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000db8:	4313      	orrs	r3, r2
 8000dba:	63ab      	str	r3, [r5, #56]	; 0x38
          __HAL_UNLOCK(hadc);
 8000dbc:	2334      	movs	r3, #52	; 0x34
 8000dbe:	54e9      	strb	r1, [r5, r3]
          return HAL_TIMEOUT;
 8000dc0:	e7ec      	b.n	8000d9c <HAL_ADC_PollForConversion+0x6c>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e7e9      	b.n	8000d9c <HAL_ADC_PollForConversion+0x6c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000dc8:	f7ff fe6c 	bl	8000aa4 <HAL_GetTick>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000dcc:	682a      	ldr	r2, [r5, #0]
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000dce:	1bc0      	subs	r0, r0, r7
 8000dd0:	42b0      	cmp	r0, r6
 8000dd2:	d9bc      	bls.n	8000d4e <HAL_ADC_PollForConversion+0x1e>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000dd4:	0021      	movs	r1, r4
 8000dd6:	6813      	ldr	r3, [r2, #0]
 8000dd8:	4019      	ands	r1, r3
 8000dda:	421c      	tst	r4, r3
 8000ddc:	d1b7      	bne.n	8000d4e <HAL_ADC_PollForConversion+0x1e>
 8000dde:	e7e8      	b.n	8000db2 <HAL_ADC_PollForConversion+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000de0:	2220      	movs	r2, #32
 8000de2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000de4:	4313      	orrs	r3, r2
 8000de6:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2334      	movs	r3, #52	; 0x34
 8000dec:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8000dee:	2001      	movs	r0, #1
 8000df0:	e7d4      	b.n	8000d9c <HAL_ADC_PollForConversion+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000df2:	2120      	movs	r1, #32
 8000df4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000df6:	430b      	orrs	r3, r1
 8000df8:	63ab      	str	r3, [r5, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000dfc:	391f      	subs	r1, #31
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	63eb      	str	r3, [r5, #60]	; 0x3c
 8000e02:	e7c7      	b.n	8000d94 <HAL_ADC_PollForConversion+0x64>
 8000e04:	fffffefe 	.word	0xfffffefe

08000e08 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000e08:	6803      	ldr	r3, [r0, #0]
 8000e0a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000e0c:	4770      	bx	lr
 8000e0e:	46c0      	nop			; (mov r8, r8)

08000e10 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000e10:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8000e12:	2234      	movs	r2, #52	; 0x34
{
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8000e18:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000e1a:	5c83      	ldrb	r3, [r0, r2]
{
 8000e1c:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e1e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d053      	beq.n	8000ecc <HAL_ADC_ConfigChannel+0xbc>
 8000e24:	2301      	movs	r3, #1
 8000e26:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e28:	6800      	ldr	r0, [r0, #0]
 8000e2a:	6882      	ldr	r2, [r0, #8]
 8000e2c:	0752      	lsls	r2, r2, #29
 8000e2e:	d509      	bpl.n	8000e44 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e30:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 8000e32:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e36:	4313      	orrs	r3, r2
 8000e38:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_UNLOCK(hadc);
 8000e3a:	2334      	movs	r3, #52	; 0x34
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	54e2      	strb	r2, [r4, r3]
}
 8000e40:	b003      	add	sp, #12
 8000e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8000e44:	4a2e      	ldr	r2, [pc, #184]	; (8000f00 <HAL_ADC_ConfigChannel+0xf0>)
 8000e46:	684e      	ldr	r6, [r1, #4]
 8000e48:	4296      	cmp	r6, r2
 8000e4a:	d029      	beq.n	8000ea0 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e4c:	680e      	ldr	r6, [r1, #0]
 8000e4e:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8000e50:	40b3      	lsls	r3, r6
 8000e52:	001a      	movs	r2, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e54:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e56:	433a      	orrs	r2, r7
 8000e58:	6282      	str	r2, [r0, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e5a:	055b      	lsls	r3, r3, #21
 8000e5c:	429d      	cmp	r5, r3
 8000e5e:	d00f      	beq.n	8000e80 <HAL_ADC_ConfigChannel+0x70>
 8000e60:	3d01      	subs	r5, #1
 8000e62:	2d06      	cmp	r5, #6
 8000e64:	d90c      	bls.n	8000e80 <HAL_ADC_ConfigChannel+0x70>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000e66:	2307      	movs	r3, #7
 8000e68:	6942      	ldr	r2, [r0, #20]
 8000e6a:	6889      	ldr	r1, [r1, #8]
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	4291      	cmp	r1, r2
 8000e70:	d006      	beq.n	8000e80 <HAL_ADC_ConfigChannel+0x70>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e72:	6942      	ldr	r2, [r0, #20]
 8000e74:	439a      	bics	r2, r3
 8000e76:	6142      	str	r2, [r0, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000e78:	6942      	ldr	r2, [r0, #20]
 8000e7a:	400b      	ands	r3, r1
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e80:	0033      	movs	r3, r6
 8000e82:	3b10      	subs	r3, #16
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d901      	bls.n	8000e8c <HAL_ADC_ConfigChannel+0x7c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e88:	2000      	movs	r0, #0
 8000e8a:	e7d6      	b.n	8000e3a <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <HAL_ADC_ConfigChannel+0xf4>)
 8000e8e:	6819      	ldr	r1, [r3, #0]
 8000e90:	2e10      	cmp	r6, #16
 8000e92:	d01d      	beq.n	8000ed0 <HAL_ADC_ConfigChannel+0xc0>
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	03d2      	lsls	r2, r2, #15
 8000e98:	430a      	orrs	r2, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e9a:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e9c:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e9e:	e7cc      	b.n	8000e3a <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000ea0:	680a      	ldr	r2, [r1, #0]
 8000ea2:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8000ea4:	4093      	lsls	r3, r2
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ea6:	3a10      	subs	r2, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000ea8:	439d      	bics	r5, r3
 8000eaa:	6285      	str	r5, [r0, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000eac:	2a01      	cmp	r2, #1
 8000eae:	d8eb      	bhi.n	8000e88 <HAL_ADC_ConfigChannel+0x78>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000eb0:	4253      	negs	r3, r2
 8000eb2:	415a      	adcs	r2, r3
 8000eb4:	4253      	negs	r3, r2
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_ADC_ConfigChannel+0xf8>)
 8000eb8:	4912      	ldr	r1, [pc, #72]	; (8000f04 <HAL_ADC_ConfigChannel+0xf4>)
 8000eba:	4694      	mov	ip, r2
 8000ebc:	0d9b      	lsrs	r3, r3, #22
 8000ebe:	6808      	ldr	r0, [r1, #0]
 8000ec0:	059b      	lsls	r3, r3, #22
 8000ec2:	4463      	add	r3, ip
 8000ec4:	4003      	ands	r3, r0
 8000ec6:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec8:	2000      	movs	r0, #0
 8000eca:	e7b6      	b.n	8000e3a <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8000ecc:	2002      	movs	r0, #2
 8000ece:	e7b7      	b.n	8000e40 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	0412      	lsls	r2, r2, #16
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_ADC_ConfigChannel+0xfc>)
 8000eda:	490d      	ldr	r1, [pc, #52]	; (8000f10 <HAL_ADC_ConfigChannel+0x100>)
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	f7ff f913 	bl	8000108 <__udivsi3>
 8000ee2:	0083      	lsls	r3, r0, #2
 8000ee4:	181b      	adds	r3, r3, r0
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000eea:	9b01      	ldr	r3, [sp, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0cb      	beq.n	8000e88 <HAL_ADC_ConfigChannel+0x78>
            wait_loop_index--;
 8000ef0:	9b01      	ldr	r3, [sp, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000ef6:	9b01      	ldr	r3, [sp, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f9      	bne.n	8000ef0 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efc:	2000      	movs	r0, #0
 8000efe:	e79c      	b.n	8000e3a <HAL_ADC_ConfigChannel+0x2a>
 8000f00:	00001001 	.word	0x00001001
 8000f04:	40012708 	.word	0x40012708
 8000f08:	ffbfffff 	.word	0xffbfffff
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	000f4240 	.word	0x000f4240

08000f14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f14:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000f16:	2800      	cmp	r0, #0
 8000f18:	db14      	blt.n	8000f44 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_NVIC_SetPriority+0x5c>)
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	469c      	mov	ip, r3
 8000f20:	23ff      	movs	r3, #255	; 0xff
 8000f22:	0884      	lsrs	r4, r0, #2
 8000f24:	4002      	ands	r2, r0
 8000f26:	0018      	movs	r0, r3
 8000f28:	26c0      	movs	r6, #192	; 0xc0
 8000f2a:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f2c:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2e:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f30:	400b      	ands	r3, r1
 8000f32:	4093      	lsls	r3, r2
 8000f34:	00a4      	lsls	r4, r4, #2
 8000f36:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f38:	00b6      	lsls	r6, r6, #2
 8000f3a:	59a5      	ldr	r5, [r4, r6]
 8000f3c:	4385      	bics	r5, r0
 8000f3e:	432b      	orrs	r3, r5
 8000f40:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000f42:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_NVIC_SetPriority+0x60>)
 8000f46:	230f      	movs	r3, #15
 8000f48:	4694      	mov	ip, r2
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	4003      	ands	r3, r0
 8000f4e:	4010      	ands	r0, r2
 8000f50:	32fc      	adds	r2, #252	; 0xfc
 8000f52:	0015      	movs	r5, r2
 8000f54:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f56:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f58:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5e:	3b08      	subs	r3, #8
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4463      	add	r3, ip
 8000f66:	69dc      	ldr	r4, [r3, #28]
 8000f68:	43ac      	bics	r4, r5
 8000f6a:	4322      	orrs	r2, r4
 8000f6c:	61da      	str	r2, [r3, #28]
 8000f6e:	e7e8      	b.n	8000f42 <HAL_NVIC_SetPriority+0x2e>
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	1e43      	subs	r3, r0, #1
 8000f7c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d20e      	bcs.n	8000fa2 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f84:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8c:	6a03      	ldr	r3, [r0, #32]
 8000f8e:	0609      	lsls	r1, r1, #24
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	0a1b      	lsrs	r3, r3, #8
 8000f94:	430b      	orrs	r3, r1
 8000f96:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	3307      	adds	r3, #7
 8000fa0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e010 	.word	0xe000e010
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fae:	46de      	mov	lr, fp
 8000fb0:	4657      	mov	r7, sl
 8000fb2:	464e      	mov	r6, r9
 8000fb4:	4645      	mov	r5, r8
 8000fb6:	b5e0      	push	{r5, r6, r7, lr}
 8000fb8:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	6809      	ldr	r1, [r1, #0]
 8000fbc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000fbe:	2300      	movs	r3, #0
{
 8000fc0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	2900      	cmp	r1, #0
 8000fc4:	d07c      	beq.n	80010c0 <HAL_GPIO_Init+0x114>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	4c79      	ldr	r4, [pc, #484]	; (80011ac <HAL_GPIO_Init+0x200>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc8:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	46a3      	mov	fp, r4
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fcc:	2601      	movs	r6, #1
 8000fce:	000c      	movs	r4, r1
 8000fd0:	409e      	lsls	r6, r3
 8000fd2:	4034      	ands	r4, r6
 8000fd4:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8000fd6:	4231      	tst	r1, r6
 8000fd8:	d06c      	beq.n	80010b4 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fda:	4654      	mov	r4, sl
 8000fdc:	2503      	movs	r5, #3
 8000fde:	6864      	ldr	r4, [r4, #4]
 8000fe0:	4025      	ands	r5, r4
 8000fe2:	46ac      	mov	ip, r5
 8000fe4:	3d01      	subs	r5, #1
 8000fe6:	2d01      	cmp	r5, #1
 8000fe8:	d800      	bhi.n	8000fec <HAL_GPIO_Init+0x40>
 8000fea:	e070      	b.n	80010ce <HAL_GPIO_Init+0x122>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fec:	4665      	mov	r5, ip
 8000fee:	2d03      	cmp	r5, #3
 8000ff0:	d000      	beq.n	8000ff4 <HAL_GPIO_Init+0x48>
 8000ff2:	e0b3      	b.n	800115c <HAL_GPIO_Init+0x1b0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ff4:	4666      	mov	r6, ip
 8000ff6:	4096      	lsls	r6, r2
 8000ff8:	43f5      	mvns	r5, r6
 8000ffa:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8000ffc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ffe:	9d02      	ldr	r5, [sp, #8]
 8001000:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001002:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001004:	25c0      	movs	r5, #192	; 0xc0
 8001006:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 8001008:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100a:	422c      	tst	r4, r5
 800100c:	d052      	beq.n	80010b4 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	465d      	mov	r5, fp
 8001010:	2601      	movs	r6, #1
 8001012:	465f      	mov	r7, fp
 8001014:	69ad      	ldr	r5, [r5, #24]
 8001016:	4335      	orrs	r5, r6
 8001018:	61bd      	str	r5, [r7, #24]
 800101a:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800101c:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	4035      	ands	r5, r6
 8001020:	4e63      	ldr	r6, [pc, #396]	; (80011b0 <HAL_GPIO_Init+0x204>)
 8001022:	9505      	str	r5, [sp, #20]
 8001024:	46b4      	mov	ip, r6
 8001026:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001028:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 800102a:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102c:	00bf      	lsls	r7, r7, #2
 800102e:	00ad      	lsls	r5, r5, #2
 8001030:	4465      	add	r5, ip
 8001032:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8001034:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001036:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8001038:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800103a:	4666      	mov	r6, ip
 800103c:	40b7      	lsls	r7, r6
 800103e:	003e      	movs	r6, r7
 8001040:	464f      	mov	r7, r9
 8001042:	43b7      	bics	r7, r6
 8001044:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001046:	2790      	movs	r7, #144	; 0x90
 8001048:	05ff      	lsls	r7, r7, #23
 800104a:	42b8      	cmp	r0, r7
 800104c:	d012      	beq.n	8001074 <HAL_GPIO_Init+0xc8>
 800104e:	4f59      	ldr	r7, [pc, #356]	; (80011b4 <HAL_GPIO_Init+0x208>)
 8001050:	42b8      	cmp	r0, r7
 8001052:	d100      	bne.n	8001056 <HAL_GPIO_Init+0xaa>
 8001054:	e09b      	b.n	800118e <HAL_GPIO_Init+0x1e2>
 8001056:	4f58      	ldr	r7, [pc, #352]	; (80011b8 <HAL_GPIO_Init+0x20c>)
 8001058:	42b8      	cmp	r0, r7
 800105a:	d100      	bne.n	800105e <HAL_GPIO_Init+0xb2>
 800105c:	e09f      	b.n	800119e <HAL_GPIO_Init+0x1f2>
 800105e:	4f57      	ldr	r7, [pc, #348]	; (80011bc <HAL_GPIO_Init+0x210>)
 8001060:	42b8      	cmp	r0, r7
 8001062:	d100      	bne.n	8001066 <HAL_GPIO_Init+0xba>
 8001064:	e08c      	b.n	8001180 <HAL_GPIO_Init+0x1d4>
 8001066:	4666      	mov	r6, ip
 8001068:	2705      	movs	r7, #5
 800106a:	40b7      	lsls	r7, r6
 800106c:	003e      	movs	r6, r7
 800106e:	464f      	mov	r7, r9
 8001070:	4337      	orrs	r7, r6
 8001072:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001074:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001076:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001078:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 800107a:	4d51      	ldr	r5, [pc, #324]	; (80011c0 <HAL_GPIO_Init+0x214>)
        temp &= ~(iocurrent);
 800107c:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800107e:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8001080:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 8001082:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001084:	423c      	tst	r4, r7
 8001086:	d000      	beq.n	800108a <HAL_GPIO_Init+0xde>
 8001088:	e077      	b.n	800117a <HAL_GPIO_Init+0x1ce>
        temp &= ~(iocurrent);
 800108a:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800108c:	4f4c      	ldr	r7, [pc, #304]	; (80011c0 <HAL_GPIO_Init+0x214>)
 800108e:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8001090:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001092:	02a7      	lsls	r7, r4, #10
 8001094:	d46e      	bmi.n	8001174 <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 8001096:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001098:	4f49      	ldr	r7, [pc, #292]	; (80011c0 <HAL_GPIO_Init+0x214>)
 800109a:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800109c:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800109e:	03a7      	lsls	r7, r4, #14
 80010a0:	d465      	bmi.n	800116e <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 80010a2:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80010a4:	4f46      	ldr	r7, [pc, #280]	; (80011c0 <HAL_GPIO_Init+0x214>)
 80010a6:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 80010a8:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010aa:	03e4      	lsls	r4, r4, #15
 80010ac:	d45b      	bmi.n	8001166 <HAL_GPIO_Init+0x1ba>
        temp &= ~(iocurrent);
 80010ae:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80010b0:	4c43      	ldr	r4, [pc, #268]	; (80011c0 <HAL_GPIO_Init+0x214>)
 80010b2:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b4:	000c      	movs	r4, r1
      }
    }

    position++;
 80010b6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b8:	40dc      	lsrs	r4, r3
 80010ba:	3202      	adds	r2, #2
 80010bc:	2c00      	cmp	r4, #0
 80010be:	d185      	bne.n	8000fcc <HAL_GPIO_Init+0x20>
  } 
}
 80010c0:	b007      	add	sp, #28
 80010c2:	bcf0      	pop	{r4, r5, r6, r7}
 80010c4:	46bb      	mov	fp, r7
 80010c6:	46b2      	mov	sl, r6
 80010c8:	46a9      	mov	r9, r5
 80010ca:	46a0      	mov	r8, r4
 80010cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80010ce:	6885      	ldr	r5, [r0, #8]
 80010d0:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010d2:	2503      	movs	r5, #3
 80010d4:	4095      	lsls	r5, r2
 80010d6:	46a8      	mov	r8, r5
 80010d8:	43ed      	mvns	r5, r5
 80010da:	464f      	mov	r7, r9
 80010dc:	9502      	str	r5, [sp, #8]
 80010de:	4645      	mov	r5, r8
 80010e0:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e2:	4655      	mov	r5, sl
 80010e4:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010e6:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e8:	002f      	movs	r7, r5
 80010ea:	4097      	lsls	r7, r2
 80010ec:	46b8      	mov	r8, r7
 80010ee:	464f      	mov	r7, r9
 80010f0:	4645      	mov	r5, r8
 80010f2:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80010f4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010f6:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f8:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fa:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fc:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fe:	0926      	lsrs	r6, r4, #4
 8001100:	402e      	ands	r6, r5
 8001102:	409e      	lsls	r6, r3
 8001104:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8001106:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001108:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800110a:	9d02      	ldr	r5, [sp, #8]
 800110c:	402e      	ands	r6, r5
 800110e:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001110:	4656      	mov	r6, sl
 8001112:	68b6      	ldr	r6, [r6, #8]
 8001114:	4647      	mov	r7, r8
 8001116:	4096      	lsls	r6, r2
 8001118:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 800111a:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111c:	4667      	mov	r7, ip
 800111e:	4666      	mov	r6, ip
 8001120:	4096      	lsls	r6, r2
 8001122:	2f02      	cmp	r7, #2
 8001124:	d000      	beq.n	8001128 <HAL_GPIO_Init+0x17c>
 8001126:	e769      	b.n	8000ffc <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 8001128:	08dd      	lsrs	r5, r3, #3
 800112a:	00ad      	lsls	r5, r5, #2
 800112c:	46ac      	mov	ip, r5
 800112e:	4484      	add	ip, r0
 8001130:	4665      	mov	r5, ip
 8001132:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001134:	2507      	movs	r5, #7
 8001136:	401d      	ands	r5, r3
 8001138:	00ad      	lsls	r5, r5, #2
 800113a:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 800113c:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800113e:	250f      	movs	r5, #15
 8001140:	4647      	mov	r7, r8
 8001142:	40bd      	lsls	r5, r7
 8001144:	9f03      	ldr	r7, [sp, #12]
 8001146:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001148:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800114a:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800114c:	4647      	mov	r7, r8
 800114e:	692d      	ldr	r5, [r5, #16]
 8001150:	40bd      	lsls	r5, r7
 8001152:	9f03      	ldr	r7, [sp, #12]
 8001154:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8001156:	4665      	mov	r5, ip
 8001158:	622f      	str	r7, [r5, #32]
 800115a:	e74f      	b.n	8000ffc <HAL_GPIO_Init+0x50>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800115c:	2503      	movs	r5, #3
 800115e:	4095      	lsls	r5, r2
 8001160:	43ed      	mvns	r5, r5
 8001162:	9502      	str	r5, [sp, #8]
 8001164:	e7d0      	b.n	8001108 <HAL_GPIO_Init+0x15c>
          temp |= iocurrent;
 8001166:	9c01      	ldr	r4, [sp, #4]
 8001168:	432c      	orrs	r4, r5
 800116a:	0025      	movs	r5, r4
 800116c:	e7a0      	b.n	80010b0 <HAL_GPIO_Init+0x104>
          temp |= iocurrent;
 800116e:	9f01      	ldr	r7, [sp, #4]
 8001170:	433d      	orrs	r5, r7
 8001172:	e797      	b.n	80010a4 <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 8001174:	9f01      	ldr	r7, [sp, #4]
 8001176:	433d      	orrs	r5, r7
 8001178:	e78e      	b.n	8001098 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 800117a:	9f01      	ldr	r7, [sp, #4]
 800117c:	433d      	orrs	r5, r7
 800117e:	e785      	b.n	800108c <HAL_GPIO_Init+0xe0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001180:	4667      	mov	r7, ip
 8001182:	2603      	movs	r6, #3
 8001184:	40be      	lsls	r6, r7
 8001186:	464f      	mov	r7, r9
 8001188:	4337      	orrs	r7, r6
 800118a:	46b9      	mov	r9, r7
 800118c:	e772      	b.n	8001074 <HAL_GPIO_Init+0xc8>
 800118e:	4666      	mov	r6, ip
 8001190:	2701      	movs	r7, #1
 8001192:	40b7      	lsls	r7, r6
 8001194:	003e      	movs	r6, r7
 8001196:	464f      	mov	r7, r9
 8001198:	4337      	orrs	r7, r6
 800119a:	46b9      	mov	r9, r7
 800119c:	e76a      	b.n	8001074 <HAL_GPIO_Init+0xc8>
 800119e:	4667      	mov	r7, ip
 80011a0:	2602      	movs	r6, #2
 80011a2:	40be      	lsls	r6, r7
 80011a4:	464f      	mov	r7, r9
 80011a6:	4337      	orrs	r7, r6
 80011a8:	46b9      	mov	r9, r7
 80011aa:	e763      	b.n	8001074 <HAL_GPIO_Init+0xc8>
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000
 80011b4:	48000400 	.word	0x48000400
 80011b8:	48000800 	.word	0x48000800
 80011bc:	48000c00 	.word	0x48000c00
 80011c0:	40010400 	.word	0x40010400

080011c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c4:	2a00      	cmp	r2, #0
 80011c6:	d001      	beq.n	80011cc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011ca:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011cc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80011ce:	e7fc      	b.n	80011ca <HAL_GPIO_WritePin+0x6>

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	46ce      	mov	lr, r9
 80011d4:	4647      	mov	r7, r8
 80011d6:	b580      	push	{r7, lr}
 80011d8:	0004      	movs	r4, r0
 80011da:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011dc:	2800      	cmp	r0, #0
 80011de:	d100      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
 80011e0:	e0ee      	b.n	80013c0 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	6803      	ldr	r3, [r0, #0]
 80011e4:	07da      	lsls	r2, r3, #31
 80011e6:	d535      	bpl.n	8001254 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011e8:	210c      	movs	r1, #12
 80011ea:	48c3      	ldr	r0, [pc, #780]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 80011ec:	6842      	ldr	r2, [r0, #4]
 80011ee:	400a      	ands	r2, r1
 80011f0:	2a04      	cmp	r2, #4
 80011f2:	d100      	bne.n	80011f6 <HAL_RCC_OscConfig+0x26>
 80011f4:	e101      	b.n	80013fa <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011f6:	6842      	ldr	r2, [r0, #4]
 80011f8:	4011      	ands	r1, r2
 80011fa:	2908      	cmp	r1, #8
 80011fc:	d100      	bne.n	8001200 <HAL_RCC_OscConfig+0x30>
 80011fe:	e0f8      	b.n	80013f2 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001200:	6863      	ldr	r3, [r4, #4]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d00f      	beq.n	8001226 <HAL_RCC_OscConfig+0x56>
 8001206:	2b00      	cmp	r3, #0
 8001208:	d100      	bne.n	800120c <HAL_RCC_OscConfig+0x3c>
 800120a:	e11e      	b.n	800144a <HAL_RCC_OscConfig+0x27a>
 800120c:	2b05      	cmp	r3, #5
 800120e:	d100      	bne.n	8001212 <HAL_RCC_OscConfig+0x42>
 8001210:	e1a7      	b.n	8001562 <HAL_RCC_OscConfig+0x392>
 8001212:	4bb9      	ldr	r3, [pc, #740]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 8001214:	49b9      	ldr	r1, [pc, #740]	; (80014fc <HAL_RCC_OscConfig+0x32c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	49b8      	ldr	r1, [pc, #736]	; (8001500 <HAL_RCC_OscConfig+0x330>)
 8001220:	400a      	ands	r2, r1
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	e005      	b.n	8001232 <HAL_RCC_OscConfig+0x62>
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	4ab3      	ldr	r2, [pc, #716]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 800122a:	025b      	lsls	r3, r3, #9
 800122c:	6811      	ldr	r1, [r2, #0]
 800122e:	430b      	orrs	r3, r1
 8001230:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001232:	f7ff fc37 	bl	8000aa4 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001238:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	4faf      	ldr	r7, [pc, #700]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 800123c:	02b6      	lsls	r6, r6, #10
 800123e:	e005      	b.n	800124c <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fc30 	bl	8000aa4 <HAL_GetTick>
 8001244:	1b40      	subs	r0, r0, r5
 8001246:	2864      	cmp	r0, #100	; 0x64
 8001248:	d900      	bls.n	800124c <HAL_RCC_OscConfig+0x7c>
 800124a:	e0fc      	b.n	8001446 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	4233      	tst	r3, r6
 8001250:	d0f6      	beq.n	8001240 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	079a      	lsls	r2, r3, #30
 8001256:	d529      	bpl.n	80012ac <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001258:	220c      	movs	r2, #12
 800125a:	49a7      	ldr	r1, [pc, #668]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 800125c:	6848      	ldr	r0, [r1, #4]
 800125e:	4202      	tst	r2, r0
 8001260:	d100      	bne.n	8001264 <HAL_RCC_OscConfig+0x94>
 8001262:	e0a6      	b.n	80013b2 <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001264:	6848      	ldr	r0, [r1, #4]
 8001266:	4002      	ands	r2, r0
 8001268:	2a08      	cmp	r2, #8
 800126a:	d100      	bne.n	800126e <HAL_RCC_OscConfig+0x9e>
 800126c:	e09d      	b.n	80013aa <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126e:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	4da1      	ldr	r5, [pc, #644]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001272:	2b00      	cmp	r3, #0
 8001274:	d100      	bne.n	8001278 <HAL_RCC_OscConfig+0xa8>
 8001276:	e11f      	b.n	80014b8 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8001278:	2201      	movs	r2, #1
 800127a:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 800127e:	4313      	orrs	r3, r2
 8001280:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001282:	f7ff fc0f 	bl	8000aa4 <HAL_GetTick>
 8001286:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001288:	e005      	b.n	8001296 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff fc0b 	bl	8000aa4 <HAL_GetTick>
 800128e:	1b80      	subs	r0, r0, r6
 8001290:	2802      	cmp	r0, #2
 8001292:	d900      	bls.n	8001296 <HAL_RCC_OscConfig+0xc6>
 8001294:	e0d7      	b.n	8001446 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	682b      	ldr	r3, [r5, #0]
 8001298:	421f      	tst	r7, r3
 800129a:	d0f6      	beq.n	800128a <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	21f8      	movs	r1, #248	; 0xf8
 800129e:	682a      	ldr	r2, [r5, #0]
 80012a0:	6923      	ldr	r3, [r4, #16]
 80012a2:	438a      	bics	r2, r1
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	071a      	lsls	r2, r3, #28
 80012ae:	d42d      	bmi.n	800130c <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b0:	075a      	lsls	r2, r3, #29
 80012b2:	d544      	bpl.n	800133e <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80012b6:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b8:	4b8f      	ldr	r3, [pc, #572]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 80012ba:	0552      	lsls	r2, r2, #21
 80012bc:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80012be:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c0:	4211      	tst	r1, r2
 80012c2:	d108      	bne.n	80012d6 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	69d9      	ldr	r1, [r3, #28]
 80012c6:	4311      	orrs	r1, r2
 80012c8:	61d9      	str	r1, [r3, #28]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	4013      	ands	r3, r2
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012d2:	2301      	movs	r3, #1
 80012d4:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d6:	2780      	movs	r7, #128	; 0x80
 80012d8:	4e8a      	ldr	r6, [pc, #552]	; (8001504 <HAL_RCC_OscConfig+0x334>)
 80012da:	007f      	lsls	r7, r7, #1
 80012dc:	6833      	ldr	r3, [r6, #0]
 80012de:	423b      	tst	r3, r7
 80012e0:	d100      	bne.n	80012e4 <HAL_RCC_OscConfig+0x114>
 80012e2:	e094      	b.n	800140e <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e4:	68a3      	ldr	r3, [r4, #8]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d100      	bne.n	80012ec <HAL_RCC_OscConfig+0x11c>
 80012ea:	e0f8      	b.n	80014de <HAL_RCC_OscConfig+0x30e>
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d100      	bne.n	80012f2 <HAL_RCC_OscConfig+0x122>
 80012f0:	e0c4      	b.n	800147c <HAL_RCC_OscConfig+0x2ac>
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d100      	bne.n	80012f8 <HAL_RCC_OscConfig+0x128>
 80012f6:	e140      	b.n	800157a <HAL_RCC_OscConfig+0x3aa>
 80012f8:	2101      	movs	r1, #1
 80012fa:	4b7f      	ldr	r3, [pc, #508]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 80012fc:	6a1a      	ldr	r2, [r3, #32]
 80012fe:	438a      	bics	r2, r1
 8001300:	621a      	str	r2, [r3, #32]
 8001302:	6a1a      	ldr	r2, [r3, #32]
 8001304:	3103      	adds	r1, #3
 8001306:	438a      	bics	r2, r1
 8001308:	621a      	str	r2, [r3, #32]
 800130a:	e0ec      	b.n	80014e6 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130c:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 800130e:	4d7a      	ldr	r5, [pc, #488]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001310:	2b00      	cmp	r3, #0
 8001312:	d05b      	beq.n	80013cc <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8001314:	2201      	movs	r2, #1
 8001316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001318:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 800131a:	4313      	orrs	r3, r2
 800131c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800131e:	f7ff fbc1 	bl	8000aa4 <HAL_GetTick>
 8001322:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001324:	e005      	b.n	8001332 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001326:	f7ff fbbd 	bl	8000aa4 <HAL_GetTick>
 800132a:	1b80      	subs	r0, r0, r6
 800132c:	2802      	cmp	r0, #2
 800132e:	d900      	bls.n	8001332 <HAL_RCC_OscConfig+0x162>
 8001330:	e089      	b.n	8001446 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001334:	421f      	tst	r7, r3
 8001336:	d0f6      	beq.n	8001326 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	075a      	lsls	r2, r3, #29
 800133c:	d4ba      	bmi.n	80012b4 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800133e:	06db      	lsls	r3, r3, #27
 8001340:	d512      	bpl.n	8001368 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001342:	6963      	ldr	r3, [r4, #20]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d100      	bne.n	800134a <HAL_RCC_OscConfig+0x17a>
 8001348:	e13d      	b.n	80015c6 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800134a:	3305      	adds	r3, #5
 800134c:	d000      	beq.n	8001350 <HAL_RCC_OscConfig+0x180>
 800134e:	e0e9      	b.n	8001524 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001350:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001352:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8001354:	4a68      	ldr	r2, [pc, #416]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 8001356:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001358:	438b      	bics	r3, r1
 800135a:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800135c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800135e:	69a3      	ldr	r3, [r4, #24]
 8001360:	4381      	bics	r1, r0
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	430b      	orrs	r3, r1
 8001366:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001368:	6a23      	ldr	r3, [r4, #32]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d01b      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800136e:	220c      	movs	r2, #12
 8001370:	4d61      	ldr	r5, [pc, #388]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 8001372:	6869      	ldr	r1, [r5, #4]
 8001374:	400a      	ands	r2, r1
 8001376:	2a08      	cmp	r2, #8
 8001378:	d100      	bne.n	800137c <HAL_RCC_OscConfig+0x1ac>
 800137a:	e108      	b.n	800158e <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137c:	2b02      	cmp	r3, #2
 800137e:	d100      	bne.n	8001382 <HAL_RCC_OscConfig+0x1b2>
 8001380:	e13f      	b.n	8001602 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001382:	682b      	ldr	r3, [r5, #0]
 8001384:	4a60      	ldr	r2, [pc, #384]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001386:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001388:	4013      	ands	r3, r2
 800138a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800138c:	f7ff fb8a 	bl	8000aa4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001390:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8001392:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001394:	e004      	b.n	80013a0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001396:	f7ff fb85 	bl	8000aa4 <HAL_GetTick>
 800139a:	1b00      	subs	r0, r0, r4
 800139c:	2802      	cmp	r0, #2
 800139e:	d852      	bhi.n	8001446 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	4233      	tst	r3, r6
 80013a4:	d1f7      	bne.n	8001396 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 80013a6:	2000      	movs	r0, #0
 80013a8:	e00b      	b.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013aa:	684a      	ldr	r2, [r1, #4]
 80013ac:	03d2      	lsls	r2, r2, #15
 80013ae:	d500      	bpl.n	80013b2 <HAL_RCC_OscConfig+0x1e2>
 80013b0:	e75d      	b.n	800126e <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	4a51      	ldr	r2, [pc, #324]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	0792      	lsls	r2, r2, #30
 80013b8:	d539      	bpl.n	800142e <HAL_RCC_OscConfig+0x25e>
 80013ba:	68e2      	ldr	r2, [r4, #12]
 80013bc:	2a01      	cmp	r2, #1
 80013be:	d036      	beq.n	800142e <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 80013c0:	2001      	movs	r0, #1
}
 80013c2:	b003      	add	sp, #12
 80013c4:	bcc0      	pop	{r6, r7}
 80013c6:	46b9      	mov	r9, r7
 80013c8:	46b0      	mov	r8, r6
 80013ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80013cc:	2201      	movs	r2, #1
 80013ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80013d2:	4393      	bics	r3, r2
 80013d4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80013d6:	f7ff fb65 	bl	8000aa4 <HAL_GetTick>
 80013da:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	e004      	b.n	80013e8 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff fb61 	bl	8000aa4 <HAL_GetTick>
 80013e2:	1b80      	subs	r0, r0, r6
 80013e4:	2802      	cmp	r0, #2
 80013e6:	d82e      	bhi.n	8001446 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80013ea:	421f      	tst	r7, r3
 80013ec:	d1f7      	bne.n	80013de <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	e7a3      	b.n	800133a <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f2:	6842      	ldr	r2, [r0, #4]
 80013f4:	03d2      	lsls	r2, r2, #15
 80013f6:	d400      	bmi.n	80013fa <HAL_RCC_OscConfig+0x22a>
 80013f8:	e702      	b.n	8001200 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fa:	4a3f      	ldr	r2, [pc, #252]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	0392      	lsls	r2, r2, #14
 8001400:	d400      	bmi.n	8001404 <HAL_RCC_OscConfig+0x234>
 8001402:	e727      	b.n	8001254 <HAL_RCC_OscConfig+0x84>
 8001404:	6862      	ldr	r2, [r4, #4]
 8001406:	2a00      	cmp	r2, #0
 8001408:	d000      	beq.n	800140c <HAL_RCC_OscConfig+0x23c>
 800140a:	e723      	b.n	8001254 <HAL_RCC_OscConfig+0x84>
 800140c:	e7d8      	b.n	80013c0 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140e:	6833      	ldr	r3, [r6, #0]
 8001410:	433b      	orrs	r3, r7
 8001412:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001414:	f7ff fb46 	bl	8000aa4 <HAL_GetTick>
 8001418:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	e004      	b.n	8001426 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141c:	f7ff fb42 	bl	8000aa4 <HAL_GetTick>
 8001420:	1b40      	subs	r0, r0, r5
 8001422:	2864      	cmp	r0, #100	; 0x64
 8001424:	d80f      	bhi.n	8001446 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001426:	6833      	ldr	r3, [r6, #0]
 8001428:	423b      	tst	r3, r7
 800142a:	d0f7      	beq.n	800141c <HAL_RCC_OscConfig+0x24c>
 800142c:	e75a      	b.n	80012e4 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	25f8      	movs	r5, #248	; 0xf8
 8001430:	4831      	ldr	r0, [pc, #196]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 8001432:	6922      	ldr	r2, [r4, #16]
 8001434:	6801      	ldr	r1, [r0, #0]
 8001436:	00d2      	lsls	r2, r2, #3
 8001438:	43a9      	bics	r1, r5
 800143a:	430a      	orrs	r2, r1
 800143c:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143e:	071a      	lsls	r2, r3, #28
 8001440:	d400      	bmi.n	8001444 <HAL_RCC_OscConfig+0x274>
 8001442:	e735      	b.n	80012b0 <HAL_RCC_OscConfig+0xe0>
 8001444:	e762      	b.n	800130c <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8001446:	2003      	movs	r0, #3
 8001448:	e7bb      	b.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144a:	4d2b      	ldr	r5, [pc, #172]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 800144c:	4a2b      	ldr	r2, [pc, #172]	; (80014fc <HAL_RCC_OscConfig+0x32c>)
 800144e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001450:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001452:	4013      	ands	r3, r2
 8001454:	602b      	str	r3, [r5, #0]
 8001456:	682b      	ldr	r3, [r5, #0]
 8001458:	4a29      	ldr	r2, [pc, #164]	; (8001500 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145c:	4013      	ands	r3, r2
 800145e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001460:	f7ff fb20 	bl	8000aa4 <HAL_GetTick>
 8001464:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e004      	b.n	8001472 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fb1c 	bl	8000aa4 <HAL_GetTick>
 800146c:	1b80      	subs	r0, r0, r6
 800146e:	2864      	cmp	r0, #100	; 0x64
 8001470:	d8e9      	bhi.n	8001446 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	682b      	ldr	r3, [r5, #0]
 8001474:	423b      	tst	r3, r7
 8001476:	d1f7      	bne.n	8001468 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	e6eb      	b.n	8001254 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	2201      	movs	r2, #1
 800147e:	4e1e      	ldr	r6, [pc, #120]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	4d22      	ldr	r5, [pc, #136]	; (800150c <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001482:	6a33      	ldr	r3, [r6, #32]
 8001484:	4393      	bics	r3, r2
 8001486:	6233      	str	r3, [r6, #32]
 8001488:	6a33      	ldr	r3, [r6, #32]
 800148a:	3203      	adds	r2, #3
 800148c:	4393      	bics	r3, r2
 800148e:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001490:	f7ff fb08 	bl	8000aa4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001494:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8001496:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001498:	4698      	mov	r8, r3
 800149a:	e004      	b.n	80014a6 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149c:	f7ff fb02 	bl	8000aa4 <HAL_GetTick>
 80014a0:	1bc0      	subs	r0, r0, r7
 80014a2:	42a8      	cmp	r0, r5
 80014a4:	d8cf      	bhi.n	8001446 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a6:	4642      	mov	r2, r8
 80014a8:	6a33      	ldr	r3, [r6, #32]
 80014aa:	421a      	tst	r2, r3
 80014ac:	d1f6      	bne.n	800149c <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 80014ae:	464b      	mov	r3, r9
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d04f      	beq.n	8001554 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	e742      	b.n	800133e <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 80014b8:	2201      	movs	r2, #1
 80014ba:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014bc:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80014be:	4393      	bics	r3, r2
 80014c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014c2:	f7ff faef 	bl	8000aa4 <HAL_GetTick>
 80014c6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c8:	e004      	b.n	80014d4 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff faeb 	bl	8000aa4 <HAL_GetTick>
 80014ce:	1b80      	subs	r0, r0, r6
 80014d0:	2802      	cmp	r0, #2
 80014d2:	d8b8      	bhi.n	8001446 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d4:	682b      	ldr	r3, [r5, #0]
 80014d6:	421f      	tst	r7, r3
 80014d8:	d1f7      	bne.n	80014ca <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	e6e6      	b.n	80012ac <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014de:	4906      	ldr	r1, [pc, #24]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
 80014e0:	6a0a      	ldr	r2, [r1, #32]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80014e6:	f7ff fadd 	bl	8000aa4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80014ec:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ee:	4698      	mov	r8, r3
 80014f0:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	4d06      	ldr	r5, [pc, #24]	; (800150c <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	e011      	b.n	800151a <HAL_RCC_OscConfig+0x34a>
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40021000 	.word	0x40021000
 80014fc:	fffeffff 	.word	0xfffeffff
 8001500:	fffbffff 	.word	0xfffbffff
 8001504:	40007000 	.word	0x40007000
 8001508:	feffffff 	.word	0xfeffffff
 800150c:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001510:	f7ff fac8 	bl	8000aa4 <HAL_GetTick>
 8001514:	1b80      	subs	r0, r0, r6
 8001516:	42a8      	cmp	r0, r5
 8001518:	d895      	bhi.n	8001446 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151a:	4643      	mov	r3, r8
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	421f      	tst	r7, r3
 8001520:	d0f6      	beq.n	8001510 <HAL_RCC_OscConfig+0x340>
 8001522:	e7c4      	b.n	80014ae <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001524:	2204      	movs	r2, #4
 8001526:	4d53      	ldr	r5, [pc, #332]	; (8001674 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001528:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800152a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800152c:	4313      	orrs	r3, r2
 800152e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001530:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001532:	3a03      	subs	r2, #3
 8001534:	4393      	bics	r3, r2
 8001536:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001538:	f7ff fab4 	bl	8000aa4 <HAL_GetTick>
 800153c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800153e:	e005      	b.n	800154c <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001540:	f7ff fab0 	bl	8000aa4 <HAL_GetTick>
 8001544:	1b80      	subs	r0, r0, r6
 8001546:	2802      	cmp	r0, #2
 8001548:	d900      	bls.n	800154c <HAL_RCC_OscConfig+0x37c>
 800154a:	e77c      	b.n	8001446 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800154c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800154e:	421f      	tst	r7, r3
 8001550:	d1f6      	bne.n	8001540 <HAL_RCC_OscConfig+0x370>
 8001552:	e709      	b.n	8001368 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001554:	4a47      	ldr	r2, [pc, #284]	; (8001674 <HAL_RCC_OscConfig+0x4a4>)
 8001556:	4948      	ldr	r1, [pc, #288]	; (8001678 <HAL_RCC_OscConfig+0x4a8>)
 8001558:	69d3      	ldr	r3, [r2, #28]
 800155a:	400b      	ands	r3, r1
 800155c:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	e6ed      	b.n	800133e <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	4b43      	ldr	r3, [pc, #268]	; (8001674 <HAL_RCC_OscConfig+0x4a4>)
 8001566:	02d2      	lsls	r2, r2, #11
 8001568:	6819      	ldr	r1, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	0252      	lsls	r2, r2, #9
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e65b      	b.n	8001232 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157a:	2104      	movs	r1, #4
 800157c:	4b3d      	ldr	r3, [pc, #244]	; (8001674 <HAL_RCC_OscConfig+0x4a4>)
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	430a      	orrs	r2, r1
 8001582:	621a      	str	r2, [r3, #32]
 8001584:	6a1a      	ldr	r2, [r3, #32]
 8001586:	3903      	subs	r1, #3
 8001588:	430a      	orrs	r2, r1
 800158a:	621a      	str	r2, [r3, #32]
 800158c:	e7ab      	b.n	80014e6 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800158e:	2b01      	cmp	r3, #1
 8001590:	d100      	bne.n	8001594 <HAL_RCC_OscConfig+0x3c4>
 8001592:	e715      	b.n	80013c0 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001594:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8001596:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001598:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800159a:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 800159c:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 800159e:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a0:	4013      	ands	r3, r2
 80015a2:	428b      	cmp	r3, r1
 80015a4:	d000      	beq.n	80015a8 <HAL_RCC_OscConfig+0x3d8>
 80015a6:	e70c      	b.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015a8:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015ac:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	428b      	cmp	r3, r1
 80015b0:	d000      	beq.n	80015b4 <HAL_RCC_OscConfig+0x3e4>
 80015b2:	e706      	b.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015b4:	23f0      	movs	r3, #240	; 0xf0
 80015b6:	039b      	lsls	r3, r3, #14
 80015b8:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015bc:	1ad2      	subs	r2, r2, r3
 80015be:	1e53      	subs	r3, r2, #1
 80015c0:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 80015c2:	b2d0      	uxtb	r0, r2
 80015c4:	e6fd      	b.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 80015c6:	2104      	movs	r1, #4
 80015c8:	4d2a      	ldr	r5, [pc, #168]	; (8001674 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ca:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80015cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015ce:	430a      	orrs	r2, r1
 80015d0:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80015d2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015d4:	4313      	orrs	r3, r2
 80015d6:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80015d8:	f7ff fa64 	bl	8000aa4 <HAL_GetTick>
 80015dc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015de:	e005      	b.n	80015ec <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015e0:	f7ff fa60 	bl	8000aa4 <HAL_GetTick>
 80015e4:	1b80      	subs	r0, r0, r6
 80015e6:	2802      	cmp	r0, #2
 80015e8:	d900      	bls.n	80015ec <HAL_RCC_OscConfig+0x41c>
 80015ea:	e72c      	b.n	8001446 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80015ee:	421f      	tst	r7, r3
 80015f0:	d0f6      	beq.n	80015e0 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015f2:	21f8      	movs	r1, #248	; 0xf8
 80015f4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015f6:	69a3      	ldr	r3, [r4, #24]
 80015f8:	438a      	bics	r2, r1
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	636b      	str	r3, [r5, #52]	; 0x34
 8001600:	e6b2      	b.n	8001368 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8001602:	682b      	ldr	r3, [r5, #0]
 8001604:	4a1d      	ldr	r2, [pc, #116]	; (800167c <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001606:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001608:	4013      	ands	r3, r2
 800160a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800160c:	f7ff fa4a 	bl	8000aa4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001610:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8001612:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001614:	e005      	b.n	8001622 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff fa45 	bl	8000aa4 <HAL_GetTick>
 800161a:	1b80      	subs	r0, r0, r6
 800161c:	2802      	cmp	r0, #2
 800161e:	d900      	bls.n	8001622 <HAL_RCC_OscConfig+0x452>
 8001620:	e711      	b.n	8001446 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001622:	682b      	ldr	r3, [r5, #0]
 8001624:	423b      	tst	r3, r7
 8001626:	d1f6      	bne.n	8001616 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001628:	220f      	movs	r2, #15
 800162a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800162c:	4e11      	ldr	r6, [pc, #68]	; (8001674 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162e:	4393      	bics	r3, r2
 8001630:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001632:	4313      	orrs	r3, r2
 8001634:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001636:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001638:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800163a:	686a      	ldr	r2, [r5, #4]
 800163c:	430b      	orrs	r3, r1
 800163e:	4910      	ldr	r1, [pc, #64]	; (8001680 <HAL_RCC_OscConfig+0x4b0>)
 8001640:	400a      	ands	r2, r1
 8001642:	4313      	orrs	r3, r2
 8001644:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	682a      	ldr	r2, [r5, #0]
 800164a:	045b      	lsls	r3, r3, #17
 800164c:	4313      	orrs	r3, r2
 800164e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001650:	f7ff fa28 	bl	8000aa4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001654:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001656:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001658:	04ad      	lsls	r5, r5, #18
 800165a:	e005      	b.n	8001668 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165c:	f7ff fa22 	bl	8000aa4 <HAL_GetTick>
 8001660:	1b00      	subs	r0, r0, r4
 8001662:	2802      	cmp	r0, #2
 8001664:	d900      	bls.n	8001668 <HAL_RCC_OscConfig+0x498>
 8001666:	e6ee      	b.n	8001446 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001668:	6833      	ldr	r3, [r6, #0]
 800166a:	422b      	tst	r3, r5
 800166c:	d0f6      	beq.n	800165c <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 800166e:	2000      	movs	r0, #0
 8001670:	e6a7      	b.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	40021000 	.word	0x40021000
 8001678:	efffffff 	.word	0xefffffff
 800167c:	feffffff 	.word	0xfeffffff
 8001680:	ffc2ffff 	.word	0xffc2ffff

08001684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001686:	46ce      	mov	lr, r9
 8001688:	4647      	mov	r7, r8
 800168a:	0004      	movs	r4, r0
 800168c:	000d      	movs	r5, r1
 800168e:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001690:	2800      	cmp	r0, #0
 8001692:	d00d      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	2301      	movs	r3, #1
 8001696:	494f      	ldr	r1, [pc, #316]	; (80017d4 <HAL_RCC_ClockConfig+0x150>)
 8001698:	680a      	ldr	r2, [r1, #0]
 800169a:	401a      	ands	r2, r3
 800169c:	42aa      	cmp	r2, r5
 800169e:	d20c      	bcs.n	80016ba <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a0:	680a      	ldr	r2, [r1, #0]
 80016a2:	439a      	bics	r2, r3
 80016a4:	432a      	orrs	r2, r5
 80016a6:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a8:	680a      	ldr	r2, [r1, #0]
 80016aa:	4013      	ands	r3, r2
 80016ac:	42ab      	cmp	r3, r5
 80016ae:	d004      	beq.n	80016ba <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 80016b0:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80016b2:	bcc0      	pop	{r6, r7}
 80016b4:	46b9      	mov	r9, r7
 80016b6:	46b0      	mov	r8, r6
 80016b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	079a      	lsls	r2, r3, #30
 80016be:	d50e      	bpl.n	80016de <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	075a      	lsls	r2, r3, #29
 80016c2:	d505      	bpl.n	80016d0 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016c4:	22e0      	movs	r2, #224	; 0xe0
 80016c6:	4944      	ldr	r1, [pc, #272]	; (80017d8 <HAL_RCC_ClockConfig+0x154>)
 80016c8:	00d2      	lsls	r2, r2, #3
 80016ca:	6848      	ldr	r0, [r1, #4]
 80016cc:	4302      	orrs	r2, r0
 80016ce:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d0:	20f0      	movs	r0, #240	; 0xf0
 80016d2:	4941      	ldr	r1, [pc, #260]	; (80017d8 <HAL_RCC_ClockConfig+0x154>)
 80016d4:	684a      	ldr	r2, [r1, #4]
 80016d6:	4382      	bics	r2, r0
 80016d8:	68a0      	ldr	r0, [r4, #8]
 80016da:	4302      	orrs	r2, r0
 80016dc:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016de:	07db      	lsls	r3, r3, #31
 80016e0:	d522      	bpl.n	8001728 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <HAL_RCC_ClockConfig+0x154>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e4:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e8:	2a01      	cmp	r2, #1
 80016ea:	d065      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ec:	2a02      	cmp	r2, #2
 80016ee:	d060      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x12e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	079b      	lsls	r3, r3, #30
 80016f2:	d5dd      	bpl.n	80016b0 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f4:	2103      	movs	r1, #3
 80016f6:	4e38      	ldr	r6, [pc, #224]	; (80017d8 <HAL_RCC_ClockConfig+0x154>)
 80016f8:	6873      	ldr	r3, [r6, #4]
 80016fa:	438b      	bics	r3, r1
 80016fc:	4313      	orrs	r3, r2
 80016fe:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001700:	f7ff f9d0 	bl	8000aa4 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001704:	230c      	movs	r3, #12
 8001706:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_RCC_ClockConfig+0x158>)
    tickstart = HAL_GetTick();
 800170a:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	e004      	b.n	800171a <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	f7ff f9c8 	bl	8000aa4 <HAL_GetTick>
 8001714:	1bc0      	subs	r0, r0, r7
 8001716:	4548      	cmp	r0, r9
 8001718:	d851      	bhi.n	80017be <HAL_RCC_ClockConfig+0x13a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171a:	4643      	mov	r3, r8
 800171c:	6872      	ldr	r2, [r6, #4]
 800171e:	401a      	ands	r2, r3
 8001720:	6863      	ldr	r3, [r4, #4]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	429a      	cmp	r2, r3
 8001726:	d1f3      	bne.n	8001710 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001728:	2101      	movs	r1, #1
 800172a:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <HAL_RCC_ClockConfig+0x150>)
 800172c:	6813      	ldr	r3, [r2, #0]
 800172e:	400b      	ands	r3, r1
 8001730:	42ab      	cmp	r3, r5
 8001732:	d905      	bls.n	8001740 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001734:	6813      	ldr	r3, [r2, #0]
 8001736:	438b      	bics	r3, r1
 8001738:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	6813      	ldr	r3, [r2, #0]
 800173c:	4219      	tst	r1, r3
 800173e:	d1b7      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	075b      	lsls	r3, r3, #29
 8001744:	d416      	bmi.n	8001774 <HAL_RCC_ClockConfig+0xf0>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001746:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001748:	4923      	ldr	r1, [pc, #140]	; (80017d8 <HAL_RCC_ClockConfig+0x154>)
 800174a:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800174c:	4013      	ands	r3, r2
 800174e:	2b04      	cmp	r3, #4
 8001750:	d01d      	beq.n	800178e <HAL_RCC_ClockConfig+0x10a>
 8001752:	2b08      	cmp	r3, #8
 8001754:	d01d      	beq.n	8001792 <HAL_RCC_ClockConfig+0x10e>
 8001756:	4822      	ldr	r0, [pc, #136]	; (80017e0 <HAL_RCC_ClockConfig+0x15c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <HAL_RCC_ClockConfig+0x154>)
 800175a:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <HAL_RCC_ClockConfig+0x160>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4922      	ldr	r1, [pc, #136]	; (80017e8 <HAL_RCC_ClockConfig+0x164>)
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	0f1b      	lsrs	r3, r3, #28
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	40d8      	lsrs	r0, r3
 8001768:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800176a:	2003      	movs	r0, #3
 800176c:	f7ff f958 	bl	8000a20 <HAL_InitTick>
  return HAL_OK;
 8001770:	2000      	movs	r0, #0
 8001772:	e79e      	b.n	80016b2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001774:	4a18      	ldr	r2, [pc, #96]	; (80017d8 <HAL_RCC_ClockConfig+0x154>)
 8001776:	491d      	ldr	r1, [pc, #116]	; (80017ec <HAL_RCC_ClockConfig+0x168>)
 8001778:	6853      	ldr	r3, [r2, #4]
 800177a:	400b      	ands	r3, r1
 800177c:	68e1      	ldr	r1, [r4, #12]
 800177e:	430b      	orrs	r3, r1
 8001780:	6053      	str	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001782:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001784:	4914      	ldr	r1, [pc, #80]	; (80017d8 <HAL_RCC_ClockConfig+0x154>)
 8001786:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001788:	4013      	ands	r3, r2
 800178a:	2b04      	cmp	r3, #4
 800178c:	d1e1      	bne.n	8001752 <HAL_RCC_ClockConfig+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800178e:	4818      	ldr	r0, [pc, #96]	; (80017f0 <HAL_RCC_ClockConfig+0x16c>)
 8001790:	e7e2      	b.n	8001758 <HAL_RCC_ClockConfig+0xd4>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001792:	250f      	movs	r5, #15
 8001794:	4817      	ldr	r0, [pc, #92]	; (80017f4 <HAL_RCC_ClockConfig+0x170>)
 8001796:	0c93      	lsrs	r3, r2, #18
 8001798:	402b      	ands	r3, r5
 800179a:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800179c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800179e:	03d2      	lsls	r2, r2, #15
 80017a0:	d50f      	bpl.n	80017c2 <HAL_RCC_ClockConfig+0x13e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_RCC_ClockConfig+0x174>)
 80017a4:	400d      	ands	r5, r1
 80017a6:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017a8:	4811      	ldr	r0, [pc, #68]	; (80017f0 <HAL_RCC_ClockConfig+0x16c>)
 80017aa:	f7fe fcad 	bl	8000108 <__udivsi3>
 80017ae:	4360      	muls	r0, r4
 80017b0:	e7d2      	b.n	8001758 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	019b      	lsls	r3, r3, #6
 80017b4:	d49e      	bmi.n	80016f4 <HAL_RCC_ClockConfig+0x70>
 80017b6:	e77b      	b.n	80016b0 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b8:	039b      	lsls	r3, r3, #14
 80017ba:	d49b      	bmi.n	80016f4 <HAL_RCC_ClockConfig+0x70>
 80017bc:	e778      	b.n	80016b0 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 80017be:	2003      	movs	r0, #3
 80017c0:	e777      	b.n	80016b2 <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80017c2:	0162      	lsls	r2, r4, #5
 80017c4:	1b12      	subs	r2, r2, r4
 80017c6:	0193      	lsls	r3, r2, #6
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	191b      	adds	r3, r3, r4
 80017ce:	0218      	lsls	r0, r3, #8
 80017d0:	e7c2      	b.n	8001758 <HAL_RCC_ClockConfig+0xd4>
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	00001388 	.word	0x00001388
 80017e0:	007a1200 	.word	0x007a1200
 80017e4:	08001b64 	.word	0x08001b64
 80017e8:	20000000 	.word	0x20000000
 80017ec:	fffff8ff 	.word	0xfffff8ff
 80017f0:	00f42400 	.word	0x00f42400
 80017f4:	08001b74 	.word	0x08001b74
 80017f8:	08001b84 	.word	0x08001b84

080017fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017fc:	b510      	push	{r4, lr}
 80017fe:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001800:	d05b      	beq.n	80018ba <HAL_TIM_Base_Init+0xbe>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001802:	233d      	movs	r3, #61	; 0x3d
 8001804:	5cc3      	ldrb	r3, [r0, r3]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d048      	beq.n	800189e <HAL_TIM_Base_Init+0xa2>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800180c:	233d      	movs	r3, #61	; 0x3d
 800180e:	2202      	movs	r2, #2
 8001810:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001812:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001814:	492a      	ldr	r1, [pc, #168]	; (80018c0 <HAL_TIM_Base_Init+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001816:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001818:	428a      	cmp	r2, r1
 800181a:	d015      	beq.n	8001848 <HAL_TIM_Base_Init+0x4c>
 800181c:	4929      	ldr	r1, [pc, #164]	; (80018c4 <HAL_TIM_Base_Init+0xc8>)
 800181e:	428a      	cmp	r2, r1
 8001820:	d042      	beq.n	80018a8 <HAL_TIM_Base_Init+0xac>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001822:	4929      	ldr	r1, [pc, #164]	; (80018c8 <HAL_TIM_Base_Init+0xcc>)
 8001824:	428a      	cmp	r2, r1
 8001826:	d043      	beq.n	80018b0 <HAL_TIM_Base_Init+0xb4>
 8001828:	4928      	ldr	r1, [pc, #160]	; (80018cc <HAL_TIM_Base_Init+0xd0>)
 800182a:	428a      	cmp	r2, r1
 800182c:	d010      	beq.n	8001850 <HAL_TIM_Base_Init+0x54>
 800182e:	4928      	ldr	r1, [pc, #160]	; (80018d0 <HAL_TIM_Base_Init+0xd4>)
 8001830:	428a      	cmp	r2, r1
 8001832:	d00d      	beq.n	8001850 <HAL_TIM_Base_Init+0x54>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	438b      	bics	r3, r1
 8001838:	69a1      	ldr	r1, [r4, #24]
 800183a:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 800183c:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800183e:	68e3      	ldr	r3, [r4, #12]
 8001840:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001842:	6863      	ldr	r3, [r4, #4]
 8001844:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001846:	e012      	b.n	800186e <HAL_TIM_Base_Init+0x72>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001848:	2170      	movs	r1, #112	; 0x70
 800184a:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800184c:	68a1      	ldr	r1, [r4, #8]
 800184e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001850:	4920      	ldr	r1, [pc, #128]	; (80018d4 <HAL_TIM_Base_Init+0xd8>)
 8001852:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001854:	6921      	ldr	r1, [r4, #16]
 8001856:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	438b      	bics	r3, r1
 800185c:	69a1      	ldr	r1, [r4, #24]
 800185e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001860:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001862:	68e3      	ldr	r3, [r4, #12]
 8001864:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001866:	6863      	ldr	r3, [r4, #4]
 8001868:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800186a:	6963      	ldr	r3, [r4, #20]
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800186e:	2301      	movs	r3, #1
 8001870:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001872:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8001874:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001876:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001878:	3a08      	subs	r2, #8
 800187a:	54a3      	strb	r3, [r4, r2]
 800187c:	3201      	adds	r2, #1
 800187e:	54a3      	strb	r3, [r4, r2]
 8001880:	3201      	adds	r2, #1
 8001882:	54a3      	strb	r3, [r4, r2]
 8001884:	3201      	adds	r2, #1
 8001886:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001888:	3201      	adds	r2, #1
 800188a:	54a3      	strb	r3, [r4, r2]
 800188c:	3201      	adds	r2, #1
 800188e:	54a3      	strb	r3, [r4, r2]
 8001890:	3201      	adds	r2, #1
 8001892:	54a3      	strb	r3, [r4, r2]
 8001894:	3201      	adds	r2, #1
 8001896:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001898:	3a08      	subs	r2, #8
 800189a:	54a3      	strb	r3, [r4, r2]
}
 800189c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800189e:	333c      	adds	r3, #60	; 0x3c
 80018a0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80018a2:	f7ff f86f 	bl	8000984 <HAL_TIM_Base_MspInit>
 80018a6:	e7b1      	b.n	800180c <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018a8:	2170      	movs	r1, #112	; 0x70
 80018aa:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80018ac:	68a1      	ldr	r1, [r4, #8]
 80018ae:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80018b0:	4908      	ldr	r1, [pc, #32]	; (80018d4 <HAL_TIM_Base_Init+0xd8>)
 80018b2:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018b4:	6921      	ldr	r1, [r4, #16]
 80018b6:	430b      	orrs	r3, r1
 80018b8:	e7bc      	b.n	8001834 <HAL_TIM_Base_Init+0x38>
    return HAL_ERROR;
 80018ba:	2001      	movs	r0, #1
 80018bc:	e7ee      	b.n	800189c <HAL_TIM_Base_Init+0xa0>
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	40012c00 	.word	0x40012c00
 80018c4:	40000400 	.word	0x40000400
 80018c8:	40002000 	.word	0x40002000
 80018cc:	40014400 	.word	0x40014400
 80018d0:	40014800 	.word	0x40014800
 80018d4:	fffffcff 	.word	0xfffffcff

080018d8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80018d8:	223d      	movs	r2, #61	; 0x3d
 80018da:	5c81      	ldrb	r1, [r0, r2]
{
 80018dc:	0003      	movs	r3, r0
    return HAL_ERROR;
 80018de:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80018e0:	2901      	cmp	r1, #1
 80018e2:	d10c      	bne.n	80018fe <HAL_TIM_Base_Start+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 80018e4:	3101      	adds	r1, #1
 80018e6:	5499      	strb	r1, [r3, r2]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a0c      	ldr	r2, [pc, #48]	; (800191c <HAL_TIM_Base_Start+0x44>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d007      	beq.n	8001900 <HAL_TIM_Base_Start+0x28>
 80018f0:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_TIM_Base_Start+0x48>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d004      	beq.n	8001900 <HAL_TIM_Base_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4302      	orrs	r2, r0
  return HAL_OK;
 80018fa:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001900:	2207      	movs	r2, #7
 8001902:	6899      	ldr	r1, [r3, #8]
 8001904:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001906:	2a06      	cmp	r2, #6
 8001908:	d005      	beq.n	8001916 <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
 800190a:	2101      	movs	r1, #1
 800190c:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800190e:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e7f3      	b.n	80018fe <HAL_TIM_Base_Start+0x26>
  return HAL_OK;
 8001916:	2000      	movs	r0, #0
 8001918:	e7f1      	b.n	80018fe <HAL_TIM_Base_Start+0x26>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40012c00 	.word	0x40012c00
 8001920:	40000400 	.word	0x40000400

08001924 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001924:	233c      	movs	r3, #60	; 0x3c
{
 8001926:	b570      	push	{r4, r5, r6, lr}
 8001928:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 800192a:	5cc0      	ldrb	r0, [r0, r3]
 800192c:	2801      	cmp	r0, #1
 800192e:	d100      	bne.n	8001932 <HAL_TIM_ConfigClockSource+0xe>
 8001930:	e075      	b.n	8001a1e <HAL_TIM_ConfigClockSource+0xfa>
 8001932:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001934:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001936:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8001938:	3301      	adds	r3, #1
 800193a:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 800193c:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800193e:	4d52      	ldr	r5, [pc, #328]	; (8001a88 <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr = htim->Instance->SMCR;
 8001940:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001942:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8001944:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001946:	680b      	ldr	r3, [r1, #0]
 8001948:	2b60      	cmp	r3, #96	; 0x60
 800194a:	d100      	bne.n	800194e <HAL_TIM_ConfigClockSource+0x2a>
 800194c:	e069      	b.n	8001a22 <HAL_TIM_ConfigClockSource+0xfe>
 800194e:	d823      	bhi.n	8001998 <HAL_TIM_ConfigClockSource+0x74>
 8001950:	2b40      	cmp	r3, #64	; 0x40
 8001952:	d100      	bne.n	8001956 <HAL_TIM_ConfigClockSource+0x32>
 8001954:	e07f      	b.n	8001a56 <HAL_TIM_ConfigClockSource+0x132>
 8001956:	d952      	bls.n	80019fe <HAL_TIM_ConfigClockSource+0xda>
 8001958:	2b50      	cmp	r3, #80	; 0x50
 800195a:	d13b      	bne.n	80019d4 <HAL_TIM_ConfigClockSource+0xb0>
                               sClockSourceConfig->ClockPolarity,
 800195c:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800195e:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001960:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001962:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001964:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001966:	43a6      	bics	r6, r4
 8001968:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800196a:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800196c:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800196e:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001970:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001972:	240a      	movs	r4, #10
 8001974:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001976:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001978:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800197a:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800197c:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800197e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001980:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001982:	3919      	subs	r1, #25
 8001984:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001986:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001988:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800198a:	233d      	movs	r3, #61	; 0x3d
 800198c:	2101      	movs	r1, #1
 800198e:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8001990:	2100      	movs	r1, #0
 8001992:	3b01      	subs	r3, #1
 8001994:	54d1      	strb	r1, [r2, r3]
}
 8001996:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001998:	2480      	movs	r4, #128	; 0x80
 800199a:	0164      	lsls	r4, r4, #5
 800199c:	42a3      	cmp	r3, r4
 800199e:	d03c      	beq.n	8001a1a <HAL_TIM_ConfigClockSource+0xf6>
 80019a0:	2480      	movs	r4, #128	; 0x80
 80019a2:	01a4      	lsls	r4, r4, #6
 80019a4:	42a3      	cmp	r3, r4
 80019a6:	d117      	bne.n	80019d8 <HAL_TIM_ConfigClockSource+0xb4>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80019a8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019aa:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <HAL_TIM_ConfigClockSource+0x168>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019ac:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019ae:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019b0:	688b      	ldr	r3, [r1, #8]
 80019b2:	68c9      	ldr	r1, [r1, #12]
 80019b4:	432b      	orrs	r3, r5
 80019b6:	0209      	lsls	r1, r1, #8
 80019b8:	430b      	orrs	r3, r1
 80019ba:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019bc:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	6881      	ldr	r1, [r0, #8]
 80019c2:	01db      	lsls	r3, r3, #7
 80019c4:	430b      	orrs	r3, r1
 80019c6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80019c8:	2000      	movs	r0, #0
      break;
 80019ca:	e7de      	b.n	800198a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80019cc:	2110      	movs	r1, #16
 80019ce:	001c      	movs	r4, r3
 80019d0:	438c      	bics	r4, r1
 80019d2:	d019      	beq.n	8001a08 <HAL_TIM_ConfigClockSource+0xe4>
 80019d4:	2001      	movs	r0, #1
 80019d6:	e7d8      	b.n	800198a <HAL_TIM_ConfigClockSource+0x66>
 80019d8:	2b70      	cmp	r3, #112	; 0x70
 80019da:	d1fb      	bne.n	80019d4 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr = TIMx->SMCR;
 80019dc:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019e0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019e2:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019e4:	688b      	ldr	r3, [r1, #8]
 80019e6:	68c9      	ldr	r1, [r1, #12]
 80019e8:	432b      	orrs	r3, r5
 80019ea:	0209      	lsls	r1, r1, #8
 80019ec:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019ee:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019f0:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80019f2:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 80019f4:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019f6:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80019f8:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80019fa:	2000      	movs	r0, #0
      break;
 80019fc:	e7c5      	b.n	800198a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80019fe:	2b20      	cmp	r3, #32
 8001a00:	d002      	beq.n	8001a08 <HAL_TIM_ConfigClockSource+0xe4>
 8001a02:	d9e3      	bls.n	80019cc <HAL_TIM_ConfigClockSource+0xa8>
 8001a04:	2b30      	cmp	r3, #48	; 0x30
 8001a06:	d1e5      	bne.n	80019d4 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a08:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001a0a:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a0c:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	2107      	movs	r1, #7
 8001a12:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001a14:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001a16:	2000      	movs	r0, #0
}
 8001a18:	e7b7      	b.n	800198a <HAL_TIM_ConfigClockSource+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	e7b5      	b.n	800198a <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8001a1e:	2002      	movs	r0, #2
 8001a20:	e7b9      	b.n	8001996 <HAL_TIM_ConfigClockSource+0x72>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a22:	2510      	movs	r5, #16
 8001a24:	6a04      	ldr	r4, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8001a26:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a28:	43ac      	bics	r4, r5
                               sClockSourceConfig->ClockFilter);
 8001a2a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a2c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a2e:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a30:	4e17      	ldr	r6, [pc, #92]	; (8001a90 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a32:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a34:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a36:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a38:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001a3a:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001a3c:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a3e:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a40:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 8001a46:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001a48:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a4a:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a4c:	3909      	subs	r1, #9
 8001a4e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001a50:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001a52:	2000      	movs	r0, #0
}
 8001a54:	e799      	b.n	800198a <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8001a56:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001a58:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a5a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a5c:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a5e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a60:	43a6      	bics	r6, r4
 8001a62:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a64:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001a66:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a68:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a6a:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a6c:	240a      	movs	r4, #10
 8001a6e:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001a70:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001a72:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a74:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a76:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001a78:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a7a:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a7c:	3929      	subs	r1, #41	; 0x29
 8001a7e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001a80:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001a82:	2000      	movs	r0, #0
}
 8001a84:	e781      	b.n	800198a <HAL_TIM_ConfigClockSource+0x66>
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	ffff0088 	.word	0xffff0088
 8001a8c:	ffff00ff 	.word	0xffff00ff
 8001a90:	ffff0fff 	.word	0xffff0fff

08001a94 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a94:	233c      	movs	r3, #60	; 0x3c
{
 8001a96:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001a98:	5cc3      	ldrb	r3, [r0, r3]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d01e      	beq.n	8001adc <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a9e:	233d      	movs	r3, #61	; 0x3d
 8001aa0:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001aa2:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa4:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8001aa6:	6803      	ldr	r3, [r0, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001aaa:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001aac:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001aae:	680d      	ldr	r5, [r1, #0]
 8001ab0:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ab2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00a      	beq.n	8001ad0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d007      	beq.n	8001ad0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ac0:	233d      	movs	r3, #61	; 0x3d
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8001acc:	2000      	movs	r0, #0
}
 8001ace:	bd30      	pop	{r4, r5, pc}
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	4394      	bics	r4, r2
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ad4:	684a      	ldr	r2, [r1, #4]
 8001ad6:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 8001ad8:	609c      	str	r4, [r3, #8]
 8001ada:	e7f1      	b.n	8001ac0 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 8001adc:	2002      	movs	r0, #2
 8001ade:	e7f6      	b.n	8001ace <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8001ae0:	40012c00 	.word	0x40012c00
 8001ae4:	40000400 	.word	0x40000400

08001ae8 <memset>:
 8001ae8:	0003      	movs	r3, r0
 8001aea:	1882      	adds	r2, r0, r2
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d100      	bne.n	8001af2 <memset+0xa>
 8001af0:	4770      	bx	lr
 8001af2:	7019      	strb	r1, [r3, #0]
 8001af4:	3301      	adds	r3, #1
 8001af6:	e7f9      	b.n	8001aec <memset+0x4>

08001af8 <__libc_init_array>:
 8001af8:	b570      	push	{r4, r5, r6, lr}
 8001afa:	2600      	movs	r6, #0
 8001afc:	4c0c      	ldr	r4, [pc, #48]	; (8001b30 <__libc_init_array+0x38>)
 8001afe:	4d0d      	ldr	r5, [pc, #52]	; (8001b34 <__libc_init_array+0x3c>)
 8001b00:	1b64      	subs	r4, r4, r5
 8001b02:	10a4      	asrs	r4, r4, #2
 8001b04:	42a6      	cmp	r6, r4
 8001b06:	d109      	bne.n	8001b1c <__libc_init_array+0x24>
 8001b08:	2600      	movs	r6, #0
 8001b0a:	f000 f819 	bl	8001b40 <_init>
 8001b0e:	4c0a      	ldr	r4, [pc, #40]	; (8001b38 <__libc_init_array+0x40>)
 8001b10:	4d0a      	ldr	r5, [pc, #40]	; (8001b3c <__libc_init_array+0x44>)
 8001b12:	1b64      	subs	r4, r4, r5
 8001b14:	10a4      	asrs	r4, r4, #2
 8001b16:	42a6      	cmp	r6, r4
 8001b18:	d105      	bne.n	8001b26 <__libc_init_array+0x2e>
 8001b1a:	bd70      	pop	{r4, r5, r6, pc}
 8001b1c:	00b3      	lsls	r3, r6, #2
 8001b1e:	58eb      	ldr	r3, [r5, r3]
 8001b20:	4798      	blx	r3
 8001b22:	3601      	adds	r6, #1
 8001b24:	e7ee      	b.n	8001b04 <__libc_init_array+0xc>
 8001b26:	00b3      	lsls	r3, r6, #2
 8001b28:	58eb      	ldr	r3, [r5, r3]
 8001b2a:	4798      	blx	r3
 8001b2c:	3601      	adds	r6, #1
 8001b2e:	e7f2      	b.n	8001b16 <__libc_init_array+0x1e>
 8001b30:	08001b94 	.word	0x08001b94
 8001b34:	08001b94 	.word	0x08001b94
 8001b38:	08001b98 	.word	0x08001b98
 8001b3c:	08001b94 	.word	0x08001b94

08001b40 <_init>:
 8001b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b46:	bc08      	pop	{r3}
 8001b48:	469e      	mov	lr, r3
 8001b4a:	4770      	bx	lr

08001b4c <_fini>:
 8001b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b52:	bc08      	pop	{r3}
 8001b54:	469e      	mov	lr, r3
 8001b56:	4770      	bx	lr
