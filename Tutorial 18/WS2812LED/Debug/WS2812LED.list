
WS2812LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001650  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001710  08001710  00011710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001740  08001740  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001740  08001740  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001740  08001740  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001740  08001740  00011740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001744  08001744  00011744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000010  08001758  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08001758  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000701f  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001786  00000000  00000000  0002709a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000361e  00000000  00000000  00028820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000004a8  00000000  00000000  0002be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000730  00000000  00000000  0002c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000e5bc  00000000  00000000  0002ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009e46  00000000  00000000  0003afd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00055a4d  00000000  00000000  00044e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d0c  00000000  00000000  0009a868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0009b574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080016f8 	.word	0x080016f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080016f8 	.word	0x080016f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <setLED>:

#define USE_BRIGHTNESS 1
extern int brightness;

void setLED (int led, int RED, int GREEN, int BLUE)
{
 80003f4:	b530      	push	{r4, r5, lr}
	LED_Data[led][0] = led;
 80003f6:	b2d2      	uxtb	r2, r2
 80003f8:	0084      	lsls	r4, r0, #2
 80003fa:	0212      	lsls	r2, r2, #8
 80003fc:	b2c0      	uxtb	r0, r0
 80003fe:	b2c9      	uxtb	r1, r1
 8000400:	0409      	lsls	r1, r1, #16
 8000402:	4310      	orrs	r0, r2
 8000404:	4d02      	ldr	r5, [pc, #8]	; (8000410 <setLED+0x1c>)
 8000406:	061b      	lsls	r3, r3, #24
 8000408:	4308      	orrs	r0, r1
 800040a:	4318      	orrs	r0, r3
 800040c:	5128      	str	r0, [r5, r4]
	LED_Data[led][1] = GREEN;
	LED_Data[led][2] = RED;
	LED_Data[led][3] = BLUE;
}
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	2000002c 	.word	0x2000002c

08000414 <WS2812_Send>:

	HAL_SPI_Transmit(&hspi1, sendData, 24, 1000);
}

void WS2812_Send (void)
{
 8000414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000416:	46de      	mov	lr, fp
 8000418:	4657      	mov	r7, sl
 800041a:	464e      	mov	r6, r9
 800041c:	4645      	mov	r5, r8
 800041e:	b5e0      	push	{r5, r6, r7, lr}
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <WS2812_Send+0xb0>)
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	1c5f      	adds	r7, r3, #1
 8000426:	3361      	adds	r3, #97	; 0x61
 8000428:	9301      	str	r3, [sp, #4]
 800042a:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <WS2812_Send+0xb4>)
		if (((color>>i)&0x01) == 1) sendData[indx++] = 0b110;  // store 1
 800042c:	2418      	movs	r4, #24
 800042e:	469b      	mov	fp, r3
 8000430:	ab02      	add	r3, sp, #8
 8000432:	1e5d      	subs	r5, r3, #1
 8000434:	4b25      	ldr	r3, [pc, #148]	; (80004cc <WS2812_Send+0xb8>)
 8000436:	4699      	mov	r9, r3
	for (int i=0; i<NUM_LED; i++)
	{
		ws2812_spi(LED_Data[i][1], LED_Data[i][2], LED_Data[i][3]);
 8000438:	787b      	ldrb	r3, [r7, #1]
 800043a:	7838      	ldrb	r0, [r7, #0]
 800043c:	9300      	str	r3, [sp, #0]
 800043e:	78bb      	ldrb	r3, [r7, #2]
 8000440:	469a      	mov	sl, r3
	if (brightness>100)brightness = 100;
 8000442:	465b      	mov	r3, fp
 8000444:	681e      	ldr	r6, [r3, #0]
 8000446:	2e64      	cmp	r6, #100	; 0x64
 8000448:	dd02      	ble.n	8000450 <WS2812_Send+0x3c>
 800044a:	2264      	movs	r2, #100	; 0x64
 800044c:	2664      	movs	r6, #100	; 0x64
 800044e:	601a      	str	r2, [r3, #0]
	GREEN = GREEN*brightness/100;
 8000450:	2164      	movs	r1, #100	; 0x64
 8000452:	4370      	muls	r0, r6
 8000454:	f7ff fee2 	bl	800021c <__divsi3>
	uint32_t color = GREEN<<16 | RED<<8 | BLUE;  // combined 24bit and send data
 8000458:	0403      	lsls	r3, r0, #16
 800045a:	4698      	mov	r8, r3
	RED = RED*brightness/100;
 800045c:	9800      	ldr	r0, [sp, #0]
 800045e:	2164      	movs	r1, #100	; 0x64
 8000460:	4370      	muls	r0, r6
 8000462:	f7ff fedb 	bl	800021c <__divsi3>
	uint32_t color = GREEN<<16 | RED<<8 | BLUE;  // combined 24bit and send data
 8000466:	4643      	mov	r3, r8
 8000468:	0200      	lsls	r0, r0, #8
 800046a:	4303      	orrs	r3, r0
	BLUE = BLUE*brightness/100;
 800046c:	4650      	mov	r0, sl
	uint32_t color = GREEN<<16 | RED<<8 | BLUE;  // combined 24bit and send data
 800046e:	4698      	mov	r8, r3
	BLUE = BLUE*brightness/100;
 8000470:	2164      	movs	r1, #100	; 0x64
 8000472:	4370      	muls	r0, r6
 8000474:	f7ff fed2 	bl	800021c <__divsi3>
	uint32_t color = GREEN<<16 | RED<<8 | BLUE;  // combined 24bit and send data
 8000478:	4643      	mov	r3, r8
 800047a:	2201      	movs	r2, #1
		if (((color>>i)&0x01) == 1) sendData[indx++] = 0b110;  // store 1
 800047c:	2101      	movs	r1, #1
	uint32_t color = GREEN<<16 | RED<<8 | BLUE;  // combined 24bit and send data
 800047e:	4318      	orrs	r0, r3
		if (((color>>i)&0x01) == 1) sendData[indx++] = 0b110;  // store 1
 8000480:	0006      	movs	r6, r0
 8000482:	1aa3      	subs	r3, r4, r2
 8000484:	40de      	lsrs	r6, r3
 8000486:	0033      	movs	r3, r6
 8000488:	400b      	ands	r3, r1
 800048a:	3b01      	subs	r3, #1
 800048c:	438b      	bics	r3, r1
 800048e:	3306      	adds	r3, #6
 8000490:	54ab      	strb	r3, [r5, r2]
	for (int i=23; i>=0; i--)
 8000492:	3201      	adds	r2, #1
 8000494:	2a19      	cmp	r2, #25
 8000496:	d1f3      	bne.n	8000480 <WS2812_Send+0x6c>
	HAL_SPI_Transmit(&hspi1, sendData, 24, 1000);
 8000498:	23fa      	movs	r3, #250	; 0xfa
 800049a:	4648      	mov	r0, r9
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	3a01      	subs	r2, #1
 80004a0:	a902      	add	r1, sp, #8
 80004a2:	f000 fff5 	bl	8001490 <HAL_SPI_Transmit>
	for (int i=0; i<NUM_LED; i++)
 80004a6:	9b01      	ldr	r3, [sp, #4]
 80004a8:	3704      	adds	r7, #4
 80004aa:	429f      	cmp	r7, r3
 80004ac:	d1c4      	bne.n	8000438 <WS2812_Send+0x24>
	}
	HAL_Delay (1);
 80004ae:	2001      	movs	r0, #1
 80004b0:	f000 f99a 	bl	80007e8 <HAL_Delay>
}
 80004b4:	b009      	add	sp, #36	; 0x24
 80004b6:	bcf0      	pop	{r4, r5, r6, r7}
 80004b8:	46bb      	mov	fp, r7
 80004ba:	46b2      	mov	sl, r6
 80004bc:	46a9      	mov	r9, r5
 80004be:	46a0      	mov	r8, r4
 80004c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	2000002c 	.word	0x2000002c
 80004c8:	20000000 	.word	0x20000000
 80004cc:	2000008c 	.word	0x2000008c

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b510      	push	{r4, lr}
 80004d2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d4:	2218      	movs	r2, #24
 80004d6:	2100      	movs	r1, #0
 80004d8:	a806      	add	r0, sp, #24
 80004da:	f001 f8e1 	bl	80016a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	2210      	movs	r2, #16
 80004e0:	2100      	movs	r1, #0
 80004e2:	4668      	mov	r0, sp
 80004e4:	f001 f8dc 	bl	80016a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004e8:	2301      	movs	r3, #1
 80004ea:	2201      	movs	r2, #1
 80004ec:	9204      	str	r2, [sp, #16]
 80004ee:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	025b      	lsls	r3, r3, #9
 80004f4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 80004f6:	23c0      	movs	r3, #192	; 0xc0
 80004f8:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fa:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 80004fc:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80004fe:	2301      	movs	r3, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000500:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000502:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000504:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000506:	f000 fad9 	bl	8000abc <HAL_RCC_OscConfig>
 800050a:	2800      	cmp	r0, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <SystemClock_Config+0x40>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000512:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000514:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000516:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000518:	2101      	movs	r1, #1
 800051a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051e:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000520:	f000 fd26 	bl	8000f70 <HAL_RCC_ClockConfig>
 8000524:	2800      	cmp	r0, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x5c>
 8000528:	b672      	cpsid	i
  while (1)
 800052a:	e7fe      	b.n	800052a <SystemClock_Config+0x5a>
}
 800052c:	b010      	add	sp, #64	; 0x40
 800052e:	bd10      	pop	{r4, pc}

08000530 <main>:
{
 8000530:	b510      	push	{r4, lr}
 8000532:	b082      	sub	sp, #8
  HAL_Init();
 8000534:	f000 f936 	bl	80007a4 <HAL_Init>
  SystemClock_Config();
 8000538:	f7ff ffca 	bl	80004d0 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	4b42      	ldr	r3, [pc, #264]	; (8000648 <main+0x118>)
 8000540:	03c9      	lsls	r1, r1, #15
 8000542:	695a      	ldr	r2, [r3, #20]
  hspi1.Instance = SPI1;
 8000544:	4841      	ldr	r0, [pc, #260]	; (800064c <main+0x11c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000546:	430a      	orrs	r2, r1
 8000548:	615a      	str	r2, [r3, #20]
 800054a:	695a      	ldr	r2, [r3, #20]
 800054c:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	695a      	ldr	r2, [r3, #20]
 8000556:	0289      	lsls	r1, r1, #10
 8000558:	430a      	orrs	r2, r1
 800055a:	615a      	str	r2, [r3, #20]
 800055c:	695b      	ldr	r3, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800055e:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	400b      	ands	r3, r1
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	9b01      	ldr	r3, [sp, #4]
  hspi1.Instance = SPI1;
 8000566:	4b3a      	ldr	r3, [pc, #232]	; (8000650 <main+0x120>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000568:	0092      	lsls	r2, r2, #2
  hspi1.Instance = SPI1;
 800056a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800056c:	2382      	movs	r3, #130	; 0x82
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000572:	2380      	movs	r3, #128	; 0x80
 8000574:	021b      	lsls	r3, r3, #8
 8000576:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000578:	23e0      	movs	r3, #224	; 0xe0
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800057e:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000580:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000582:	3ae9      	subs	r2, #233	; 0xe9
 8000584:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000586:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000588:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800058a:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800058c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800058e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000590:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000592:	3a11      	subs	r2, #17
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000594:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000596:	3308      	adds	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8000598:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800059a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800059c:	f000 fed2 	bl	8001344 <HAL_SPI_Init>
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d001      	beq.n	80005a8 <main+0x78>
 80005a4:	b672      	cpsid	i
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x76>
  for (int i=0; i<24; i++)
 80005a8:	2400      	movs	r4, #0
	  setLED(i, 0, 0, 0);
 80005aa:	0020      	movs	r0, r4
 80005ac:	2300      	movs	r3, #0
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
  for (int i=0; i<24; i++)
 80005b2:	3401      	adds	r4, #1
	  setLED(i, 0, 0, 0);
 80005b4:	f7ff ff1e 	bl	80003f4 <setLED>
  for (int i=0; i<24; i++)
 80005b8:	2c18      	cmp	r4, #24
 80005ba:	d1f6      	bne.n	80005aa <main+0x7a>
  WS2812_Send();
 80005bc:	f7ff ff2a 	bl	8000414 <WS2812_Send>
  setLED(0, 201, 0, 255);
 80005c0:	2200      	movs	r2, #0
 80005c2:	23ff      	movs	r3, #255	; 0xff
 80005c4:	0010      	movs	r0, r2
 80005c6:	21c9      	movs	r1, #201	; 0xc9
 80005c8:	f7ff ff14 	bl	80003f4 <setLED>
  setLED(23, 255, 209, 0);
 80005cc:	2017      	movs	r0, #23
 80005ce:	2300      	movs	r3, #0
 80005d0:	22d1      	movs	r2, #209	; 0xd1
 80005d2:	21ff      	movs	r1, #255	; 0xff
 80005d4:	f7ff ff0e 	bl	80003f4 <setLED>
  WS2812_Send();
 80005d8:	f7ff ff1c 	bl	8000414 <WS2812_Send>
  HAL_Delay(2000);
 80005dc:	20fa      	movs	r0, #250	; 0xfa
 80005de:	00c0      	lsls	r0, r0, #3
 80005e0:	f000 f902 	bl	80007e8 <HAL_Delay>
	  	  for (int i=0; i<24; i+=1)
 80005e4:	2400      	movs	r4, #0
	  		  setLED(i, 255,0,0); // Red color
 80005e6:	0020      	movs	r0, r4
 80005e8:	2300      	movs	r3, #0
 80005ea:	2200      	movs	r2, #0
 80005ec:	21ff      	movs	r1, #255	; 0xff
	  	  for (int i=0; i<24; i+=1)
 80005ee:	3401      	adds	r4, #1
	  		  setLED(i, 255,0,0); // Red color
 80005f0:	f7ff ff00 	bl	80003f4 <setLED>
	  	  for (int i=0; i<24; i+=1)
 80005f4:	2c18      	cmp	r4, #24
 80005f6:	d1f6      	bne.n	80005e6 <main+0xb6>
	  	  WS2812_Send();
 80005f8:	f7ff ff0c 	bl	8000414 <WS2812_Send>
	  	  HAL_Delay(1000);
 80005fc:	20fa      	movs	r0, #250	; 0xfa
 80005fe:	0080      	lsls	r0, r0, #2
 8000600:	f000 f8f2 	bl	80007e8 <HAL_Delay>
	  	  for (int i=0; i<24; i+=1)
 8000604:	2400      	movs	r4, #0
	  		  setLED(i,0, 255, 0); // Green color
 8000606:	0020      	movs	r0, r4
 8000608:	2300      	movs	r3, #0
 800060a:	22ff      	movs	r2, #255	; 0xff
 800060c:	2100      	movs	r1, #0
	  	  for (int i=0; i<24; i+=1)
 800060e:	3401      	adds	r4, #1
	  		  setLED(i,0, 255, 0); // Green color
 8000610:	f7ff fef0 	bl	80003f4 <setLED>
	  	  for (int i=0; i<24; i+=1)
 8000614:	2c18      	cmp	r4, #24
 8000616:	d1f6      	bne.n	8000606 <main+0xd6>
	  	  WS2812_Send();
 8000618:	f7ff fefc 	bl	8000414 <WS2812_Send>
	  	  HAL_Delay(1000);
 800061c:	20fa      	movs	r0, #250	; 0xfa
 800061e:	0080      	lsls	r0, r0, #2
 8000620:	f000 f8e2 	bl	80007e8 <HAL_Delay>
	  	  for (int i=0; i<24; i+=1)
 8000624:	2400      	movs	r4, #0
	  		  setLED(i,0,0,255); // Blue color
 8000626:	0020      	movs	r0, r4
 8000628:	23ff      	movs	r3, #255	; 0xff
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
	  	  for (int i=0; i<24; i+=1)
 800062e:	3401      	adds	r4, #1
	  		  setLED(i,0,0,255); // Blue color
 8000630:	f7ff fee0 	bl	80003f4 <setLED>
	  	  for (int i=0; i<24; i+=1)
 8000634:	2c18      	cmp	r4, #24
 8000636:	d1f6      	bne.n	8000626 <main+0xf6>
	  	  WS2812_Send();
 8000638:	f7ff feec 	bl	8000414 <WS2812_Send>
	  	  HAL_Delay(1000);
 800063c:	20fa      	movs	r0, #250	; 0xfa
 800063e:	0080      	lsls	r0, r0, #2
 8000640:	f000 f8d2 	bl	80007e8 <HAL_Delay>
	  	  for (int i=0; i<24; i+=1)
 8000644:	e7ce      	b.n	80005e4 <main+0xb4>
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	40021000 	.word	0x40021000
 800064c:	2000008c 	.word	0x2000008c
 8000650:	40013000 	.word	0x40013000

08000654 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000654:	2201      	movs	r2, #1
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_MspInit+0x2c>)
{
 8000658:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065a:	6999      	ldr	r1, [r3, #24]
 800065c:	4311      	orrs	r1, r2
 800065e:	6199      	str	r1, [r3, #24]
 8000660:	6999      	ldr	r1, [r3, #24]
 8000662:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	9200      	str	r2, [sp, #0]
 8000668:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	0549      	lsls	r1, r1, #21
 800066e:	430a      	orrs	r2, r1
 8000670:	61da      	str	r2, [r3, #28]
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	400b      	ands	r3, r1
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	b002      	add	sp, #8
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000684:	b510      	push	{r4, lr}
 8000686:	0004      	movs	r4, r0
 8000688:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	2214      	movs	r2, #20
 800068c:	2100      	movs	r1, #0
 800068e:	a802      	add	r0, sp, #8
 8000690:	f001 f806 	bl	80016a0 <memset>
  if(hspi->Instance==SPI1)
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_SPI_MspInit+0x5c>)
 8000696:	6822      	ldr	r2, [r4, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	d001      	beq.n	80006a0 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800069c:	b008      	add	sp, #32
 800069e:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <HAL_SPI_MspInit+0x60>)
 80006a4:	0149      	lsls	r1, r1, #5
 80006a6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006aa:	430a      	orrs	r2, r1
 80006ac:	619a      	str	r2, [r3, #24]
 80006ae:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006b2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006b6:	9200      	str	r2, [sp, #0]
 80006b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	695a      	ldr	r2, [r3, #20]
 80006bc:	0289      	lsls	r1, r1, #10
 80006be:	430a      	orrs	r2, r1
 80006c0:	615a      	str	r2, [r3, #20]
 80006c2:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006c4:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	400b      	ands	r3, r1
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006cc:	2302      	movs	r3, #2
 80006ce:	9202      	str	r2, [sp, #8]
 80006d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f000 f8e4 	bl	80008a4 <HAL_GPIO_Init>
}
 80006dc:	e7de      	b.n	800069c <HAL_SPI_MspInit+0x18>
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	40013000 	.word	0x40013000
 80006e4:	40021000 	.word	0x40021000

080006e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler>
 80006ea:	46c0      	nop			; (mov r8, r8)

080006ec <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <HardFault_Handler>
 80006ee:	46c0      	nop			; (mov r8, r8)

080006f0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f0:	4770      	bx	lr
 80006f2:	46c0      	nop			; (mov r8, r8)

080006f4 <PendSV_Handler>:
 80006f4:	4770      	bx	lr
 80006f6:	46c0      	nop			; (mov r8, r8)

080006f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fa:	f000 f863 	bl	80007c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fe:	bd10      	pop	{r4, pc}

08000700 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000700:	4770      	bx	lr
 8000702:	46c0      	nop			; (mov r8, r8)

08000704 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000706:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000708:	f7ff fffa 	bl	8000700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070e:	490d      	ldr	r1, [pc, #52]	; (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000710:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <LoopForever+0xe>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000724:	4c0a      	ldr	r4, [pc, #40]	; (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000732:	f000 ffbd 	bl	80016b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000736:	f7ff fefb 	bl	8000530 <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   r0, =_estack
 800073c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000748:	08001748 	.word	0x08001748
  ldr r2, =_sbss
 800074c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000750:	200000f4 	.word	0x200000f4

08000754 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_IRQHandler>
	...

08000758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800075c:	20fa      	movs	r0, #250	; 0xfa
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_InitTick+0x40>)
 8000760:	0080      	lsls	r0, r0, #2
 8000762:	7819      	ldrb	r1, [r3, #0]
 8000764:	f7ff fcd0 	bl	8000108 <__udivsi3>
 8000768:	4d0c      	ldr	r5, [pc, #48]	; (800079c <HAL_InitTick+0x44>)
 800076a:	0001      	movs	r1, r0
 800076c:	6828      	ldr	r0, [r5, #0]
 800076e:	f7ff fccb 	bl	8000108 <__udivsi3>
 8000772:	f000 f87d 	bl	8000870 <HAL_SYSTICK_Config>
 8000776:	2800      	cmp	r0, #0
 8000778:	d10c      	bne.n	8000794 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 800077a:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077c:	2c03      	cmp	r4, #3
 800077e:	d900      	bls.n	8000782 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000780:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000782:	3802      	subs	r0, #2
 8000784:	2200      	movs	r2, #0
 8000786:	0021      	movs	r1, r4
 8000788:	f000 f840 	bl	800080c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <HAL_InitTick+0x48>)
 800078e:	2000      	movs	r0, #0
 8000790:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000792:	e7f5      	b.n	8000780 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000794:	2001      	movs	r0, #1
 8000796:	e7f3      	b.n	8000780 <HAL_InitTick+0x28>
 8000798:	20000008 	.word	0x20000008
 800079c:	20000004 	.word	0x20000004
 80007a0:	2000000c 	.word	0x2000000c

080007a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	2110      	movs	r1, #16
 80007a6:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_Init+0x1c>)
{
 80007a8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007aa:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ac:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ae:	430b      	orrs	r3, r1
 80007b0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	f7ff ffd1 	bl	8000758 <HAL_InitTick>
  HAL_MspInit();
 80007b6:	f7ff ff4d 	bl	8000654 <HAL_MspInit>
}
 80007ba:	2000      	movs	r0, #0
 80007bc:	bd10      	pop	{r4, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40022000 	.word	0x40022000

080007c4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007c4:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <HAL_IncTick+0x10>)
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <HAL_IncTick+0x14>)
 80007c8:	6811      	ldr	r1, [r2, #0]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	185b      	adds	r3, r3, r1
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	4770      	bx	lr
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	200000f0 	.word	0x200000f0
 80007d8:	20000008 	.word	0x20000008

080007dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007dc:	4b01      	ldr	r3, [pc, #4]	; (80007e4 <HAL_GetTick+0x8>)
 80007de:	6818      	ldr	r0, [r3, #0]
}
 80007e0:	4770      	bx	lr
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	200000f0 	.word	0x200000f0

080007e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007ec:	f7ff fff6 	bl	80007dc <HAL_GetTick>
 80007f0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f2:	1c63      	adds	r3, r4, #1
 80007f4:	d002      	beq.n	80007fc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <HAL_Delay+0x20>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007fc:	f7ff ffee 	bl	80007dc <HAL_GetTick>
 8000800:	1b40      	subs	r0, r0, r5
 8000802:	42a0      	cmp	r0, r4
 8000804:	d3fa      	bcc.n	80007fc <HAL_Delay+0x14>
  {
  }
}
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	20000008 	.word	0x20000008

0800080c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800080c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800080e:	2800      	cmp	r0, #0
 8000810:	db14      	blt.n	800083c <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_NVIC_SetPriority+0x5c>)
 8000814:	2203      	movs	r2, #3
 8000816:	469c      	mov	ip, r3
 8000818:	23ff      	movs	r3, #255	; 0xff
 800081a:	0884      	lsrs	r4, r0, #2
 800081c:	4002      	ands	r2, r0
 800081e:	0018      	movs	r0, r3
 8000820:	26c0      	movs	r6, #192	; 0xc0
 8000822:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000824:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000826:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000828:	400b      	ands	r3, r1
 800082a:	4093      	lsls	r3, r2
 800082c:	00a4      	lsls	r4, r4, #2
 800082e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000830:	00b6      	lsls	r6, r6, #2
 8000832:	59a5      	ldr	r5, [r4, r6]
 8000834:	4385      	bics	r5, r0
 8000836:	432b      	orrs	r3, r5
 8000838:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800083a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <HAL_NVIC_SetPriority+0x60>)
 800083e:	230f      	movs	r3, #15
 8000840:	4694      	mov	ip, r2
 8000842:	2203      	movs	r2, #3
 8000844:	4003      	ands	r3, r0
 8000846:	4010      	ands	r0, r2
 8000848:	32fc      	adds	r2, #252	; 0xfc
 800084a:	0015      	movs	r5, r2
 800084c:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800084e:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000850:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000852:	400a      	ands	r2, r1
 8000854:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000856:	3b08      	subs	r3, #8
 8000858:	089b      	lsrs	r3, r3, #2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4463      	add	r3, ip
 800085e:	69dc      	ldr	r4, [r3, #28]
 8000860:	43ac      	bics	r4, r5
 8000862:	4322      	orrs	r2, r4
 8000864:	61da      	str	r2, [r3, #28]
 8000866:	e7e8      	b.n	800083a <HAL_NVIC_SetPriority+0x2e>
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	1e43      	subs	r3, r0, #1
 8000874:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	4293      	cmp	r3, r2
 800087a:	d20e      	bcs.n	800089a <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800087c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087e:	4a07      	ldr	r2, [pc, #28]	; (800089c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000880:	4807      	ldr	r0, [pc, #28]	; (80008a0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000882:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000884:	6a03      	ldr	r3, [r0, #32]
 8000886:	0609      	lsls	r1, r1, #24
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	0a1b      	lsrs	r3, r3, #8
 800088c:	430b      	orrs	r3, r1
 800088e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000890:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000892:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000894:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000896:	3307      	adds	r3, #7
 8000898:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800089a:	4770      	bx	lr
 800089c:	e000e010 	.word	0xe000e010
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a6:	46de      	mov	lr, fp
 80008a8:	4657      	mov	r7, sl
 80008aa:	464e      	mov	r6, r9
 80008ac:	4645      	mov	r5, r8
 80008ae:	b5e0      	push	{r5, r6, r7, lr}
 80008b0:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008b2:	6809      	ldr	r1, [r1, #0]
 80008b4:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80008b6:	2300      	movs	r3, #0
{
 80008b8:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ba:	2900      	cmp	r1, #0
 80008bc:	d07c      	beq.n	80009b8 <HAL_GPIO_Init+0x114>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4c79      	ldr	r4, [pc, #484]	; (8000aa4 <HAL_GPIO_Init+0x200>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008c0:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	46a3      	mov	fp, r4
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008c4:	2601      	movs	r6, #1
 80008c6:	000c      	movs	r4, r1
 80008c8:	409e      	lsls	r6, r3
 80008ca:	4034      	ands	r4, r6
 80008cc:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 80008ce:	4231      	tst	r1, r6
 80008d0:	d06c      	beq.n	80009ac <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008d2:	4654      	mov	r4, sl
 80008d4:	2503      	movs	r5, #3
 80008d6:	6864      	ldr	r4, [r4, #4]
 80008d8:	4025      	ands	r5, r4
 80008da:	46ac      	mov	ip, r5
 80008dc:	3d01      	subs	r5, #1
 80008de:	2d01      	cmp	r5, #1
 80008e0:	d800      	bhi.n	80008e4 <HAL_GPIO_Init+0x40>
 80008e2:	e070      	b.n	80009c6 <HAL_GPIO_Init+0x122>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008e4:	4665      	mov	r5, ip
 80008e6:	2d03      	cmp	r5, #3
 80008e8:	d000      	beq.n	80008ec <HAL_GPIO_Init+0x48>
 80008ea:	e0b3      	b.n	8000a54 <HAL_GPIO_Init+0x1b0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008ec:	4666      	mov	r6, ip
 80008ee:	4096      	lsls	r6, r2
 80008f0:	43f5      	mvns	r5, r6
 80008f2:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 80008f4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008f6:	9d02      	ldr	r5, [sp, #8]
 80008f8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008fa:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008fc:	25c0      	movs	r5, #192	; 0xc0
 80008fe:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 8000900:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000902:	422c      	tst	r4, r5
 8000904:	d052      	beq.n	80009ac <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	465d      	mov	r5, fp
 8000908:	2601      	movs	r6, #1
 800090a:	465f      	mov	r7, fp
 800090c:	69ad      	ldr	r5, [r5, #24]
 800090e:	4335      	orrs	r5, r6
 8000910:	61bd      	str	r5, [r7, #24]
 8000912:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000914:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4035      	ands	r5, r6
 8000918:	4e63      	ldr	r6, [pc, #396]	; (8000aa8 <HAL_GPIO_Init+0x204>)
 800091a:	9505      	str	r5, [sp, #20]
 800091c:	46b4      	mov	ip, r6
 800091e:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000920:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8000922:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000924:	00bf      	lsls	r7, r7, #2
 8000926:	00ad      	lsls	r5, r5, #2
 8000928:	4465      	add	r5, ip
 800092a:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 800092c:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800092e:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8000930:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000932:	4666      	mov	r6, ip
 8000934:	40b7      	lsls	r7, r6
 8000936:	003e      	movs	r6, r7
 8000938:	464f      	mov	r7, r9
 800093a:	43b7      	bics	r7, r6
 800093c:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800093e:	2790      	movs	r7, #144	; 0x90
 8000940:	05ff      	lsls	r7, r7, #23
 8000942:	42b8      	cmp	r0, r7
 8000944:	d012      	beq.n	800096c <HAL_GPIO_Init+0xc8>
 8000946:	4f59      	ldr	r7, [pc, #356]	; (8000aac <HAL_GPIO_Init+0x208>)
 8000948:	42b8      	cmp	r0, r7
 800094a:	d100      	bne.n	800094e <HAL_GPIO_Init+0xaa>
 800094c:	e09b      	b.n	8000a86 <HAL_GPIO_Init+0x1e2>
 800094e:	4f58      	ldr	r7, [pc, #352]	; (8000ab0 <HAL_GPIO_Init+0x20c>)
 8000950:	42b8      	cmp	r0, r7
 8000952:	d100      	bne.n	8000956 <HAL_GPIO_Init+0xb2>
 8000954:	e09f      	b.n	8000a96 <HAL_GPIO_Init+0x1f2>
 8000956:	4f57      	ldr	r7, [pc, #348]	; (8000ab4 <HAL_GPIO_Init+0x210>)
 8000958:	42b8      	cmp	r0, r7
 800095a:	d100      	bne.n	800095e <HAL_GPIO_Init+0xba>
 800095c:	e08c      	b.n	8000a78 <HAL_GPIO_Init+0x1d4>
 800095e:	4666      	mov	r6, ip
 8000960:	2705      	movs	r7, #5
 8000962:	40b7      	lsls	r7, r6
 8000964:	003e      	movs	r6, r7
 8000966:	464f      	mov	r7, r9
 8000968:	4337      	orrs	r7, r6
 800096a:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800096c:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800096e:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000970:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 8000972:	4d51      	ldr	r5, [pc, #324]	; (8000ab8 <HAL_GPIO_Init+0x214>)
        temp &= ~(iocurrent);
 8000974:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000976:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8000978:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 800097a:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800097c:	423c      	tst	r4, r7
 800097e:	d000      	beq.n	8000982 <HAL_GPIO_Init+0xde>
 8000980:	e077      	b.n	8000a72 <HAL_GPIO_Init+0x1ce>
        temp &= ~(iocurrent);
 8000982:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000984:	4f4c      	ldr	r7, [pc, #304]	; (8000ab8 <HAL_GPIO_Init+0x214>)
 8000986:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8000988:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800098a:	02a7      	lsls	r7, r4, #10
 800098c:	d46e      	bmi.n	8000a6c <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 800098e:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000990:	4f49      	ldr	r7, [pc, #292]	; (8000ab8 <HAL_GPIO_Init+0x214>)
 8000992:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000994:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000996:	03a7      	lsls	r7, r4, #14
 8000998:	d465      	bmi.n	8000a66 <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 800099a:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800099c:	4f46      	ldr	r7, [pc, #280]	; (8000ab8 <HAL_GPIO_Init+0x214>)
 800099e:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 80009a0:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009a2:	03e4      	lsls	r4, r4, #15
 80009a4:	d45b      	bmi.n	8000a5e <HAL_GPIO_Init+0x1ba>
        temp &= ~(iocurrent);
 80009a6:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80009a8:	4c43      	ldr	r4, [pc, #268]	; (8000ab8 <HAL_GPIO_Init+0x214>)
 80009aa:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ac:	000c      	movs	r4, r1
      }
    }

    position++;
 80009ae:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b0:	40dc      	lsrs	r4, r3
 80009b2:	3202      	adds	r2, #2
 80009b4:	2c00      	cmp	r4, #0
 80009b6:	d185      	bne.n	80008c4 <HAL_GPIO_Init+0x20>
  } 
}
 80009b8:	b007      	add	sp, #28
 80009ba:	bcf0      	pop	{r4, r5, r6, r7}
 80009bc:	46bb      	mov	fp, r7
 80009be:	46b2      	mov	sl, r6
 80009c0:	46a9      	mov	r9, r5
 80009c2:	46a0      	mov	r8, r4
 80009c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80009c6:	6885      	ldr	r5, [r0, #8]
 80009c8:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ca:	2503      	movs	r5, #3
 80009cc:	4095      	lsls	r5, r2
 80009ce:	46a8      	mov	r8, r5
 80009d0:	43ed      	mvns	r5, r5
 80009d2:	464f      	mov	r7, r9
 80009d4:	9502      	str	r5, [sp, #8]
 80009d6:	4645      	mov	r5, r8
 80009d8:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009da:	4655      	mov	r5, sl
 80009dc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009de:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e0:	002f      	movs	r7, r5
 80009e2:	4097      	lsls	r7, r2
 80009e4:	46b8      	mov	r8, r7
 80009e6:	464f      	mov	r7, r9
 80009e8:	4645      	mov	r5, r8
 80009ea:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80009ec:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80009ee:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009f0:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009f2:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009f4:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009f6:	0926      	lsrs	r6, r4, #4
 80009f8:	402e      	ands	r6, r5
 80009fa:	409e      	lsls	r6, r3
 80009fc:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80009fe:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8000a00:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a02:	9d02      	ldr	r5, [sp, #8]
 8000a04:	402e      	ands	r6, r5
 8000a06:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a08:	4656      	mov	r6, sl
 8000a0a:	68b6      	ldr	r6, [r6, #8]
 8000a0c:	4647      	mov	r7, r8
 8000a0e:	4096      	lsls	r6, r2
 8000a10:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8000a12:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a14:	4667      	mov	r7, ip
 8000a16:	4666      	mov	r6, ip
 8000a18:	4096      	lsls	r6, r2
 8000a1a:	2f02      	cmp	r7, #2
 8000a1c:	d000      	beq.n	8000a20 <HAL_GPIO_Init+0x17c>
 8000a1e:	e769      	b.n	80008f4 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 8000a20:	08dd      	lsrs	r5, r3, #3
 8000a22:	00ad      	lsls	r5, r5, #2
 8000a24:	46ac      	mov	ip, r5
 8000a26:	4484      	add	ip, r0
 8000a28:	4665      	mov	r5, ip
 8000a2a:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a2c:	2507      	movs	r5, #7
 8000a2e:	401d      	ands	r5, r3
 8000a30:	00ad      	lsls	r5, r5, #2
 8000a32:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8000a34:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a36:	250f      	movs	r5, #15
 8000a38:	4647      	mov	r7, r8
 8000a3a:	40bd      	lsls	r5, r7
 8000a3c:	9f03      	ldr	r7, [sp, #12]
 8000a3e:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a40:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a42:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a44:	4647      	mov	r7, r8
 8000a46:	692d      	ldr	r5, [r5, #16]
 8000a48:	40bd      	lsls	r5, r7
 8000a4a:	9f03      	ldr	r7, [sp, #12]
 8000a4c:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8000a4e:	4665      	mov	r5, ip
 8000a50:	622f      	str	r7, [r5, #32]
 8000a52:	e74f      	b.n	80008f4 <HAL_GPIO_Init+0x50>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a54:	2503      	movs	r5, #3
 8000a56:	4095      	lsls	r5, r2
 8000a58:	43ed      	mvns	r5, r5
 8000a5a:	9502      	str	r5, [sp, #8]
 8000a5c:	e7d0      	b.n	8000a00 <HAL_GPIO_Init+0x15c>
          temp |= iocurrent;
 8000a5e:	9c01      	ldr	r4, [sp, #4]
 8000a60:	432c      	orrs	r4, r5
 8000a62:	0025      	movs	r5, r4
 8000a64:	e7a0      	b.n	80009a8 <HAL_GPIO_Init+0x104>
          temp |= iocurrent;
 8000a66:	9f01      	ldr	r7, [sp, #4]
 8000a68:	433d      	orrs	r5, r7
 8000a6a:	e797      	b.n	800099c <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 8000a6c:	9f01      	ldr	r7, [sp, #4]
 8000a6e:	433d      	orrs	r5, r7
 8000a70:	e78e      	b.n	8000990 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 8000a72:	9f01      	ldr	r7, [sp, #4]
 8000a74:	433d      	orrs	r5, r7
 8000a76:	e785      	b.n	8000984 <HAL_GPIO_Init+0xe0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a78:	4667      	mov	r7, ip
 8000a7a:	2603      	movs	r6, #3
 8000a7c:	40be      	lsls	r6, r7
 8000a7e:	464f      	mov	r7, r9
 8000a80:	4337      	orrs	r7, r6
 8000a82:	46b9      	mov	r9, r7
 8000a84:	e772      	b.n	800096c <HAL_GPIO_Init+0xc8>
 8000a86:	4666      	mov	r6, ip
 8000a88:	2701      	movs	r7, #1
 8000a8a:	40b7      	lsls	r7, r6
 8000a8c:	003e      	movs	r6, r7
 8000a8e:	464f      	mov	r7, r9
 8000a90:	4337      	orrs	r7, r6
 8000a92:	46b9      	mov	r9, r7
 8000a94:	e76a      	b.n	800096c <HAL_GPIO_Init+0xc8>
 8000a96:	4667      	mov	r7, ip
 8000a98:	2602      	movs	r6, #2
 8000a9a:	40be      	lsls	r6, r7
 8000a9c:	464f      	mov	r7, r9
 8000a9e:	4337      	orrs	r7, r6
 8000aa0:	46b9      	mov	r9, r7
 8000aa2:	e763      	b.n	800096c <HAL_GPIO_Init+0xc8>
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010000 	.word	0x40010000
 8000aac:	48000400 	.word	0x48000400
 8000ab0:	48000800 	.word	0x48000800
 8000ab4:	48000c00 	.word	0x48000c00
 8000ab8:	40010400 	.word	0x40010400

08000abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	46ce      	mov	lr, r9
 8000ac0:	4647      	mov	r7, r8
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	0004      	movs	r4, r0
 8000ac6:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	d100      	bne.n	8000ace <HAL_RCC_OscConfig+0x12>
 8000acc:	e0ee      	b.n	8000cac <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ace:	6803      	ldr	r3, [r0, #0]
 8000ad0:	07da      	lsls	r2, r3, #31
 8000ad2:	d535      	bpl.n	8000b40 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ad4:	210c      	movs	r1, #12
 8000ad6:	48c3      	ldr	r0, [pc, #780]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000ad8:	6842      	ldr	r2, [r0, #4]
 8000ada:	400a      	ands	r2, r1
 8000adc:	2a04      	cmp	r2, #4
 8000ade:	d100      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x26>
 8000ae0:	e101      	b.n	8000ce6 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ae2:	6842      	ldr	r2, [r0, #4]
 8000ae4:	4011      	ands	r1, r2
 8000ae6:	2908      	cmp	r1, #8
 8000ae8:	d100      	bne.n	8000aec <HAL_RCC_OscConfig+0x30>
 8000aea:	e0f8      	b.n	8000cde <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aec:	6863      	ldr	r3, [r4, #4]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d00f      	beq.n	8000b12 <HAL_RCC_OscConfig+0x56>
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d100      	bne.n	8000af8 <HAL_RCC_OscConfig+0x3c>
 8000af6:	e11e      	b.n	8000d36 <HAL_RCC_OscConfig+0x27a>
 8000af8:	2b05      	cmp	r3, #5
 8000afa:	d100      	bne.n	8000afe <HAL_RCC_OscConfig+0x42>
 8000afc:	e1a7      	b.n	8000e4e <HAL_RCC_OscConfig+0x392>
 8000afe:	4bb9      	ldr	r3, [pc, #740]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000b00:	49b9      	ldr	r1, [pc, #740]	; (8000de8 <HAL_RCC_OscConfig+0x32c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	400a      	ands	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	49b8      	ldr	r1, [pc, #736]	; (8000dec <HAL_RCC_OscConfig+0x330>)
 8000b0c:	400a      	ands	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	e005      	b.n	8000b1e <HAL_RCC_OscConfig+0x62>
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	4ab3      	ldr	r2, [pc, #716]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000b16:	025b      	lsls	r3, r3, #9
 8000b18:	6811      	ldr	r1, [r2, #0]
 8000b1a:	430b      	orrs	r3, r1
 8000b1c:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b1e:	f7ff fe5d 	bl	80007dc <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b22:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b24:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b26:	4faf      	ldr	r7, [pc, #700]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000b28:	02b6      	lsls	r6, r6, #10
 8000b2a:	e005      	b.n	8000b38 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b2c:	f7ff fe56 	bl	80007dc <HAL_GetTick>
 8000b30:	1b40      	subs	r0, r0, r5
 8000b32:	2864      	cmp	r0, #100	; 0x64
 8000b34:	d900      	bls.n	8000b38 <HAL_RCC_OscConfig+0x7c>
 8000b36:	e0fc      	b.n	8000d32 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	4233      	tst	r3, r6
 8000b3c:	d0f6      	beq.n	8000b2c <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b3e:	6823      	ldr	r3, [r4, #0]
 8000b40:	079a      	lsls	r2, r3, #30
 8000b42:	d529      	bpl.n	8000b98 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b44:	220c      	movs	r2, #12
 8000b46:	49a7      	ldr	r1, [pc, #668]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000b48:	6848      	ldr	r0, [r1, #4]
 8000b4a:	4202      	tst	r2, r0
 8000b4c:	d100      	bne.n	8000b50 <HAL_RCC_OscConfig+0x94>
 8000b4e:	e0a6      	b.n	8000c9e <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b50:	6848      	ldr	r0, [r1, #4]
 8000b52:	4002      	ands	r2, r0
 8000b54:	2a08      	cmp	r2, #8
 8000b56:	d100      	bne.n	8000b5a <HAL_RCC_OscConfig+0x9e>
 8000b58:	e09d      	b.n	8000c96 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b5a:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b5c:	4da1      	ldr	r5, [pc, #644]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d100      	bne.n	8000b64 <HAL_RCC_OscConfig+0xa8>
 8000b62:	e11f      	b.n	8000da4 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8000b64:	2201      	movs	r2, #1
 8000b66:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b68:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b6e:	f7ff fe35 	bl	80007dc <HAL_GetTick>
 8000b72:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b74:	e005      	b.n	8000b82 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b76:	f7ff fe31 	bl	80007dc <HAL_GetTick>
 8000b7a:	1b80      	subs	r0, r0, r6
 8000b7c:	2802      	cmp	r0, #2
 8000b7e:	d900      	bls.n	8000b82 <HAL_RCC_OscConfig+0xc6>
 8000b80:	e0d7      	b.n	8000d32 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b82:	682b      	ldr	r3, [r5, #0]
 8000b84:	421f      	tst	r7, r3
 8000b86:	d0f6      	beq.n	8000b76 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b88:	21f8      	movs	r1, #248	; 0xf8
 8000b8a:	682a      	ldr	r2, [r5, #0]
 8000b8c:	6923      	ldr	r3, [r4, #16]
 8000b8e:	438a      	bics	r2, r1
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4313      	orrs	r3, r2
 8000b94:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	071a      	lsls	r2, r3, #28
 8000b9a:	d42d      	bmi.n	8000bf8 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b9c:	075a      	lsls	r2, r3, #29
 8000b9e:	d544      	bpl.n	8000c2a <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ba0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ba2:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ba4:	4b8f      	ldr	r3, [pc, #572]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000ba6:	0552      	lsls	r2, r2, #21
 8000ba8:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000baa:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bac:	4211      	tst	r1, r2
 8000bae:	d108      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	69d9      	ldr	r1, [r3, #28]
 8000bb2:	4311      	orrs	r1, r2
 8000bb4:	61d9      	str	r1, [r3, #28]
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bc2:	2780      	movs	r7, #128	; 0x80
 8000bc4:	4e8a      	ldr	r6, [pc, #552]	; (8000df0 <HAL_RCC_OscConfig+0x334>)
 8000bc6:	007f      	lsls	r7, r7, #1
 8000bc8:	6833      	ldr	r3, [r6, #0]
 8000bca:	423b      	tst	r3, r7
 8000bcc:	d100      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x114>
 8000bce:	e094      	b.n	8000cfa <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd0:	68a3      	ldr	r3, [r4, #8]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d100      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x11c>
 8000bd6:	e0f8      	b.n	8000dca <HAL_RCC_OscConfig+0x30e>
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d100      	bne.n	8000bde <HAL_RCC_OscConfig+0x122>
 8000bdc:	e0c4      	b.n	8000d68 <HAL_RCC_OscConfig+0x2ac>
 8000bde:	2b05      	cmp	r3, #5
 8000be0:	d100      	bne.n	8000be4 <HAL_RCC_OscConfig+0x128>
 8000be2:	e140      	b.n	8000e66 <HAL_RCC_OscConfig+0x3aa>
 8000be4:	2101      	movs	r1, #1
 8000be6:	4b7f      	ldr	r3, [pc, #508]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	438a      	bics	r2, r1
 8000bec:	621a      	str	r2, [r3, #32]
 8000bee:	6a1a      	ldr	r2, [r3, #32]
 8000bf0:	3103      	adds	r1, #3
 8000bf2:	438a      	bics	r2, r1
 8000bf4:	621a      	str	r2, [r3, #32]
 8000bf6:	e0ec      	b.n	8000dd2 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bf8:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8000bfa:	4d7a      	ldr	r5, [pc, #488]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d05b      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8000c00:	2201      	movs	r2, #1
 8000c02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c04:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000c06:	4313      	orrs	r3, r2
 8000c08:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c0a:	f7ff fde7 	bl	80007dc <HAL_GetTick>
 8000c0e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c10:	e005      	b.n	8000c1e <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c12:	f7ff fde3 	bl	80007dc <HAL_GetTick>
 8000c16:	1b80      	subs	r0, r0, r6
 8000c18:	2802      	cmp	r0, #2
 8000c1a:	d900      	bls.n	8000c1e <HAL_RCC_OscConfig+0x162>
 8000c1c:	e089      	b.n	8000d32 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c20:	421f      	tst	r7, r3
 8000c22:	d0f6      	beq.n	8000c12 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	075a      	lsls	r2, r3, #29
 8000c28:	d4ba      	bmi.n	8000ba0 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c2a:	06db      	lsls	r3, r3, #27
 8000c2c:	d512      	bpl.n	8000c54 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c2e:	6963      	ldr	r3, [r4, #20]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d100      	bne.n	8000c36 <HAL_RCC_OscConfig+0x17a>
 8000c34:	e13d      	b.n	8000eb2 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c36:	3305      	adds	r3, #5
 8000c38:	d000      	beq.n	8000c3c <HAL_RCC_OscConfig+0x180>
 8000c3a:	e0e9      	b.n	8000e10 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c3c:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c3e:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c40:	4a68      	ldr	r2, [pc, #416]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000c42:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000c44:	438b      	bics	r3, r1
 8000c46:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c48:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000c4a:	69a3      	ldr	r3, [r4, #24]
 8000c4c:	4381      	bics	r1, r0
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	430b      	orrs	r3, r1
 8000c52:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c54:	6a23      	ldr	r3, [r4, #32]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d01b      	beq.n	8000c92 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	4d61      	ldr	r5, [pc, #388]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000c5e:	6869      	ldr	r1, [r5, #4]
 8000c60:	400a      	ands	r2, r1
 8000c62:	2a08      	cmp	r2, #8
 8000c64:	d100      	bne.n	8000c68 <HAL_RCC_OscConfig+0x1ac>
 8000c66:	e108      	b.n	8000e7a <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d100      	bne.n	8000c6e <HAL_RCC_OscConfig+0x1b2>
 8000c6c:	e13f      	b.n	8000eee <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c6e:	682b      	ldr	r3, [r5, #0]
 8000c70:	4a60      	ldr	r2, [pc, #384]	; (8000df4 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c72:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000c74:	4013      	ands	r3, r2
 8000c76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c78:	f7ff fdb0 	bl	80007dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c7c:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8000c7e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c80:	e004      	b.n	8000c8c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c82:	f7ff fdab 	bl	80007dc <HAL_GetTick>
 8000c86:	1b00      	subs	r0, r0, r4
 8000c88:	2802      	cmp	r0, #2
 8000c8a:	d852      	bhi.n	8000d32 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c8c:	682b      	ldr	r3, [r5, #0]
 8000c8e:	4233      	tst	r3, r6
 8000c90:	d1f7      	bne.n	8000c82 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8000c92:	2000      	movs	r0, #0
 8000c94:	e00b      	b.n	8000cae <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c96:	684a      	ldr	r2, [r1, #4]
 8000c98:	03d2      	lsls	r2, r2, #15
 8000c9a:	d500      	bpl.n	8000c9e <HAL_RCC_OscConfig+0x1e2>
 8000c9c:	e75d      	b.n	8000b5a <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c9e:	4a51      	ldr	r2, [pc, #324]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000ca0:	6812      	ldr	r2, [r2, #0]
 8000ca2:	0792      	lsls	r2, r2, #30
 8000ca4:	d539      	bpl.n	8000d1a <HAL_RCC_OscConfig+0x25e>
 8000ca6:	68e2      	ldr	r2, [r4, #12]
 8000ca8:	2a01      	cmp	r2, #1
 8000caa:	d036      	beq.n	8000d1a <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8000cac:	2001      	movs	r0, #1
}
 8000cae:	b003      	add	sp, #12
 8000cb0:	bcc0      	pop	{r6, r7}
 8000cb2:	46b9      	mov	r9, r7
 8000cb4:	46b0      	mov	r8, r6
 8000cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8000cb8:	2201      	movs	r2, #1
 8000cba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cbc:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000cbe:	4393      	bics	r3, r2
 8000cc0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000cc2:	f7ff fd8b 	bl	80007dc <HAL_GetTick>
 8000cc6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cc8:	e004      	b.n	8000cd4 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cca:	f7ff fd87 	bl	80007dc <HAL_GetTick>
 8000cce:	1b80      	subs	r0, r0, r6
 8000cd0:	2802      	cmp	r0, #2
 8000cd2:	d82e      	bhi.n	8000d32 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000cd6:	421f      	tst	r7, r3
 8000cd8:	d1f7      	bne.n	8000cca <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	e7a3      	b.n	8000c26 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cde:	6842      	ldr	r2, [r0, #4]
 8000ce0:	03d2      	lsls	r2, r2, #15
 8000ce2:	d400      	bmi.n	8000ce6 <HAL_RCC_OscConfig+0x22a>
 8000ce4:	e702      	b.n	8000aec <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce6:	4a3f      	ldr	r2, [pc, #252]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000ce8:	6812      	ldr	r2, [r2, #0]
 8000cea:	0392      	lsls	r2, r2, #14
 8000cec:	d400      	bmi.n	8000cf0 <HAL_RCC_OscConfig+0x234>
 8000cee:	e727      	b.n	8000b40 <HAL_RCC_OscConfig+0x84>
 8000cf0:	6862      	ldr	r2, [r4, #4]
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d000      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x23c>
 8000cf6:	e723      	b.n	8000b40 <HAL_RCC_OscConfig+0x84>
 8000cf8:	e7d8      	b.n	8000cac <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cfa:	6833      	ldr	r3, [r6, #0]
 8000cfc:	433b      	orrs	r3, r7
 8000cfe:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d00:	f7ff fd6c 	bl	80007dc <HAL_GetTick>
 8000d04:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d06:	e004      	b.n	8000d12 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d08:	f7ff fd68 	bl	80007dc <HAL_GetTick>
 8000d0c:	1b40      	subs	r0, r0, r5
 8000d0e:	2864      	cmp	r0, #100	; 0x64
 8000d10:	d80f      	bhi.n	8000d32 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d12:	6833      	ldr	r3, [r6, #0]
 8000d14:	423b      	tst	r3, r7
 8000d16:	d0f7      	beq.n	8000d08 <HAL_RCC_OscConfig+0x24c>
 8000d18:	e75a      	b.n	8000bd0 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1a:	25f8      	movs	r5, #248	; 0xf8
 8000d1c:	4831      	ldr	r0, [pc, #196]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000d1e:	6922      	ldr	r2, [r4, #16]
 8000d20:	6801      	ldr	r1, [r0, #0]
 8000d22:	00d2      	lsls	r2, r2, #3
 8000d24:	43a9      	bics	r1, r5
 8000d26:	430a      	orrs	r2, r1
 8000d28:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d2a:	071a      	lsls	r2, r3, #28
 8000d2c:	d400      	bmi.n	8000d30 <HAL_RCC_OscConfig+0x274>
 8000d2e:	e735      	b.n	8000b9c <HAL_RCC_OscConfig+0xe0>
 8000d30:	e762      	b.n	8000bf8 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8000d32:	2003      	movs	r0, #3
 8000d34:	e7bb      	b.n	8000cae <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d36:	4d2b      	ldr	r5, [pc, #172]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000d38:	4a2b      	ldr	r2, [pc, #172]	; (8000de8 <HAL_RCC_OscConfig+0x32c>)
 8000d3a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3c:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3e:	4013      	ands	r3, r2
 8000d40:	602b      	str	r3, [r5, #0]
 8000d42:	682b      	ldr	r3, [r5, #0]
 8000d44:	4a29      	ldr	r2, [pc, #164]	; (8000dec <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d46:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d48:	4013      	ands	r3, r2
 8000d4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fd46 	bl	80007dc <HAL_GetTick>
 8000d50:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d52:	e004      	b.n	8000d5e <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff fd42 	bl	80007dc <HAL_GetTick>
 8000d58:	1b80      	subs	r0, r0, r6
 8000d5a:	2864      	cmp	r0, #100	; 0x64
 8000d5c:	d8e9      	bhi.n	8000d32 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	682b      	ldr	r3, [r5, #0]
 8000d60:	423b      	tst	r3, r7
 8000d62:	d1f7      	bne.n	8000d54 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	e6eb      	b.n	8000b40 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4e1e      	ldr	r6, [pc, #120]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d6c:	4d22      	ldr	r5, [pc, #136]	; (8000df8 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d6e:	6a33      	ldr	r3, [r6, #32]
 8000d70:	4393      	bics	r3, r2
 8000d72:	6233      	str	r3, [r6, #32]
 8000d74:	6a33      	ldr	r3, [r6, #32]
 8000d76:	3203      	adds	r2, #3
 8000d78:	4393      	bics	r3, r2
 8000d7a:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fd2e 	bl	80007dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d80:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8000d82:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d84:	4698      	mov	r8, r3
 8000d86:	e004      	b.n	8000d92 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d88:	f7ff fd28 	bl	80007dc <HAL_GetTick>
 8000d8c:	1bc0      	subs	r0, r0, r7
 8000d8e:	42a8      	cmp	r0, r5
 8000d90:	d8cf      	bhi.n	8000d32 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d92:	4642      	mov	r2, r8
 8000d94:	6a33      	ldr	r3, [r6, #32]
 8000d96:	421a      	tst	r2, r3
 8000d98:	d1f6      	bne.n	8000d88 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8000d9a:	464b      	mov	r3, r9
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d04f      	beq.n	8000e40 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	e742      	b.n	8000c2a <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8000da4:	2201      	movs	r2, #1
 8000da6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da8:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000daa:	4393      	bics	r3, r2
 8000dac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dae:	f7ff fd15 	bl	80007dc <HAL_GetTick>
 8000db2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db4:	e004      	b.n	8000dc0 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db6:	f7ff fd11 	bl	80007dc <HAL_GetTick>
 8000dba:	1b80      	subs	r0, r0, r6
 8000dbc:	2802      	cmp	r0, #2
 8000dbe:	d8b8      	bhi.n	8000d32 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc0:	682b      	ldr	r3, [r5, #0]
 8000dc2:	421f      	tst	r7, r3
 8000dc4:	d1f7      	bne.n	8000db6 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	e6e6      	b.n	8000b98 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dca:	4906      	ldr	r1, [pc, #24]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
 8000dcc:	6a0a      	ldr	r2, [r1, #32]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fd03 	bl	80007dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8000dd8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dda:	4698      	mov	r8, r3
 8000ddc:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dde:	4d06      	ldr	r5, [pc, #24]	; (8000df8 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de0:	e011      	b.n	8000e06 <HAL_RCC_OscConfig+0x34a>
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	40021000 	.word	0x40021000
 8000de8:	fffeffff 	.word	0xfffeffff
 8000dec:	fffbffff 	.word	0xfffbffff
 8000df0:	40007000 	.word	0x40007000
 8000df4:	feffffff 	.word	0xfeffffff
 8000df8:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dfc:	f7ff fcee 	bl	80007dc <HAL_GetTick>
 8000e00:	1b80      	subs	r0, r0, r6
 8000e02:	42a8      	cmp	r0, r5
 8000e04:	d895      	bhi.n	8000d32 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e06:	4643      	mov	r3, r8
 8000e08:	6a1b      	ldr	r3, [r3, #32]
 8000e0a:	421f      	tst	r7, r3
 8000e0c:	d0f6      	beq.n	8000dfc <HAL_RCC_OscConfig+0x340>
 8000e0e:	e7c4      	b.n	8000d9a <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e10:	2204      	movs	r2, #4
 8000e12:	4d53      	ldr	r5, [pc, #332]	; (8000f60 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e14:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e16:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000e1c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e1e:	3a03      	subs	r2, #3
 8000e20:	4393      	bics	r3, r2
 8000e22:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000e24:	f7ff fcda 	bl	80007dc <HAL_GetTick>
 8000e28:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e2a:	e005      	b.n	8000e38 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e2c:	f7ff fcd6 	bl	80007dc <HAL_GetTick>
 8000e30:	1b80      	subs	r0, r0, r6
 8000e32:	2802      	cmp	r0, #2
 8000e34:	d900      	bls.n	8000e38 <HAL_RCC_OscConfig+0x37c>
 8000e36:	e77c      	b.n	8000d32 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e38:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e3a:	421f      	tst	r7, r3
 8000e3c:	d1f6      	bne.n	8000e2c <HAL_RCC_OscConfig+0x370>
 8000e3e:	e709      	b.n	8000c54 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e40:	4a47      	ldr	r2, [pc, #284]	; (8000f60 <HAL_RCC_OscConfig+0x4a4>)
 8000e42:	4948      	ldr	r1, [pc, #288]	; (8000f64 <HAL_RCC_OscConfig+0x4a8>)
 8000e44:	69d3      	ldr	r3, [r2, #28]
 8000e46:	400b      	ands	r3, r1
 8000e48:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	e6ed      	b.n	8000c2a <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4e:	2280      	movs	r2, #128	; 0x80
 8000e50:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <HAL_RCC_OscConfig+0x4a4>)
 8000e52:	02d2      	lsls	r2, r2, #11
 8000e54:	6819      	ldr	r1, [r3, #0]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	6819      	ldr	r1, [r3, #0]
 8000e5e:	0252      	lsls	r2, r2, #9
 8000e60:	430a      	orrs	r2, r1
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	e65b      	b.n	8000b1e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e66:	2104      	movs	r1, #4
 8000e68:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_RCC_OscConfig+0x4a4>)
 8000e6a:	6a1a      	ldr	r2, [r3, #32]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	621a      	str	r2, [r3, #32]
 8000e70:	6a1a      	ldr	r2, [r3, #32]
 8000e72:	3903      	subs	r1, #3
 8000e74:	430a      	orrs	r2, r1
 8000e76:	621a      	str	r2, [r3, #32]
 8000e78:	e7ab      	b.n	8000dd2 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d100      	bne.n	8000e80 <HAL_RCC_OscConfig+0x3c4>
 8000e7e:	e715      	b.n	8000cac <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e80:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8000e82:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e86:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8000e88:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8000e8a:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d000      	beq.n	8000e94 <HAL_RCC_OscConfig+0x3d8>
 8000e92:	e70c      	b.n	8000cae <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e94:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e98:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d000      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x3e4>
 8000e9e:	e706      	b.n	8000cae <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000ea0:	23f0      	movs	r3, #240	; 0xf0
 8000ea2:	039b      	lsls	r3, r3, #14
 8000ea4:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000ea6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ea8:	1ad2      	subs	r2, r2, r3
 8000eaa:	1e53      	subs	r3, r2, #1
 8000eac:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 8000eae:	b2d0      	uxtb	r0, r2
 8000eb0:	e6fd      	b.n	8000cae <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	4d2a      	ldr	r5, [pc, #168]	; (8000f60 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000eb6:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eb8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000ebe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ec4:	f7ff fc8a 	bl	80007dc <HAL_GetTick>
 8000ec8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000eca:	e005      	b.n	8000ed8 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ecc:	f7ff fc86 	bl	80007dc <HAL_GetTick>
 8000ed0:	1b80      	subs	r0, r0, r6
 8000ed2:	2802      	cmp	r0, #2
 8000ed4:	d900      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x41c>
 8000ed6:	e72c      	b.n	8000d32 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ed8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000eda:	421f      	tst	r7, r3
 8000edc:	d0f6      	beq.n	8000ecc <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ede:	21f8      	movs	r1, #248	; 0xf8
 8000ee0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000ee2:	69a3      	ldr	r3, [r4, #24]
 8000ee4:	438a      	bics	r2, r1
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	636b      	str	r3, [r5, #52]	; 0x34
 8000eec:	e6b2      	b.n	8000c54 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	4a1d      	ldr	r2, [pc, #116]	; (8000f68 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fc70 	bl	80007dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000efc:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8000efe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f00:	e005      	b.n	8000f0e <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f02:	f7ff fc6b 	bl	80007dc <HAL_GetTick>
 8000f06:	1b80      	subs	r0, r0, r6
 8000f08:	2802      	cmp	r0, #2
 8000f0a:	d900      	bls.n	8000f0e <HAL_RCC_OscConfig+0x452>
 8000f0c:	e711      	b.n	8000d32 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f0e:	682b      	ldr	r3, [r5, #0]
 8000f10:	423b      	tst	r3, r7
 8000f12:	d1f6      	bne.n	8000f02 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f14:	220f      	movs	r2, #15
 8000f16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f18:	4e11      	ldr	r6, [pc, #68]	; (8000f60 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f1a:	4393      	bics	r3, r2
 8000f1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000f22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f26:	686a      	ldr	r2, [r5, #4]
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	4910      	ldr	r1, [pc, #64]	; (8000f6c <HAL_RCC_OscConfig+0x4b0>)
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	682a      	ldr	r2, [r5, #0]
 8000f36:	045b      	lsls	r3, r3, #17
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fc4e 	bl	80007dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f40:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000f42:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f44:	04ad      	lsls	r5, r5, #18
 8000f46:	e005      	b.n	8000f54 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f48:	f7ff fc48 	bl	80007dc <HAL_GetTick>
 8000f4c:	1b00      	subs	r0, r0, r4
 8000f4e:	2802      	cmp	r0, #2
 8000f50:	d900      	bls.n	8000f54 <HAL_RCC_OscConfig+0x498>
 8000f52:	e6ee      	b.n	8000d32 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f54:	6833      	ldr	r3, [r6, #0]
 8000f56:	422b      	tst	r3, r5
 8000f58:	d0f6      	beq.n	8000f48 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	e6a7      	b.n	8000cae <HAL_RCC_OscConfig+0x1f2>
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	40021000 	.word	0x40021000
 8000f64:	efffffff 	.word	0xefffffff
 8000f68:	feffffff 	.word	0xfeffffff
 8000f6c:	ffc2ffff 	.word	0xffc2ffff

08000f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f72:	46ce      	mov	lr, r9
 8000f74:	4647      	mov	r7, r8
 8000f76:	0004      	movs	r4, r0
 8000f78:	000d      	movs	r5, r1
 8000f7a:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d00d      	beq.n	8000f9c <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f80:	2301      	movs	r3, #1
 8000f82:	494f      	ldr	r1, [pc, #316]	; (80010c0 <HAL_RCC_ClockConfig+0x150>)
 8000f84:	680a      	ldr	r2, [r1, #0]
 8000f86:	401a      	ands	r2, r3
 8000f88:	42aa      	cmp	r2, r5
 8000f8a:	d20c      	bcs.n	8000fa6 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f8c:	680a      	ldr	r2, [r1, #0]
 8000f8e:	439a      	bics	r2, r3
 8000f90:	432a      	orrs	r2, r5
 8000f92:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f94:	680a      	ldr	r2, [r1, #0]
 8000f96:	4013      	ands	r3, r2
 8000f98:	42ab      	cmp	r3, r5
 8000f9a:	d004      	beq.n	8000fa6 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8000f9c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8000f9e:	bcc0      	pop	{r6, r7}
 8000fa0:	46b9      	mov	r9, r7
 8000fa2:	46b0      	mov	r8, r6
 8000fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	079a      	lsls	r2, r3, #30
 8000faa:	d50e      	bpl.n	8000fca <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fac:	075a      	lsls	r2, r3, #29
 8000fae:	d505      	bpl.n	8000fbc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000fb0:	22e0      	movs	r2, #224	; 0xe0
 8000fb2:	4944      	ldr	r1, [pc, #272]	; (80010c4 <HAL_RCC_ClockConfig+0x154>)
 8000fb4:	00d2      	lsls	r2, r2, #3
 8000fb6:	6848      	ldr	r0, [r1, #4]
 8000fb8:	4302      	orrs	r2, r0
 8000fba:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fbc:	20f0      	movs	r0, #240	; 0xf0
 8000fbe:	4941      	ldr	r1, [pc, #260]	; (80010c4 <HAL_RCC_ClockConfig+0x154>)
 8000fc0:	684a      	ldr	r2, [r1, #4]
 8000fc2:	4382      	bics	r2, r0
 8000fc4:	68a0      	ldr	r0, [r4, #8]
 8000fc6:	4302      	orrs	r2, r0
 8000fc8:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fca:	07db      	lsls	r3, r3, #31
 8000fcc:	d522      	bpl.n	8001014 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fce:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <HAL_RCC_ClockConfig+0x154>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd0:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd2:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd4:	2a01      	cmp	r2, #1
 8000fd6:	d065      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fd8:	2a02      	cmp	r2, #2
 8000fda:	d060      	beq.n	800109e <HAL_RCC_ClockConfig+0x12e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fdc:	079b      	lsls	r3, r3, #30
 8000fde:	d5dd      	bpl.n	8000f9c <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe0:	2103      	movs	r1, #3
 8000fe2:	4e38      	ldr	r6, [pc, #224]	; (80010c4 <HAL_RCC_ClockConfig+0x154>)
 8000fe4:	6873      	ldr	r3, [r6, #4]
 8000fe6:	438b      	bics	r3, r1
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000fec:	f7ff fbf6 	bl	80007dc <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ff0:	230c      	movs	r3, #12
 8000ff2:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff4:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <HAL_RCC_ClockConfig+0x158>)
    tickstart = HAL_GetTick();
 8000ff6:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff8:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffa:	e004      	b.n	8001006 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffc:	f7ff fbee 	bl	80007dc <HAL_GetTick>
 8001000:	1bc0      	subs	r0, r0, r7
 8001002:	4548      	cmp	r0, r9
 8001004:	d851      	bhi.n	80010aa <HAL_RCC_ClockConfig+0x13a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001006:	4643      	mov	r3, r8
 8001008:	6872      	ldr	r2, [r6, #4]
 800100a:	401a      	ands	r2, r3
 800100c:	6863      	ldr	r3, [r4, #4]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	429a      	cmp	r2, r3
 8001012:	d1f3      	bne.n	8000ffc <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001014:	2101      	movs	r1, #1
 8001016:	4a2a      	ldr	r2, [pc, #168]	; (80010c0 <HAL_RCC_ClockConfig+0x150>)
 8001018:	6813      	ldr	r3, [r2, #0]
 800101a:	400b      	ands	r3, r1
 800101c:	42ab      	cmp	r3, r5
 800101e:	d905      	bls.n	800102c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001020:	6813      	ldr	r3, [r2, #0]
 8001022:	438b      	bics	r3, r1
 8001024:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	4219      	tst	r1, r3
 800102a:	d1b7      	bne.n	8000f9c <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	075b      	lsls	r3, r3, #29
 8001030:	d416      	bmi.n	8001060 <HAL_RCC_ClockConfig+0xf0>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001032:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001034:	4923      	ldr	r1, [pc, #140]	; (80010c4 <HAL_RCC_ClockConfig+0x154>)
 8001036:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001038:	4013      	ands	r3, r2
 800103a:	2b04      	cmp	r3, #4
 800103c:	d01d      	beq.n	800107a <HAL_RCC_ClockConfig+0x10a>
 800103e:	2b08      	cmp	r3, #8
 8001040:	d01d      	beq.n	800107e <HAL_RCC_ClockConfig+0x10e>
 8001042:	4822      	ldr	r0, [pc, #136]	; (80010cc <HAL_RCC_ClockConfig+0x15c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <HAL_RCC_ClockConfig+0x154>)
 8001046:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <HAL_RCC_ClockConfig+0x160>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4922      	ldr	r1, [pc, #136]	; (80010d4 <HAL_RCC_ClockConfig+0x164>)
 800104c:	061b      	lsls	r3, r3, #24
 800104e:	0f1b      	lsrs	r3, r3, #28
 8001050:	5cd3      	ldrb	r3, [r2, r3]
 8001052:	40d8      	lsrs	r0, r3
 8001054:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001056:	2003      	movs	r0, #3
 8001058:	f7ff fb7e 	bl	8000758 <HAL_InitTick>
  return HAL_OK;
 800105c:	2000      	movs	r0, #0
 800105e:	e79e      	b.n	8000f9e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <HAL_RCC_ClockConfig+0x154>)
 8001062:	491d      	ldr	r1, [pc, #116]	; (80010d8 <HAL_RCC_ClockConfig+0x168>)
 8001064:	6853      	ldr	r3, [r2, #4]
 8001066:	400b      	ands	r3, r1
 8001068:	68e1      	ldr	r1, [r4, #12]
 800106a:	430b      	orrs	r3, r1
 800106c:	6053      	str	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800106e:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001070:	4914      	ldr	r1, [pc, #80]	; (80010c4 <HAL_RCC_ClockConfig+0x154>)
 8001072:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d1e1      	bne.n	800103e <HAL_RCC_ClockConfig+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800107a:	4818      	ldr	r0, [pc, #96]	; (80010dc <HAL_RCC_ClockConfig+0x16c>)
 800107c:	e7e2      	b.n	8001044 <HAL_RCC_ClockConfig+0xd4>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800107e:	250f      	movs	r5, #15
 8001080:	4817      	ldr	r0, [pc, #92]	; (80010e0 <HAL_RCC_ClockConfig+0x170>)
 8001082:	0c93      	lsrs	r3, r2, #18
 8001084:	402b      	ands	r3, r5
 8001086:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001088:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800108a:	03d2      	lsls	r2, r2, #15
 800108c:	d50f      	bpl.n	80010ae <HAL_RCC_ClockConfig+0x13e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_RCC_ClockConfig+0x174>)
 8001090:	400d      	ands	r5, r1
 8001092:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <HAL_RCC_ClockConfig+0x16c>)
 8001096:	f7ff f837 	bl	8000108 <__udivsi3>
 800109a:	4360      	muls	r0, r4
 800109c:	e7d2      	b.n	8001044 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800109e:	019b      	lsls	r3, r3, #6
 80010a0:	d49e      	bmi.n	8000fe0 <HAL_RCC_ClockConfig+0x70>
 80010a2:	e77b      	b.n	8000f9c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a4:	039b      	lsls	r3, r3, #14
 80010a6:	d49b      	bmi.n	8000fe0 <HAL_RCC_ClockConfig+0x70>
 80010a8:	e778      	b.n	8000f9c <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 80010aa:	2003      	movs	r0, #3
 80010ac:	e777      	b.n	8000f9e <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80010ae:	0162      	lsls	r2, r4, #5
 80010b0:	1b12      	subs	r2, r2, r4
 80010b2:	0193      	lsls	r3, r2, #6
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	191b      	adds	r3, r3, r4
 80010ba:	0218      	lsls	r0, r3, #8
 80010bc:	e7c2      	b.n	8001044 <HAL_RCC_ClockConfig+0xd4>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	40022000 	.word	0x40022000
 80010c4:	40021000 	.word	0x40021000
 80010c8:	00001388 	.word	0x00001388
 80010cc:	007a1200 	.word	0x007a1200
 80010d0:	08001710 	.word	0x08001710
 80010d4:	20000004 	.word	0x20000004
 80010d8:	fffff8ff 	.word	0xfffff8ff
 80010dc:	00f42400 	.word	0x00f42400
 80010e0:	08001720 	.word	0x08001720
 80010e4:	08001730 	.word	0x08001730

080010e8 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	46d6      	mov	lr, sl
 80010ec:	464f      	mov	r7, r9
 80010ee:	4646      	mov	r6, r8
 80010f0:	b5c0      	push	{r6, r7, lr}
 80010f2:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80010f4:	466b      	mov	r3, sp
 80010f6:	1cdc      	adds	r4, r3, #3
 80010f8:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80010fa:	0016      	movs	r6, r2
 80010fc:	000f      	movs	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 80010fe:	7023      	strb	r3, [r4, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001100:	4680      	mov	r8, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001102:	f7ff fb6b 	bl	80007dc <HAL_GetTick>
 8001106:	19f6      	adds	r6, r6, r7
 8001108:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 800110a:	f7ff fb67 	bl	80007dc <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800110e:	4643      	mov	r3, r8
 8001110:	681d      	ldr	r5, [r3, #0]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <SPI_WaitFifoStateUntilTimeout.constprop.0+0x104>)
  tmp_tickstart = HAL_GetTick();
 8001114:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	009a      	lsls	r2, r3, #2
 800111a:	18d2      	adds	r2, r2, r3
 800111c:	00d3      	lsls	r3, r2, #3
 800111e:	1a9b      	subs	r3, r3, r2
 8001120:	0d1b      	lsrs	r3, r3, #20
 8001122:	4373      	muls	r3, r6
 8001124:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8001126:	23c0      	movs	r3, #192	; 0xc0
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	002a      	movs	r2, r5
 800112c:	469a      	mov	sl, r3
 800112e:	1c7b      	adds	r3, r7, #1
 8001130:	d112      	bne.n	8001158 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x70>
 8001132:	21c0      	movs	r1, #192	; 0xc0
 8001134:	6893      	ldr	r3, [r2, #8]
 8001136:	00c9      	lsls	r1, r1, #3
 8001138:	420b      	tst	r3, r1
 800113a:	d006      	beq.n	800114a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800113c:	7b2b      	ldrb	r3, [r5, #12]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	7023      	strb	r3, [r4, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001142:	7823      	ldrb	r3, [r4, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8001144:	6893      	ldr	r3, [r2, #8]
 8001146:	420b      	tst	r3, r1
 8001148:	d1f8      	bne.n	800113c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      }
      count--;
    }
  }

  return HAL_OK;
 800114a:	2000      	movs	r0, #0
}
 800114c:	b002      	add	sp, #8
 800114e:	bce0      	pop	{r5, r6, r7}
 8001150:	46ba      	mov	sl, r7
 8001152:	46b1      	mov	r9, r6
 8001154:	46a8      	mov	r8, r5
 8001156:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8001158:	6893      	ldr	r3, [r2, #8]
 800115a:	4652      	mov	r2, sl
 800115c:	4213      	tst	r3, r2
 800115e:	d0f4      	beq.n	800114a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
      tmpreg8 = *ptmpreg8;
 8001160:	7b2b      	ldrb	r3, [r5, #12]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	7023      	strb	r3, [r4, #0]
      UNUSED(tmpreg8);
 8001166:	7823      	ldrb	r3, [r4, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001168:	f7ff fb38 	bl	80007dc <HAL_GetTick>
 800116c:	464b      	mov	r3, r9
 800116e:	1ac0      	subs	r0, r0, r3
 8001170:	42b0      	cmp	r0, r6
 8001172:	d20a      	bcs.n	800118a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa2>
      if (count == 0U)
 8001174:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4193      	sbcs	r3, r2
 800117a:	425b      	negs	r3, r3
 800117c:	401e      	ands	r6, r3
      count--;
 800117e:	9b01      	ldr	r3, [sp, #4]
 8001180:	3b01      	subs	r3, #1
 8001182:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001184:	4643      	mov	r3, r8
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	e7d1      	b.n	800112e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x46>
 800118a:	4643      	mov	r3, r8
 800118c:	21e0      	movs	r1, #224	; 0xe0
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001194:	4641      	mov	r1, r8
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001196:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001198:	2282      	movs	r2, #130	; 0x82
 800119a:	6849      	ldr	r1, [r1, #4]
 800119c:	0052      	lsls	r2, r2, #1
 800119e:	4291      	cmp	r1, r2
 80011a0:	d015      	beq.n	80011ce <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80011a2:	4642      	mov	r2, r8
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80011a8:	0189      	lsls	r1, r1, #6
 80011aa:	428a      	cmp	r2, r1
 80011ac:	d106      	bne.n	80011bc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>
          SPI_RESET_CRC(hspi);
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	480f      	ldr	r0, [pc, #60]	; (80011f0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
 80011b2:	4001      	ands	r1, r0
 80011b4:	6019      	str	r1, [r3, #0]
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80011bc:	235d      	movs	r3, #93	; 0x5d
 80011be:	2201      	movs	r2, #1
 80011c0:	4641      	mov	r1, r8
 80011c2:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 80011c4:	2200      	movs	r2, #0
 80011c6:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 80011c8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80011ca:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 80011cc:	e7be      	b.n	800114c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x64>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011ce:	4642      	mov	r2, r8
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	6892      	ldr	r2, [r2, #8]
 80011d4:	0209      	lsls	r1, r1, #8
 80011d6:	428a      	cmp	r2, r1
 80011d8:	d003      	beq.n	80011e2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfa>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	00c9      	lsls	r1, r1, #3
 80011de:	428a      	cmp	r2, r1
 80011e0:	d1df      	bne.n	80011a2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
          __HAL_SPI_DISABLE(hspi);
 80011e2:	2140      	movs	r1, #64	; 0x40
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	438a      	bics	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e7da      	b.n	80011a2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
 80011ec:	20000004 	.word	0x20000004
 80011f0:	ffffdfff 	.word	0xffffdfff

080011f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80011f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f6:	46de      	mov	lr, fp
 80011f8:	4657      	mov	r7, sl
 80011fa:	464e      	mov	r6, r9
 80011fc:	4645      	mov	r5, r8
 80011fe:	b5e0      	push	{r5, r6, r7, lr}
 8001200:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8001202:	466b      	mov	r3, sp
{
 8001204:	0017      	movs	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8001206:	2200      	movs	r2, #0
{
 8001208:	000d      	movs	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 800120a:	71da      	strb	r2, [r3, #7]
{
 800120c:	0004      	movs	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800120e:	f7ff fae5 	bl	80007dc <HAL_GetTick>
 8001212:	19eb      	adds	r3, r5, r7
 8001214:	1a1e      	subs	r6, r3, r0
 8001216:	469a      	mov	sl, r3
  tmp_tickstart = HAL_GetTick();
 8001218:	f7ff fae0 	bl	80007dc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800121c:	4b47      	ldr	r3, [pc, #284]	; (800133c <SPI_EndRxTxTransaction+0x148>)
  tmp_tickstart = HAL_GetTick();
 800121e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001220:	4699      	mov	r9, r3
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	009a      	lsls	r2, r3, #2
 8001226:	18d2      	adds	r2, r2, r3
 8001228:	00d3      	lsls	r3, r2, #3
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	0d1b      	lsrs	r3, r3, #20
 800122e:	4373      	muls	r3, r6
 8001230:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8001232:	23c0      	movs	r3, #192	; 0xc0
 8001234:	015b      	lsls	r3, r3, #5
 8001236:	469b      	mov	fp, r3
 8001238:	6822      	ldr	r2, [r4, #0]
 800123a:	1c6b      	adds	r3, r5, #1
 800123c:	d14a      	bne.n	80012d4 <SPI_EndRxTxTransaction+0xe0>
 800123e:	21c0      	movs	r1, #192	; 0xc0
 8001240:	0149      	lsls	r1, r1, #5
 8001242:	6893      	ldr	r3, [r2, #8]
 8001244:	420b      	tst	r3, r1
 8001246:	d1fc      	bne.n	8001242 <SPI_EndRxTxTransaction+0x4e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001248:	f7ff fac8 	bl	80007dc <HAL_GetTick>
 800124c:	4653      	mov	r3, sl
 800124e:	1a1e      	subs	r6, r3, r0
  tmp_tickstart = HAL_GetTick();
 8001250:	f7ff fac4 	bl	80007dc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001254:	464b      	mov	r3, r9
 8001256:	681b      	ldr	r3, [r3, #0]
  tmp_tickstart = HAL_GetTick();
 8001258:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800125a:	015b      	lsls	r3, r3, #5
 800125c:	0d1b      	lsrs	r3, r3, #20
 800125e:	4373      	muls	r3, r6
 8001260:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	4699      	mov	r9, r3
 8001266:	6822      	ldr	r2, [r4, #0]
 8001268:	1c6b      	adds	r3, r5, #1
 800126a:	d146      	bne.n	80012fa <SPI_EndRxTxTransaction+0x106>
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	6893      	ldr	r3, [r2, #8]
 8001270:	4219      	tst	r1, r3
 8001272:	d1fc      	bne.n	800126e <SPI_EndRxTxTransaction+0x7a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001274:	003a      	movs	r2, r7
 8001276:	0029      	movs	r1, r5
 8001278:	0020      	movs	r0, r4
 800127a:	f7ff ff35 	bl	80010e8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800127e:	2800      	cmp	r0, #0
 8001280:	d122      	bne.n	80012c8 <SPI_EndRxTxTransaction+0xd4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001282:	b005      	add	sp, #20
 8001284:	bcf0      	pop	{r4, r5, r6, r7}
 8001286:	46bb      	mov	fp, r7
 8001288:	46b2      	mov	sl, r6
 800128a:	46a9      	mov	r9, r5
 800128c:	46a0      	mov	r8, r4
 800128e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001290:	21e0      	movs	r1, #224	; 0xe0
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	438a      	bics	r2, r1
 8001298:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800129a:	2282      	movs	r2, #130	; 0x82
 800129c:	6861      	ldr	r1, [r4, #4]
 800129e:	0052      	lsls	r2, r2, #1
 80012a0:	4291      	cmp	r1, r2
 80012a2:	d03d      	beq.n	8001320 <SPI_EndRxTxTransaction+0x12c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012a8:	0189      	lsls	r1, r1, #6
 80012aa:	428a      	cmp	r2, r1
 80012ac:	d106      	bne.n	80012bc <SPI_EndRxTxTransaction+0xc8>
          SPI_RESET_CRC(hspi);
 80012ae:	6819      	ldr	r1, [r3, #0]
 80012b0:	4823      	ldr	r0, [pc, #140]	; (8001340 <SPI_EndRxTxTransaction+0x14c>)
 80012b2:	4001      	ands	r1, r0
 80012b4:	6019      	str	r1, [r3, #0]
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80012bc:	235d      	movs	r3, #93	; 0x5d
 80012be:	2201      	movs	r2, #1
 80012c0:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hspi);
 80012c2:	2200      	movs	r2, #0
 80012c4:	3b01      	subs	r3, #1
 80012c6:	54e2      	strb	r2, [r4, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80012c8:	2220      	movs	r2, #32
 80012ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80012cc:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80012ce:	4313      	orrs	r3, r2
 80012d0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80012d2:	e7d6      	b.n	8001282 <SPI_EndRxTxTransaction+0x8e>
  while ((hspi->Instance->SR & Fifo) != State)
 80012d4:	6893      	ldr	r3, [r2, #8]
 80012d6:	465a      	mov	r2, fp
 80012d8:	4213      	tst	r3, r2
 80012da:	d0b5      	beq.n	8001248 <SPI_EndRxTxTransaction+0x54>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80012dc:	f7ff fa7e 	bl	80007dc <HAL_GetTick>
 80012e0:	4643      	mov	r3, r8
 80012e2:	1ac0      	subs	r0, r0, r3
 80012e4:	42b0      	cmp	r0, r6
 80012e6:	d2d3      	bcs.n	8001290 <SPI_EndRxTxTransaction+0x9c>
      if (count == 0U)
 80012e8:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 80012ea:	1e5a      	subs	r2, r3, #1
 80012ec:	4193      	sbcs	r3, r2
 80012ee:	425b      	negs	r3, r3
 80012f0:	401e      	ands	r6, r3
      count--;
 80012f2:	9b02      	ldr	r3, [sp, #8]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	e79e      	b.n	8001238 <SPI_EndRxTxTransaction+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80012fa:	6893      	ldr	r3, [r2, #8]
 80012fc:	464a      	mov	r2, r9
 80012fe:	421a      	tst	r2, r3
 8001300:	d0b8      	beq.n	8001274 <SPI_EndRxTxTransaction+0x80>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001302:	f7ff fa6b 	bl	80007dc <HAL_GetTick>
 8001306:	4643      	mov	r3, r8
 8001308:	1ac0      	subs	r0, r0, r3
 800130a:	42b0      	cmp	r0, r6
 800130c:	d2c0      	bcs.n	8001290 <SPI_EndRxTxTransaction+0x9c>
      if (count == 0U)
 800130e:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8001310:	1e5a      	subs	r2, r3, #1
 8001312:	4193      	sbcs	r3, r2
 8001314:	425b      	negs	r3, r3
 8001316:	401e      	ands	r6, r3
      count--;
 8001318:	9b03      	ldr	r3, [sp, #12]
 800131a:	3b01      	subs	r3, #1
 800131c:	9303      	str	r3, [sp, #12]
 800131e:	e7a2      	b.n	8001266 <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	68a2      	ldr	r2, [r4, #8]
 8001324:	0209      	lsls	r1, r1, #8
 8001326:	428a      	cmp	r2, r1
 8001328:	d003      	beq.n	8001332 <SPI_EndRxTxTransaction+0x13e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	00c9      	lsls	r1, r1, #3
 800132e:	428a      	cmp	r2, r1
 8001330:	d1b8      	bne.n	80012a4 <SPI_EndRxTxTransaction+0xb0>
          __HAL_SPI_DISABLE(hspi);
 8001332:	2140      	movs	r1, #64	; 0x40
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	438a      	bics	r2, r1
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e7b3      	b.n	80012a4 <SPI_EndRxTxTransaction+0xb0>
 800133c:	20000004 	.word	0x20000004
 8001340:	ffffdfff 	.word	0xffffdfff

08001344 <HAL_SPI_Init>:
{
 8001344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001346:	46de      	mov	lr, fp
 8001348:	4657      	mov	r7, sl
 800134a:	464e      	mov	r6, r9
 800134c:	4645      	mov	r5, r8
 800134e:	0004      	movs	r4, r0
 8001350:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 8001352:	2800      	cmp	r0, #0
 8001354:	d100      	bne.n	8001358 <HAL_SPI_Init+0x14>
 8001356:	e094      	b.n	8001482 <HAL_SPI_Init+0x13e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001358:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800135a:	2d00      	cmp	r5, #0
 800135c:	d06b      	beq.n	8001436 <HAL_SPI_Init+0xf2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001362:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001368:	335d      	adds	r3, #93	; 0x5d
 800136a:	5ce3      	ldrb	r3, [r4, r3]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d06e      	beq.n	8001450 <HAL_SPI_Init+0x10c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001372:	235d      	movs	r3, #93	; 0x5d
 8001374:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8001376:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8001378:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 800137a:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800137c:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800137e:	6813      	ldr	r3, [r2, #0]
 8001380:	438b      	bics	r3, r1
 8001382:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001384:	23e0      	movs	r3, #224	; 0xe0
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4298      	cmp	r0, r3
 800138a:	d968      	bls.n	800145e <HAL_SPI_Init+0x11a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800138c:	23f0      	movs	r3, #240	; 0xf0
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4298      	cmp	r0, r3
 8001392:	d000      	beq.n	8001396 <HAL_SPI_Init+0x52>
 8001394:	e077      	b.n	8001486 <HAL_SPI_Init+0x142>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800139a:	019b      	lsls	r3, r3, #6
 800139c:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800139e:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013a0:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80013a2:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013a4:	2682      	movs	r6, #130	; 0x82
 80013a6:	2784      	movs	r7, #132	; 0x84
 80013a8:	6863      	ldr	r3, [r4, #4]
 80013aa:	0076      	lsls	r6, r6, #1
 80013ac:	4033      	ands	r3, r6
 80013ae:	68a6      	ldr	r6, [r4, #8]
 80013b0:	023f      	lsls	r7, r7, #8
 80013b2:	403e      	ands	r6, r7
 80013b4:	2702      	movs	r7, #2
 80013b6:	4333      	orrs	r3, r6
 80013b8:	6926      	ldr	r6, [r4, #16]
 80013ba:	69a1      	ldr	r1, [r4, #24]
 80013bc:	403e      	ands	r6, r7
 80013be:	4333      	orrs	r3, r6
 80013c0:	2601      	movs	r6, #1
 80013c2:	6967      	ldr	r7, [r4, #20]
 80013c4:	46b2      	mov	sl, r6
 80013c6:	4037      	ands	r7, r6
 80013c8:	433b      	orrs	r3, r7
 80013ca:	2780      	movs	r7, #128	; 0x80
 80013cc:	00bf      	lsls	r7, r7, #2
 80013ce:	400f      	ands	r7, r1
 80013d0:	433b      	orrs	r3, r7
 80013d2:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80013d4:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013d6:	46b8      	mov	r8, r7
 80013d8:	2738      	movs	r7, #56	; 0x38
 80013da:	46b9      	mov	r9, r7
 80013dc:	4647      	mov	r7, r8
 80013de:	464e      	mov	r6, r9
 80013e0:	4037      	ands	r7, r6
 80013e2:	6a26      	ldr	r6, [r4, #32]
 80013e4:	433b      	orrs	r3, r7
 80013e6:	46b0      	mov	r8, r6
 80013e8:	2680      	movs	r6, #128	; 0x80
 80013ea:	4647      	mov	r7, r8
 80013ec:	4037      	ands	r7, r6
 80013ee:	4666      	mov	r6, ip
 80013f0:	433b      	orrs	r3, r7
 80013f2:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80013f4:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013f6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80013f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013fa:	4033      	ands	r3, r6
 80013fc:	26f0      	movs	r6, #240	; 0xf0
 80013fe:	0136      	lsls	r6, r6, #4
 8001400:	4030      	ands	r0, r6
 8001402:	4303      	orrs	r3, r0
 8001404:	2004      	movs	r0, #4
 8001406:	4001      	ands	r1, r0
 8001408:	430b      	orrs	r3, r1
 800140a:	2110      	movs	r1, #16
 800140c:	4029      	ands	r1, r5
 800140e:	430b      	orrs	r3, r1
 8001410:	4659      	mov	r1, fp
 8001412:	430b      	orrs	r3, r1
 8001414:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001416:	69d3      	ldr	r3, [r2, #28]
 8001418:	491c      	ldr	r1, [pc, #112]	; (800148c <HAL_SPI_Init+0x148>)
  return HAL_OK;
 800141a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800141c:	400b      	ands	r3, r1
 800141e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001420:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001422:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001424:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001426:	335d      	adds	r3, #93	; 0x5d
 8001428:	54e2      	strb	r2, [r4, r3]
}
 800142a:	bcf0      	pop	{r4, r5, r6, r7}
 800142c:	46bb      	mov	fp, r7
 800142e:	46b2      	mov	sl, r6
 8001430:	46a9      	mov	r9, r5
 8001432:	46a0      	mov	r8, r4
 8001434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001436:	2382      	movs	r3, #130	; 0x82
 8001438:	6842      	ldr	r2, [r0, #4]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	429a      	cmp	r2, r3
 800143e:	d091      	beq.n	8001364 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001440:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001442:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001444:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001446:	335d      	adds	r3, #93	; 0x5d
 8001448:	5ce3      	ldrb	r3, [r4, r3]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d190      	bne.n	8001372 <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8001450:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001452:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001454:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8001456:	f7ff f915 	bl	8000684 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800145a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800145c:	e789      	b.n	8001372 <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800145e:	4298      	cmp	r0, r3
 8001460:	d006      	beq.n	8001470 <HAL_SPI_Init+0x12c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	015b      	lsls	r3, r3, #5
 8001466:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	469c      	mov	ip, r3
 800146c:	62a3      	str	r3, [r4, #40]	; 0x28
 800146e:	e799      	b.n	80013a4 <HAL_SPI_Init+0x60>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001474:	019b      	lsls	r3, r3, #6
 8001476:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800147c:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800147e:	469b      	mov	fp, r3
 8001480:	e790      	b.n	80013a4 <HAL_SPI_Init+0x60>
    return HAL_ERROR;
 8001482:	2001      	movs	r0, #1
 8001484:	e7d1      	b.n	800142a <HAL_SPI_Init+0xe6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001486:	2300      	movs	r3, #0
 8001488:	469b      	mov	fp, r3
 800148a:	e7ed      	b.n	8001468 <HAL_SPI_Init+0x124>
 800148c:	fffff7ff 	.word	0xfffff7ff

08001490 <HAL_SPI_Transmit>:
{
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	46ce      	mov	lr, r9
 8001494:	4647      	mov	r7, r8
 8001496:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8001498:	235c      	movs	r3, #92	; 0x5c
{
 800149a:	b580      	push	{r7, lr}
 800149c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 800149e:	5cc2      	ldrb	r2, [r0, r3]
{
 80014a0:	0004      	movs	r4, r0
 80014a2:	000d      	movs	r5, r1
 80014a4:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 80014a6:	2a01      	cmp	r2, #1
 80014a8:	d100      	bne.n	80014ac <HAL_SPI_Transmit+0x1c>
 80014aa:	e073      	b.n	8001594 <HAL_SPI_Transmit+0x104>
 80014ac:	2201      	movs	r2, #1
 80014ae:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80014b0:	f7ff f994 	bl	80007dc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80014b4:	225d      	movs	r2, #93	; 0x5d
 80014b6:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 80014b8:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80014ba:	b2df      	uxtb	r7, r3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d009      	beq.n	80014d4 <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 80014c0:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 80014c2:	235c      	movs	r3, #92	; 0x5c
 80014c4:	2200      	movs	r2, #0
 80014c6:	54e2      	strb	r2, [r4, r3]
}
 80014c8:	0038      	movs	r0, r7
 80014ca:	b003      	add	sp, #12
 80014cc:	bcc0      	pop	{r6, r7}
 80014ce:	46b9      	mov	r9, r7
 80014d0:	46b0      	mov	r8, r6
 80014d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 80014d4:	2d00      	cmp	r5, #0
 80014d6:	d0f4      	beq.n	80014c2 <HAL_SPI_Transmit+0x32>
 80014d8:	464b      	mov	r3, r9
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f1      	beq.n	80014c2 <HAL_SPI_Transmit+0x32>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80014de:	2303      	movs	r3, #3
 80014e0:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014e2:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 80014e4:	464a      	mov	r2, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014e6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 80014e8:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80014ea:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 80014ec:	2244      	movs	r2, #68	; 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80014ee:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80014f0:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80014f2:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 80014f4:	3202      	adds	r2, #2
 80014f6:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 80014f8:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80014fa:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8001500:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	429a      	cmp	r2, r3
 8001506:	d047      	beq.n	8001598 <HAL_SPI_Transmit+0x108>
    __HAL_SPI_DISABLE(hspi);
 8001508:	0002      	movs	r2, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800150a:	2340      	movs	r3, #64	; 0x40
 800150c:	6801      	ldr	r1, [r0, #0]
 800150e:	420b      	tst	r3, r1
 8001510:	d102      	bne.n	8001518 <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 8001512:	6801      	ldr	r1, [r0, #0]
 8001514:	430b      	orrs	r3, r1
 8001516:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001518:	23e0      	movs	r3, #224	; 0xe0
 800151a:	68e1      	ldr	r1, [r4, #12]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4299      	cmp	r1, r3
 8001520:	d96c      	bls.n	80015fc <HAL_SPI_Transmit+0x16c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001522:	6863      	ldr	r3, [r4, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d059      	beq.n	80015dc <HAL_SPI_Transmit+0x14c>
 8001528:	464b      	mov	r3, r9
 800152a:	2b01      	cmp	r3, #1
 800152c:	d056      	beq.n	80015dc <HAL_SPI_Transmit+0x14c>
    while (hspi->TxXferCount > 0U)
 800152e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001530:	2b00      	cmp	r3, #0
 8001532:	d014      	beq.n	800155e <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001534:	2502      	movs	r5, #2
 8001536:	1c73      	adds	r3, r6, #1
 8001538:	d146      	bne.n	80015c8 <HAL_SPI_Transmit+0x138>
 800153a:	2302      	movs	r3, #2
 800153c:	4699      	mov	r9, r3
 800153e:	464a      	mov	r2, r9
 8001540:	6883      	ldr	r3, [r0, #8]
 8001542:	421a      	tst	r2, r3
 8001544:	d053      	beq.n	80015ee <HAL_SPI_Transmit+0x15e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001546:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001548:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800154a:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800154c:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 800154e:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001550:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001552:	3d01      	subs	r5, #1
 8001554:	b2ad      	uxth	r5, r5
 8001556:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001558:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ef      	bne.n	800153e <HAL_SPI_Transmit+0xae>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800155e:	4642      	mov	r2, r8
 8001560:	0031      	movs	r1, r6
 8001562:	0020      	movs	r0, r4
 8001564:	f7ff fe46 	bl	80011f4 <SPI_EndRxTxTransaction>
 8001568:	2800      	cmp	r0, #0
 800156a:	d001      	beq.n	8001570 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800156c:	2320      	movs	r3, #32
 800156e:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001570:	68a3      	ldr	r3, [r4, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_SPI_Transmit+0xf4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	9201      	str	r2, [sp, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001584:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001586:	2b00      	cmp	r3, #0
 8001588:	d19b      	bne.n	80014c2 <HAL_SPI_Transmit+0x32>
    hspi->State = HAL_SPI_STATE_READY;
 800158a:	2201      	movs	r2, #1
 800158c:	335d      	adds	r3, #93	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 800158e:	2700      	movs	r7, #0
    hspi->State = HAL_SPI_STATE_READY;
 8001590:	54e2      	strb	r2, [r4, r3]
 8001592:	e796      	b.n	80014c2 <HAL_SPI_Transmit+0x32>
  __HAL_LOCK(hspi);
 8001594:	2702      	movs	r7, #2
 8001596:	e797      	b.n	80014c8 <HAL_SPI_Transmit+0x38>
    __HAL_SPI_DISABLE(hspi);
 8001598:	2140      	movs	r1, #64	; 0x40
 800159a:	6803      	ldr	r3, [r0, #0]
 800159c:	0002      	movs	r2, r0
 800159e:	438b      	bics	r3, r1
 80015a0:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	6801      	ldr	r1, [r0, #0]
 80015a6:	01db      	lsls	r3, r3, #7
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6003      	str	r3, [r0, #0]
 80015ac:	e7ad      	b.n	800150a <HAL_SPI_Transmit+0x7a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015b0:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015b2:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015b4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015b6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80015b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015ba:	3b01      	subs	r3, #1
 80015bc:	b29b      	uxth	r3, r3
 80015be:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80015c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0cb      	beq.n	800155e <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80015c6:	6822      	ldr	r2, [r4, #0]
 80015c8:	6893      	ldr	r3, [r2, #8]
 80015ca:	421d      	tst	r5, r3
 80015cc:	d1ef      	bne.n	80015ae <HAL_SPI_Transmit+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80015ce:	f7ff f905 	bl	80007dc <HAL_GetTick>
 80015d2:	4643      	mov	r3, r8
 80015d4:	1ac0      	subs	r0, r0, r3
 80015d6:	42b0      	cmp	r0, r6
 80015d8:	d3f2      	bcc.n	80015c0 <HAL_SPI_Transmit+0x130>
 80015da:	e052      	b.n	8001682 <HAL_SPI_Transmit+0x1f2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015dc:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80015de:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015e0:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80015e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80015e4:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80015ec:	e79f      	b.n	800152e <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80015ee:	f7ff f8f5 	bl	80007dc <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80015f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0b2      	beq.n	800155e <HAL_SPI_Transmit+0xce>
 80015f8:	6820      	ldr	r0, [r4, #0]
 80015fa:	e7a0      	b.n	800153e <HAL_SPI_Transmit+0xae>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015fc:	6863      	ldr	r3, [r4, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d044      	beq.n	800168c <HAL_SPI_Transmit+0x1fc>
 8001602:	464b      	mov	r3, r9
 8001604:	2b01      	cmp	r3, #1
 8001606:	d041      	beq.n	800168c <HAL_SPI_Transmit+0x1fc>
    while (hspi->TxXferCount > 0U)
 8001608:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0a7      	beq.n	800155e <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800160e:	2502      	movs	r5, #2
 8001610:	1c73      	adds	r3, r6, #1
 8001612:	d12c      	bne.n	800166e <HAL_SPI_Transmit+0x1de>
 8001614:	2302      	movs	r3, #2
 8001616:	4699      	mov	r9, r3
 8001618:	4649      	mov	r1, r9
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	4211      	tst	r1, r2
 8001620:	d011      	beq.n	8001646 <HAL_SPI_Transmit+0x1b6>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001622:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001628:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800162a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800162c:	3d01      	subs	r5, #1
 800162e:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001630:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8001632:	87e5      	strh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001634:	63a3      	str	r3, [r4, #56]	; 0x38
    while (hspi->TxXferCount > 0U)
 8001636:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001638:	2b00      	cmp	r3, #0
 800163a:	d090      	beq.n	800155e <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800163c:	4649      	mov	r1, r9
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	4211      	tst	r1, r2
 8001644:	d1ed      	bne.n	8001622 <HAL_SPI_Transmit+0x192>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001646:	f7ff f8c9 	bl	80007dc <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800164a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e3      	bne.n	8001618 <HAL_SPI_Transmit+0x188>
 8001650:	e785      	b.n	800155e <HAL_SPI_Transmit+0xce>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001652:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800165a:	3301      	adds	r3, #1
 800165c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800165e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001660:	3b01      	subs	r3, #1
 8001662:	b29b      	uxth	r3, r3
 8001664:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001666:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001668:	2b00      	cmp	r3, #0
 800166a:	d100      	bne.n	800166e <HAL_SPI_Transmit+0x1de>
 800166c:	e777      	b.n	800155e <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	4215      	tst	r5, r2
 8001674:	d1ed      	bne.n	8001652 <HAL_SPI_Transmit+0x1c2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001676:	f7ff f8b1 	bl	80007dc <HAL_GetTick>
 800167a:	4643      	mov	r3, r8
 800167c:	1ac0      	subs	r0, r0, r3
 800167e:	42b0      	cmp	r0, r6
 8001680:	d3f1      	bcc.n	8001666 <HAL_SPI_Transmit+0x1d6>
          hspi->State = HAL_SPI_STATE_READY;
 8001682:	235d      	movs	r3, #93	; 0x5d
 8001684:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8001686:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8001688:	54e2      	strb	r2, [r4, r3]
          goto error;
 800168a:	e71a      	b.n	80014c2 <HAL_SPI_Transmit+0x32>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800168c:	782b      	ldrb	r3, [r5, #0]
 800168e:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001690:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001692:	3301      	adds	r3, #1
 8001694:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001696:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001698:	3b01      	subs	r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800169e:	e7b3      	b.n	8001608 <HAL_SPI_Transmit+0x178>

080016a0 <memset>:
 80016a0:	0003      	movs	r3, r0
 80016a2:	1882      	adds	r2, r0, r2
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d100      	bne.n	80016aa <memset+0xa>
 80016a8:	4770      	bx	lr
 80016aa:	7019      	strb	r1, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	e7f9      	b.n	80016a4 <memset+0x4>

080016b0 <__libc_init_array>:
 80016b0:	b570      	push	{r4, r5, r6, lr}
 80016b2:	2600      	movs	r6, #0
 80016b4:	4c0c      	ldr	r4, [pc, #48]	; (80016e8 <__libc_init_array+0x38>)
 80016b6:	4d0d      	ldr	r5, [pc, #52]	; (80016ec <__libc_init_array+0x3c>)
 80016b8:	1b64      	subs	r4, r4, r5
 80016ba:	10a4      	asrs	r4, r4, #2
 80016bc:	42a6      	cmp	r6, r4
 80016be:	d109      	bne.n	80016d4 <__libc_init_array+0x24>
 80016c0:	2600      	movs	r6, #0
 80016c2:	f000 f819 	bl	80016f8 <_init>
 80016c6:	4c0a      	ldr	r4, [pc, #40]	; (80016f0 <__libc_init_array+0x40>)
 80016c8:	4d0a      	ldr	r5, [pc, #40]	; (80016f4 <__libc_init_array+0x44>)
 80016ca:	1b64      	subs	r4, r4, r5
 80016cc:	10a4      	asrs	r4, r4, #2
 80016ce:	42a6      	cmp	r6, r4
 80016d0:	d105      	bne.n	80016de <__libc_init_array+0x2e>
 80016d2:	bd70      	pop	{r4, r5, r6, pc}
 80016d4:	00b3      	lsls	r3, r6, #2
 80016d6:	58eb      	ldr	r3, [r5, r3]
 80016d8:	4798      	blx	r3
 80016da:	3601      	adds	r6, #1
 80016dc:	e7ee      	b.n	80016bc <__libc_init_array+0xc>
 80016de:	00b3      	lsls	r3, r6, #2
 80016e0:	58eb      	ldr	r3, [r5, r3]
 80016e2:	4798      	blx	r3
 80016e4:	3601      	adds	r6, #1
 80016e6:	e7f2      	b.n	80016ce <__libc_init_array+0x1e>
 80016e8:	08001740 	.word	0x08001740
 80016ec:	08001740 	.word	0x08001740
 80016f0:	08001744 	.word	0x08001744
 80016f4:	08001740 	.word	0x08001740

080016f8 <_init>:
 80016f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016fe:	bc08      	pop	{r3}
 8001700:	469e      	mov	lr, r3
 8001702:	4770      	bx	lr

08001704 <_fini>:
 8001704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170a:	bc08      	pop	{r3}
 800170c:	469e      	mov	lr, r3
 800170e:	4770      	bx	lr
