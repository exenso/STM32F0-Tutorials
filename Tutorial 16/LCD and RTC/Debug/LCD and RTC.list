
LCD and RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002464  08002464  00012464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b0  080024b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024b0  080024b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024b0  080024b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  080024c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080024c4  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000142fb  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002510  00000000  00000000  00034372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000dc6f  00000000  00000000  00036882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009a8  00000000  00000000  000444f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016c6  00000000  00000000  00044ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000fee2  00000000  00000000  00046566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018a78  00000000  00000000  00056448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0006091f  00000000  00000000  0006eec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002018  00000000  00000000  000cf7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000d17f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800244c 	.word	0x0800244c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800244c 	.word	0x0800244c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <send_to_lcd.constprop.0>:
/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80003f4:	2090      	movs	r0, #144	; 0x90
void send_to_lcd (char data, int rs)
 80003f6:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80003f8:	2200      	movs	r2, #0
 80003fa:	2101      	movs	r1, #1
 80003fc:	05c0      	lsls	r0, r0, #23
 80003fe:	f000 fda1 	bl	8000f44 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000402:	2090      	movs	r0, #144	; 0x90
 8000404:	2200      	movs	r2, #0
 8000406:	2140      	movs	r1, #64	; 0x40
 8000408:	05c0      	lsls	r0, r0, #23
 800040a:	f000 fd9b 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 800040e:	2090      	movs	r0, #144	; 0x90
 8000410:	2200      	movs	r2, #0
 8000412:	2120      	movs	r1, #32
 8000414:	05c0      	lsls	r0, r0, #23
 8000416:	f000 fd95 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800041a:	2090      	movs	r0, #144	; 0x90
 800041c:	2200      	movs	r2, #0
 800041e:	2110      	movs	r1, #16
 8000420:	05c0      	lsls	r0, r0, #23
 8000422:	f000 fd8f 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000426:	2090      	movs	r0, #144	; 0x90
 8000428:	2200      	movs	r2, #0
 800042a:	2108      	movs	r1, #8
 800042c:	05c0      	lsls	r0, r0, #23
 800042e:	f000 fd89 	bl	8000f44 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000432:	2090      	movs	r0, #144	; 0x90
 8000434:	2201      	movs	r2, #1
 8000436:	2104      	movs	r1, #4
 8000438:	05c0      	lsls	r0, r0, #23
 800043a:	f000 fd83 	bl	8000f44 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800043e:	2300      	movs	r3, #0
 8000440:	4c09      	ldr	r4, [pc, #36]	; (8000468 <send_to_lcd.constprop.0+0x74>)
 8000442:	6822      	ldr	r2, [r4, #0]
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000446:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000448:	2b13      	cmp	r3, #19
 800044a:	d9fc      	bls.n	8000446 <send_to_lcd.constprop.0+0x52>
	delay (20);
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800044c:	2090      	movs	r0, #144	; 0x90
 800044e:	2200      	movs	r2, #0
 8000450:	2104      	movs	r1, #4
 8000452:	05c0      	lsls	r0, r0, #23
 8000454:	f000 fd76 	bl	8000f44 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000458:	2300      	movs	r3, #0
 800045a:	6822      	ldr	r2, [r4, #0]
 800045c:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800045e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000460:	2b13      	cmp	r3, #19
 8000462:	d9fc      	bls.n	800045e <send_to_lcd.constprop.0+0x6a>
	delay (20);
}
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	2000007c 	.word	0x2000007c

0800046c <send_to_lcd.constprop.1>:
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 800046c:	2090      	movs	r0, #144	; 0x90
void send_to_lcd (char data, int rs)
 800046e:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000470:	2200      	movs	r2, #0
 8000472:	2101      	movs	r1, #1
 8000474:	05c0      	lsls	r0, r0, #23
 8000476:	f000 fd65 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800047a:	2090      	movs	r0, #144	; 0x90
 800047c:	2200      	movs	r2, #0
 800047e:	2140      	movs	r1, #64	; 0x40
 8000480:	05c0      	lsls	r0, r0, #23
 8000482:	f000 fd5f 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000486:	2090      	movs	r0, #144	; 0x90
 8000488:	2200      	movs	r2, #0
 800048a:	2120      	movs	r1, #32
 800048c:	05c0      	lsls	r0, r0, #23
 800048e:	f000 fd59 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000492:	2090      	movs	r0, #144	; 0x90
 8000494:	2201      	movs	r2, #1
 8000496:	2110      	movs	r1, #16
 8000498:	05c0      	lsls	r0, r0, #23
 800049a:	f000 fd53 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 800049e:	2090      	movs	r0, #144	; 0x90
 80004a0:	2201      	movs	r2, #1
 80004a2:	2108      	movs	r1, #8
 80004a4:	05c0      	lsls	r0, r0, #23
 80004a6:	f000 fd4d 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80004aa:	2090      	movs	r0, #144	; 0x90
 80004ac:	2201      	movs	r2, #1
 80004ae:	2104      	movs	r1, #4
 80004b0:	05c0      	lsls	r0, r0, #23
 80004b2:	f000 fd47 	bl	8000f44 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80004b6:	2300      	movs	r3, #0
 80004b8:	4c09      	ldr	r4, [pc, #36]	; (80004e0 <send_to_lcd.constprop.1+0x74>)
 80004ba:	6822      	ldr	r2, [r4, #0]
 80004bc:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80004be:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80004c0:	2b13      	cmp	r3, #19
 80004c2:	d9fc      	bls.n	80004be <send_to_lcd.constprop.1+0x52>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80004c4:	2090      	movs	r0, #144	; 0x90
 80004c6:	2200      	movs	r2, #0
 80004c8:	2104      	movs	r1, #4
 80004ca:	05c0      	lsls	r0, r0, #23
 80004cc:	f000 fd3a 	bl	8000f44 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80004d0:	2300      	movs	r3, #0
 80004d2:	6822      	ldr	r2, [r4, #0]
 80004d4:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80004d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80004d8:	2b13      	cmp	r3, #19
 80004da:	d9fc      	bls.n	80004d6 <send_to_lcd.constprop.1+0x6a>
}
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	2000007c 	.word	0x2000007c

080004e4 <send_to_lcd>:
{
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80004e8:	2090      	movs	r0, #144	; 0x90
 80004ea:	b2ca      	uxtb	r2, r1
 80004ec:	05c0      	lsls	r0, r0, #23
 80004ee:	2101      	movs	r1, #1
 80004f0:	f000 fd28 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80004f4:	2401      	movs	r4, #1
 80004f6:	2090      	movs	r0, #144	; 0x90
 80004f8:	08ea      	lsrs	r2, r5, #3
 80004fa:	4022      	ands	r2, r4
 80004fc:	2140      	movs	r1, #64	; 0x40
 80004fe:	05c0      	lsls	r0, r0, #23
 8000500:	f000 fd20 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000504:	2090      	movs	r0, #144	; 0x90
 8000506:	08aa      	lsrs	r2, r5, #2
 8000508:	4022      	ands	r2, r4
 800050a:	2120      	movs	r1, #32
 800050c:	05c0      	lsls	r0, r0, #23
 800050e:	f000 fd19 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000512:	2090      	movs	r0, #144	; 0x90
 8000514:	086a      	lsrs	r2, r5, #1
 8000516:	4022      	ands	r2, r4
 8000518:	2110      	movs	r1, #16
 800051a:	05c0      	lsls	r0, r0, #23
 800051c:	f000 fd12 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000520:	0022      	movs	r2, r4
 8000522:	2090      	movs	r0, #144	; 0x90
 8000524:	2108      	movs	r1, #8
 8000526:	402a      	ands	r2, r5
 8000528:	05c0      	lsls	r0, r0, #23
 800052a:	f000 fd0b 	bl	8000f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 800052e:	2090      	movs	r0, #144	; 0x90
 8000530:	2201      	movs	r2, #1
 8000532:	2104      	movs	r1, #4
 8000534:	05c0      	lsls	r0, r0, #23
 8000536:	f000 fd05 	bl	8000f44 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800053a:	2300      	movs	r3, #0
 800053c:	4c09      	ldr	r4, [pc, #36]	; (8000564 <send_to_lcd+0x80>)
 800053e:	6822      	ldr	r2, [r4, #0]
 8000540:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000542:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000544:	2b13      	cmp	r3, #19
 8000546:	d9fc      	bls.n	8000542 <send_to_lcd+0x5e>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000548:	2090      	movs	r0, #144	; 0x90
 800054a:	2200      	movs	r2, #0
 800054c:	2104      	movs	r1, #4
 800054e:	05c0      	lsls	r0, r0, #23
 8000550:	f000 fcf8 	bl	8000f44 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000554:	2300      	movs	r3, #0
 8000556:	6822      	ldr	r2, [r4, #0]
 8000558:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800055a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800055c:	2b13      	cmp	r3, #19
 800055e:	d9fc      	bls.n	800055a <send_to_lcd+0x76>
}
 8000560:	bd70      	pop	{r4, r5, r6, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	2000007c 	.word	0x2000007c

08000568 <lcd_xy>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_xy(int row, int col)
{
 8000568:	b510      	push	{r4, lr}
    switch (row)
 800056a:	2800      	cmp	r0, #0
 800056c:	d00e      	beq.n	800058c <lcd_xy+0x24>
 800056e:	2801      	cmp	r0, #1
 8000570:	d101      	bne.n	8000576 <lcd_xy+0xe>
    {
        case 0:
            col |= 0x80;
            break;
        case 1:
            col |= 0xC0;
 8000572:	23c0      	movs	r3, #192	; 0xc0
 8000574:	4319      	orrs	r1, r3
            break;
    }

    lcd_send_cmd (col);
 8000576:	b2cc      	uxtb	r4, r1
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000578:	0920      	lsrs	r0, r4, #4
 800057a:	2100      	movs	r1, #0
 800057c:	f7ff ffb2 	bl	80004e4 <send_to_lcd>
	send_to_lcd(datatosend, 0);
 8000580:	200f      	movs	r0, #15
 8000582:	2100      	movs	r1, #0
 8000584:	4020      	ands	r0, r4
 8000586:	f7ff ffad 	bl	80004e4 <send_to_lcd>
}
 800058a:	bd10      	pop	{r4, pc}
            col |= 0x80;
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	4319      	orrs	r1, r3
            break;
 8000590:	e7f1      	b.n	8000576 <lcd_xy+0xe>
 8000592:	46c0      	nop			; (mov r8, r8)

08000594 <lcd_init>:


void lcd_init (void)
{
 8000594:	b510      	push	{r4, lr}
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000596:	2032      	movs	r0, #50	; 0x32
 8000598:	f000 fb6a 	bl	8000c70 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 800059c:	f7ff ff66 	bl	800046c <send_to_lcd.constprop.1>
	send_to_lcd(datatosend, 0);
 80005a0:	f7ff ff28 	bl	80003f4 <send_to_lcd.constprop.0>
	lcd_send_cmd (0x30);
	HAL_Delay(5);  // wait for >4.1ms
 80005a4:	2005      	movs	r0, #5
 80005a6:	f000 fb63 	bl	8000c70 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005aa:	f7ff ff5f 	bl	800046c <send_to_lcd.constprop.1>
	send_to_lcd(datatosend, 0);
 80005ae:	f7ff ff21 	bl	80003f4 <send_to_lcd.constprop.0>
	lcd_send_cmd (0x30);
	HAL_Delay(1);  // wait for >100us
 80005b2:	2001      	movs	r0, #1
 80005b4:	f000 fb5c 	bl	8000c70 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005b8:	f7ff ff58 	bl	800046c <send_to_lcd.constprop.1>
	send_to_lcd(datatosend, 0);
 80005bc:	f7ff ff1a 	bl	80003f4 <send_to_lcd.constprop.0>
	lcd_send_cmd (0x30);
	HAL_Delay(10);
 80005c0:	200a      	movs	r0, #10
 80005c2:	f000 fb55 	bl	8000c70 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005c6:	2100      	movs	r1, #0
 80005c8:	2002      	movs	r0, #2
 80005ca:	f7ff ff8b 	bl	80004e4 <send_to_lcd>
	send_to_lcd(datatosend, 0);
 80005ce:	f7ff ff11 	bl	80003f4 <send_to_lcd.constprop.0>
	lcd_send_cmd (0x20);  // 4bit mode
	HAL_Delay(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f000 fb4c 	bl	8000c70 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005d8:	2100      	movs	r1, #0
 80005da:	2002      	movs	r0, #2
 80005dc:	f7ff ff82 	bl	80004e4 <send_to_lcd>
	send_to_lcd(datatosend, 0);
 80005e0:	2100      	movs	r1, #0
 80005e2:	2008      	movs	r0, #8
 80005e4:	f7ff ff7e 	bl	80004e4 <send_to_lcd>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 fb41 	bl	8000c70 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005ee:	f7ff ff01 	bl	80003f4 <send_to_lcd.constprop.0>
	send_to_lcd(datatosend, 0);
 80005f2:	2100      	movs	r1, #0
 80005f4:	2008      	movs	r0, #8
 80005f6:	f7ff ff75 	bl	80004e4 <send_to_lcd>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
	HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 fb38 	bl	8000c70 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000600:	f7ff fef8 	bl	80003f4 <send_to_lcd.constprop.0>
	send_to_lcd(datatosend, 0);
 8000604:	2100      	movs	r1, #0
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff ff6c 	bl	80004e4 <send_to_lcd>
	lcd_send_cmd (0x01);  // clear display
	HAL_Delay(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f000 fb2f 	bl	8000c70 <HAL_Delay>
	HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 fb2c 	bl	8000c70 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000618:	f7ff feec 	bl	80003f4 <send_to_lcd.constprop.0>
	send_to_lcd(datatosend, 0);
 800061c:	2100      	movs	r1, #0
 800061e:	2006      	movs	r0, #6
 8000620:	f7ff ff60 	bl	80004e4 <send_to_lcd>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f000 fb23 	bl	8000c70 <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 800062a:	f7ff fee3 	bl	80003f4 <send_to_lcd.constprop.0>
	send_to_lcd(datatosend, 0);
 800062e:	2100      	movs	r1, #0
 8000630:	200c      	movs	r0, #12
 8000632:	f7ff ff57 	bl	80004e4 <send_to_lcd>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}
 8000636:	bd10      	pop	{r4, pc}

08000638 <LCD_String>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**************** Below Function Send String ,Int and Float to LCD*************************************** */

void LCD_String (char *str)
{
 8000638:	b570      	push	{r4, r5, r6, lr}
	while (*str) lcd_send_data (*str++);
 800063a:	7804      	ldrb	r4, [r0, #0]
{
 800063c:	0005      	movs	r5, r0
	while (*str) lcd_send_data (*str++);
 800063e:	2c00      	cmp	r4, #0
 8000640:	d00d      	beq.n	800065e <LCD_String+0x26>
	datatosend = ((data)&0x0f);
 8000642:	260f      	movs	r6, #15
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000644:	0920      	lsrs	r0, r4, #4
 8000646:	2101      	movs	r1, #1
 8000648:	f7ff ff4c 	bl	80004e4 <send_to_lcd>
	send_to_lcd(datatosend, 1);
 800064c:	0020      	movs	r0, r4
 800064e:	2101      	movs	r1, #1
	while (*str) lcd_send_data (*str++);
 8000650:	3501      	adds	r5, #1
	send_to_lcd(datatosend, 1);
 8000652:	4030      	ands	r0, r6
 8000654:	f7ff ff46 	bl	80004e4 <send_to_lcd>
	while (*str) lcd_send_data (*str++);
 8000658:	782c      	ldrb	r4, [r5, #0]
 800065a:	2c00      	cmp	r4, #0
 800065c:	d1f2      	bne.n	8000644 <LCD_String+0xc>
}
 800065e:	bd70      	pop	{r4, r5, r6, pc}

08000660 <Get_Time>:


void Get_Time (void)
{
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&RTC_I2C, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000660:	23fa      	movs	r3, #250	; 0xfa
{
 8000662:	b530      	push	{r4, r5, lr}
	HAL_I2C_Mem_Read(&RTC_I2C, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000664:	009b      	lsls	r3, r3, #2
{
 8000666:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(&RTC_I2C, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000668:	9302      	str	r3, [sp, #8]
 800066a:	2307      	movs	r3, #7
 800066c:	ac04      	add	r4, sp, #16
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	9400      	str	r4, [sp, #0]
 8000672:	2200      	movs	r2, #0
 8000674:	21d0      	movs	r1, #208	; 0xd0
 8000676:	3b06      	subs	r3, #6
 8000678:	481f      	ldr	r0, [pc, #124]	; (80006f8 <Get_Time+0x98>)
 800067a:	f000 ffcf 	bl	800161c <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 800067e:	7820      	ldrb	r0, [r4, #0]
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <Get_Time+0x9c>)
  return (int)( (val/16*10) + (val%16) );
 8000682:	0902      	lsrs	r2, r0, #4
 8000684:	0091      	lsls	r1, r2, #2
 8000686:	1889      	adds	r1, r1, r2
 8000688:	220f      	movs	r2, #15
 800068a:	0049      	lsls	r1, r1, #1
 800068c:	4010      	ands	r0, r2
 800068e:	1809      	adds	r1, r1, r0
	time.seconds = bcdToDec(get_time[0]);
 8000690:	7019      	strb	r1, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000692:	7860      	ldrb	r0, [r4, #1]
  return (int)( (val/16*10) + (val%16) );
 8000694:	0905      	lsrs	r5, r0, #4
 8000696:	00a9      	lsls	r1, r5, #2
 8000698:	1949      	adds	r1, r1, r5
 800069a:	4010      	ands	r0, r2
 800069c:	0049      	lsls	r1, r1, #1
 800069e:	1809      	adds	r1, r1, r0
	time.minutes = bcdToDec(get_time[1]);
 80006a0:	7059      	strb	r1, [r3, #1]
	time.hour =   bcdToDec(get_time[2]);
 80006a2:	78a0      	ldrb	r0, [r4, #2]
  return (int)( (val/16*10) + (val%16) );
 80006a4:	0905      	lsrs	r5, r0, #4
 80006a6:	00a9      	lsls	r1, r5, #2
 80006a8:	1949      	adds	r1, r1, r5
 80006aa:	4010      	ands	r0, r2
 80006ac:	0049      	lsls	r1, r1, #1
 80006ae:	1809      	adds	r1, r1, r0
	time.hour =   bcdToDec(get_time[2]);
 80006b0:	7099      	strb	r1, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80006b2:	78e0      	ldrb	r0, [r4, #3]
  return (int)( (val/16*10) + (val%16) );
 80006b4:	0905      	lsrs	r5, r0, #4
 80006b6:	00a9      	lsls	r1, r5, #2
 80006b8:	1949      	adds	r1, r1, r5
 80006ba:	4010      	ands	r0, r2
 80006bc:	0049      	lsls	r1, r1, #1
 80006be:	1809      	adds	r1, r1, r0
	time.dayofweek = bcdToDec(get_time[3]);
 80006c0:	70d9      	strb	r1, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80006c2:	7920      	ldrb	r0, [r4, #4]
  return (int)( (val/16*10) + (val%16) );
 80006c4:	0905      	lsrs	r5, r0, #4
 80006c6:	00a9      	lsls	r1, r5, #2
 80006c8:	1949      	adds	r1, r1, r5
 80006ca:	4010      	ands	r0, r2
 80006cc:	0049      	lsls	r1, r1, #1
 80006ce:	1809      	adds	r1, r1, r0
	time.dayofmonth = bcdToDec(get_time[4]);
 80006d0:	7119      	strb	r1, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80006d2:	7960      	ldrb	r0, [r4, #5]
  return (int)( (val/16*10) + (val%16) );
 80006d4:	0905      	lsrs	r5, r0, #4
 80006d6:	00a9      	lsls	r1, r5, #2
 80006d8:	1949      	adds	r1, r1, r5
 80006da:	4010      	ands	r0, r2
 80006dc:	0049      	lsls	r1, r1, #1
 80006de:	1809      	adds	r1, r1, r0
	time.month = bcdToDec(get_time[5]);
 80006e0:	7159      	strb	r1, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80006e2:	79a0      	ldrb	r0, [r4, #6]
  return (int)( (val/16*10) + (val%16) );
 80006e4:	0904      	lsrs	r4, r0, #4
 80006e6:	00a1      	lsls	r1, r4, #2
 80006e8:	1909      	adds	r1, r1, r4
 80006ea:	0049      	lsls	r1, r1, #1
 80006ec:	4002      	ands	r2, r0
 80006ee:	188a      	adds	r2, r1, r2
	time.year = bcdToDec(get_time[6]);
 80006f0:	719a      	strb	r2, [r3, #6]
}
 80006f2:	b007      	add	sp, #28
 80006f4:	bd30      	pop	{r4, r5, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	20000028 	.word	0x20000028
 80006fc:	200000c4 	.word	0x200000c4

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b500      	push	{lr}
 8000702:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000704:	2228      	movs	r2, #40	; 0x28
 8000706:	2100      	movs	r1, #0
 8000708:	a80a      	add	r0, sp, #40	; 0x28
 800070a:	f001 fe73 	bl	80023f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070e:	2210      	movs	r2, #16
 8000710:	2100      	movs	r1, #0
 8000712:	4668      	mov	r0, sp
 8000714:	f001 fe6e 	bl	80023f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000718:	2210      	movs	r2, #16
 800071a:	2100      	movs	r1, #0
 800071c:	a804      	add	r0, sp, #16
 800071e:	f001 fe69 	bl	80023f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000722:	2203      	movs	r2, #3
 8000724:	2301      	movs	r3, #1
 8000726:	9208      	str	r2, [sp, #32]
 8000728:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072a:	2301      	movs	r3, #1
 800072c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072e:	330f      	adds	r3, #15
 8000730:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	2202      	movs	r2, #2
 8000736:	025b      	lsls	r3, r3, #9
 8000738:	9210      	str	r2, [sp, #64]	; 0x40
 800073a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800073c:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000740:	02db      	lsls	r3, r3, #11
 8000742:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f001 f92c 	bl	80019a0 <HAL_RCC_OscConfig>
 8000748:	2800      	cmp	r0, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074e:	e7fe      	b.n	800074e <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	3b05      	subs	r3, #5
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075a:	2101      	movs	r1, #1
 800075c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000760:	f001 fb78 	bl	8001e54 <HAL_RCC_ClockConfig>
 8000764:	2800      	cmp	r0, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x6c>
 8000768:	b672      	cpsid	i
  while (1)
 800076a:	e7fe      	b.n	800076a <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800076c:	2320      	movs	r3, #32
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800076e:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000770:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000772:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000774:	f001 fc2a 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 8000778:	2800      	cmp	r0, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x80>
 800077c:	b672      	cpsid	i
  while (1)
 800077e:	e7fe      	b.n	800077e <SystemClock_Config+0x7e>
}
 8000780:	b015      	add	sp, #84	; 0x54
 8000782:	bd00      	pop	{pc}

08000784 <main>:
{
 8000784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000786:	46de      	mov	lr, fp
 8000788:	4657      	mov	r7, sl
 800078a:	464e      	mov	r6, r9
 800078c:	4645      	mov	r5, r8
 800078e:	b5e0      	push	{r5, r6, r7, lr}
 8000790:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	ac0b      	add	r4, sp, #44	; 0x2c
  HAL_Init();
 8000794:	f000 fa4a 	bl	8000c2c <HAL_Init>
  SystemClock_Config();
 8000798:	f7ff ffb2 	bl	8000700 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	2214      	movs	r2, #20
 800079e:	2100      	movs	r1, #0
 80007a0:	0020      	movs	r0, r4
 80007a2:	f001 fe27 	bl	80023f4 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	4bb1      	ldr	r3, [pc, #708]	; (8000a70 <main+0x2ec>)
 80007aa:	03c9      	lsls	r1, r1, #15
 80007ac:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80007ae:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b0:	430a      	orrs	r2, r1
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80007b6:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b8:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007bc:	9207      	str	r2, [sp, #28]
 80007be:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	695a      	ldr	r2, [r3, #20]
 80007c2:	0289      	lsls	r1, r1, #10
 80007c4:	430a      	orrs	r2, r1
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80007ca:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	400b      	ands	r3, r1
 80007ce:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80007d0:	217f      	movs	r1, #127	; 0x7f
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80007d4:	f000 fbb6 	bl	8000f44 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80007dc:	237f      	movs	r3, #127	; 0x7f
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	05c0      	lsls	r0, r0, #23
 80007e2:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80007e4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	6067      	str	r7, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	60e6      	str	r6, [r4, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f000 fa9e 	bl	8000d2c <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80007f0:	4da0      	ldr	r5, [pc, #640]	; (8000a74 <main+0x2f0>)
 80007f2:	4ba1      	ldr	r3, [pc, #644]	; (8000a78 <main+0x2f4>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f4:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 80007f6:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80007f8:	4ba0      	ldr	r3, [pc, #640]	; (8000a7c <main+0x2f8>)
  hi2c1.Init.OwnAddress1 = 0;
 80007fa:	60ae      	str	r6, [r5, #8]
  hi2c1.Init.Timing = 0x2000090E;
 80007fc:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fe:	60ef      	str	r7, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	612e      	str	r6, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000802:	616e      	str	r6, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	61ae      	str	r6, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000806:	61ee      	str	r6, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000808:	622e      	str	r6, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080a:	f000 fd5b 	bl	80012c4 <HAL_I2C_Init>
 800080e:	2800      	cmp	r0, #0
 8000810:	d001      	beq.n	8000816 <main+0x92>
 8000812:	b672      	cpsid	i
  while (1)
 8000814:	e7fe      	b.n	8000814 <main+0x90>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	0028      	movs	r0, r5
 800081a:	f001 f86d 	bl	80018f8 <HAL_I2CEx_ConfigAnalogFilter>
 800081e:	1e01      	subs	r1, r0, #0
 8000820:	d001      	beq.n	8000826 <main+0xa2>
 8000822:	b672      	cpsid	i
  while (1)
 8000824:	e7fe      	b.n	8000824 <main+0xa0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000826:	0028      	movs	r0, r5
 8000828:	f001 f88c 	bl	8001944 <HAL_I2CEx_ConfigDigitalFilter>
 800082c:	1e07      	subs	r7, r0, #0
 800082e:	d001      	beq.n	8000834 <main+0xb0>
 8000830:	b672      	cpsid	i
  while (1)
 8000832:	e7fe      	b.n	8000832 <main+0xae>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000834:	0001      	movs	r1, r0
 8000836:	2210      	movs	r2, #16
 8000838:	0020      	movs	r0, r4
 800083a:	f001 fddb 	bl	80023f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083e:	2208      	movs	r2, #8
 8000840:	0039      	movs	r1, r7
 8000842:	a809      	add	r0, sp, #36	; 0x24
 8000844:	f001 fdd6 	bl	80023f4 <memset>
  htim1.Instance = TIM1;
 8000848:	4e8d      	ldr	r6, [pc, #564]	; (8000a80 <main+0x2fc>)
 800084a:	4b8e      	ldr	r3, [pc, #568]	; (8000a84 <main+0x300>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800084c:	0030      	movs	r0, r6
  htim1.Instance = TIM1;
 800084e:	6033      	str	r3, [r6, #0]
  htim1.Init.Prescaler = 48-1;
 8000850:	232f      	movs	r3, #47	; 0x2f
 8000852:	6073      	str	r3, [r6, #4]
  htim1.Init.Period = 65535;
 8000854:	4b8c      	ldr	r3, [pc, #560]	; (8000a88 <main+0x304>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	60b7      	str	r7, [r6, #8]
  htim1.Init.Period = 65535;
 8000858:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085a:	6137      	str	r7, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 800085c:	6177      	str	r7, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	61b7      	str	r7, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000860:	f001 fc52 	bl	8002108 <HAL_TIM_Base_Init>
 8000864:	2800      	cmp	r0, #0
 8000866:	d001      	beq.n	800086c <main+0xe8>
 8000868:	b672      	cpsid	i
  while (1)
 800086a:	e7fe      	b.n	800086a <main+0xe6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086c:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800086e:	0021      	movs	r1, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000870:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000872:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000876:	f001 fcdb 	bl	8002230 <HAL_TIM_ConfigClockSource>
 800087a:	2800      	cmp	r0, #0
 800087c:	d001      	beq.n	8000882 <main+0xfe>
 800087e:	b672      	cpsid	i
  while (1)
 8000880:	e7fe      	b.n	8000880 <main+0xfc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000882:	9009      	str	r0, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000886:	a909      	add	r1, sp, #36	; 0x24
 8000888:	0030      	movs	r0, r6
 800088a:	f001 fd89 	bl	80023a0 <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	1e07      	subs	r7, r0, #0
 8000890:	d001      	beq.n	8000896 <main+0x112>
 8000892:	b672      	cpsid	i
  while (1)
 8000894:	e7fe      	b.n	8000894 <main+0x110>
  HAL_TIM_Base_Start(&htim1);  // Timer On and init this line
 8000896:	0030      	movs	r0, r6
 8000898:	f001 fca4 	bl	80021e4 <HAL_TIM_Base_Start>
  lcd_init();                //LCD init
 800089c:	f7ff fe7a 	bl	8000594 <lcd_init>
	set_time[0] = decToBcd(sec);
 80008a0:	4b7a      	ldr	r3, [pc, #488]	; (8000a8c <main+0x308>)
	HAL_I2C_Mem_Write(&RTC_I2C, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 80008a2:	003a      	movs	r2, r7
	set_time[0] = decToBcd(sec);
 80008a4:	930b      	str	r3, [sp, #44]	; 0x2c
	set_time[4] = decToBcd(dom);
 80008a6:	4b7a      	ldr	r3, [pc, #488]	; (8000a90 <main+0x30c>)
	HAL_I2C_Mem_Write(&RTC_I2C, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 80008a8:	21d0      	movs	r1, #208	; 0xd0
	set_time[4] = decToBcd(dom);
 80008aa:	80a3      	strh	r3, [r4, #4]
	set_time[6] = decToBcd(year);
 80008ac:	2324      	movs	r3, #36	; 0x24
 80008ae:	71a3      	strb	r3, [r4, #6]
	HAL_I2C_Mem_Write(&RTC_I2C, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 80008b0:	23fa      	movs	r3, #250	; 0xfa
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	9302      	str	r3, [sp, #8]
 80008b6:	2307      	movs	r3, #7
 80008b8:	0028      	movs	r0, r5
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	469b      	mov	fp, r3
 80008be:	9400      	str	r4, [sp, #0]
 80008c0:	3b06      	subs	r3, #6
 80008c2:	f000 fd59 	bl	8001378 <HAL_I2C_Mem_Write>
  lcd_xy(0, 0);
 80008c6:	0039      	movs	r1, r7
 80008c8:	0038      	movs	r0, r7
 80008ca:	f7ff fe4d 	bl	8000568 <lcd_xy>
  LCD_String("Time :");
 80008ce:	4871      	ldr	r0, [pc, #452]	; (8000a94 <main+0x310>)
 80008d0:	f7ff feb2 	bl	8000638 <LCD_String>
  lcd_xy(1, 0);
 80008d4:	0039      	movs	r1, r7
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fe46 	bl	8000568 <lcd_xy>
  LCD_String("Date :");
 80008dc:	486e      	ldr	r0, [pc, #440]	; (8000a98 <main+0x314>)
 80008de:	f7ff feab 	bl	8000638 <LCD_String>
 80008e2:	4b6e      	ldr	r3, [pc, #440]	; (8000a9c <main+0x318>)
  string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 80008e4:	250a      	movs	r5, #10
 80008e6:	4698      	mov	r8, r3
 80008e8:	4b6d      	ldr	r3, [pc, #436]	; (8000aa0 <main+0x31c>)
 80008ea:	4f6e      	ldr	r7, [pc, #440]	; (8000aa4 <main+0x320>)
 80008ec:	9304      	str	r3, [sp, #16]
 80008ee:	4b6e      	ldr	r3, [pc, #440]	; (8000aa8 <main+0x324>)
 80008f0:	9305      	str	r3, [sp, #20]
	  lcd_xy(1, 7);
 80008f2:	2301      	movs	r3, #1
 80008f4:	4699      	mov	r9, r3
	  Get_Time ();
 80008f6:	f7ff feb3 	bl	8000660 <Get_Time>
	  lcd_xy(0, 7);
 80008fa:	4659      	mov	r1, fp
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fe33 	bl	8000568 <lcd_xy>
	  Print(time.hour);
 8000902:	4643      	mov	r3, r8
 8000904:	789e      	ldrb	r6, [r3, #2]
  string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000906:	0029      	movs	r1, r5
 8000908:	0030      	movs	r0, r6
 800090a:	f7ff fc87 	bl	800021c <__divsi3>
 800090e:	0029      	movs	r1, r5
 8000910:	f7ff fd6a 	bl	80003e8 <__aeabi_idivmod>
 8000914:	3130      	adds	r1, #48	; 0x30
 8000916:	7021      	strb	r1, [r4, #0]
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000918:	0030      	movs	r0, r6
 800091a:	0029      	movs	r1, r5
 800091c:	f7ff fd64 	bl	80003e8 <__aeabi_idivmod>
  string[2] = 0;
 8000920:	2600      	movs	r6, #0
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000922:	3130      	adds	r1, #48	; 0x30
  LCD_String(string); // Send the formatted string to your LCD display function
 8000924:	0020      	movs	r0, r4
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000926:	7061      	strb	r1, [r4, #1]
  string[2] = 0;
 8000928:	70a6      	strb	r6, [r4, #2]
  LCD_String(string); // Send the formatted string to your LCD display function
 800092a:	f7ff fe85 	bl	8000638 <LCD_String>
  LCD_String(" ");
 800092e:	0038      	movs	r0, r7
 8000930:	f7ff fe82 	bl	8000638 <LCD_String>
	  lcd_xy(0, 9);
 8000934:	2109      	movs	r1, #9
 8000936:	0030      	movs	r0, r6
 8000938:	f7ff fe16 	bl	8000568 <lcd_xy>
	  LCD_String(":");
 800093c:	9804      	ldr	r0, [sp, #16]
 800093e:	f7ff fe7b 	bl	8000638 <LCD_String>
	  Print(time.minutes);
 8000942:	4643      	mov	r3, r8
 8000944:	785b      	ldrb	r3, [r3, #1]
  string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000946:	0029      	movs	r1, r5
 8000948:	0018      	movs	r0, r3
	  Print(time.minutes);
 800094a:	469a      	mov	sl, r3
  string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 800094c:	f7ff fc66 	bl	800021c <__divsi3>
 8000950:	0029      	movs	r1, r5
 8000952:	f7ff fd49 	bl	80003e8 <__aeabi_idivmod>
 8000956:	3130      	adds	r1, #48	; 0x30
 8000958:	7021      	strb	r1, [r4, #0]
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 800095a:	4650      	mov	r0, sl
 800095c:	0029      	movs	r1, r5
 800095e:	f7ff fd43 	bl	80003e8 <__aeabi_idivmod>
  LCD_String(string); // Send the formatted string to your LCD display function
 8000962:	0020      	movs	r0, r4
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000964:	3130      	adds	r1, #48	; 0x30
 8000966:	7061      	strb	r1, [r4, #1]
  string[2] = 0;
 8000968:	70a6      	strb	r6, [r4, #2]
  LCD_String(string); // Send the formatted string to your LCD display function
 800096a:	f7ff fe65 	bl	8000638 <LCD_String>
  LCD_String(" ");
 800096e:	0038      	movs	r0, r7
 8000970:	f7ff fe62 	bl	8000638 <LCD_String>
	  lcd_xy(0, 12);
 8000974:	210c      	movs	r1, #12
 8000976:	0030      	movs	r0, r6
 8000978:	f7ff fdf6 	bl	8000568 <lcd_xy>
	  LCD_String(":");
 800097c:	9804      	ldr	r0, [sp, #16]
 800097e:	f7ff fe5b 	bl	8000638 <LCD_String>
	  Print(time.seconds);
 8000982:	4643      	mov	r3, r8
 8000984:	781b      	ldrb	r3, [r3, #0]
  string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000986:	0029      	movs	r1, r5
 8000988:	0018      	movs	r0, r3
	  Print(time.seconds);
 800098a:	469a      	mov	sl, r3
  string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 800098c:	f7ff fc46 	bl	800021c <__divsi3>
 8000990:	0029      	movs	r1, r5
 8000992:	f7ff fd29 	bl	80003e8 <__aeabi_idivmod>
 8000996:	3130      	adds	r1, #48	; 0x30
 8000998:	7021      	strb	r1, [r4, #0]
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 800099a:	4650      	mov	r0, sl
 800099c:	0029      	movs	r1, r5
 800099e:	f7ff fd23 	bl	80003e8 <__aeabi_idivmod>
  LCD_String(string); // Send the formatted string to your LCD display function
 80009a2:	0020      	movs	r0, r4
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 80009a4:	3130      	adds	r1, #48	; 0x30
 80009a6:	7061      	strb	r1, [r4, #1]
  string[2] = 0;
 80009a8:	70a6      	strb	r6, [r4, #2]
  LCD_String(string); // Send the formatted string to your LCD display function
 80009aa:	f7ff fe45 	bl	8000638 <LCD_String>
  LCD_String(" ");
 80009ae:	0038      	movs	r0, r7
 80009b0:	f7ff fe42 	bl	8000638 <LCD_String>
	  lcd_xy(1, 7);
 80009b4:	4659      	mov	r1, fp
 80009b6:	4648      	mov	r0, r9
 80009b8:	f7ff fdd6 	bl	8000568 <lcd_xy>
	  Print(time.dayofmonth);
 80009bc:	4643      	mov	r3, r8
 80009be:	791b      	ldrb	r3, [r3, #4]
  string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 80009c0:	0029      	movs	r1, r5
 80009c2:	0018      	movs	r0, r3
	  Print(time.dayofmonth);
 80009c4:	469a      	mov	sl, r3
  string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 80009c6:	f7ff fc29 	bl	800021c <__divsi3>
 80009ca:	0029      	movs	r1, r5
 80009cc:	f7ff fd0c 	bl	80003e8 <__aeabi_idivmod>
 80009d0:	3130      	adds	r1, #48	; 0x30
 80009d2:	7021      	strb	r1, [r4, #0]
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 80009d4:	4650      	mov	r0, sl
 80009d6:	0029      	movs	r1, r5
 80009d8:	f7ff fd06 	bl	80003e8 <__aeabi_idivmod>
  LCD_String(string); // Send the formatted string to your LCD display function
 80009dc:	0020      	movs	r0, r4
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 80009de:	3130      	adds	r1, #48	; 0x30
 80009e0:	7061      	strb	r1, [r4, #1]
  string[2] = 0;
 80009e2:	70a6      	strb	r6, [r4, #2]
  LCD_String(string); // Send the formatted string to your LCD display function
 80009e4:	f7ff fe28 	bl	8000638 <LCD_String>
  LCD_String(" ");
 80009e8:	0038      	movs	r0, r7
 80009ea:	f7ff fe25 	bl	8000638 <LCD_String>
	  lcd_xy(1, 9);
 80009ee:	2109      	movs	r1, #9
 80009f0:	4648      	mov	r0, r9
 80009f2:	f7ff fdb9 	bl	8000568 <lcd_xy>
	  LCD_String("-");
 80009f6:	9805      	ldr	r0, [sp, #20]
 80009f8:	f7ff fe1e 	bl	8000638 <LCD_String>
	  Print(time.month);
 80009fc:	4643      	mov	r3, r8
 80009fe:	795b      	ldrb	r3, [r3, #5]
  string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000a00:	0029      	movs	r1, r5
 8000a02:	0018      	movs	r0, r3
	  Print(time.month);
 8000a04:	469a      	mov	sl, r3
  string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000a06:	f7ff fc09 	bl	800021c <__divsi3>
 8000a0a:	0029      	movs	r1, r5
 8000a0c:	f7ff fcec 	bl	80003e8 <__aeabi_idivmod>
 8000a10:	3130      	adds	r1, #48	; 0x30
 8000a12:	7021      	strb	r1, [r4, #0]
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000a14:	4650      	mov	r0, sl
 8000a16:	0029      	movs	r1, r5
 8000a18:	f7ff fce6 	bl	80003e8 <__aeabi_idivmod>
  LCD_String(string); // Send the formatted string to your LCD display function
 8000a1c:	0020      	movs	r0, r4
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000a1e:	3130      	adds	r1, #48	; 0x30
 8000a20:	7061      	strb	r1, [r4, #1]
  string[2] = 0;
 8000a22:	70a6      	strb	r6, [r4, #2]
  LCD_String(string); // Send the formatted string to your LCD display function
 8000a24:	f7ff fe08 	bl	8000638 <LCD_String>
  LCD_String(" ");
 8000a28:	0038      	movs	r0, r7
 8000a2a:	f7ff fe05 	bl	8000638 <LCD_String>
	  lcd_xy(1, 12);
 8000a2e:	210c      	movs	r1, #12
 8000a30:	4648      	mov	r0, r9
 8000a32:	f7ff fd99 	bl	8000568 <lcd_xy>
	  LCD_String("-");
 8000a36:	9805      	ldr	r0, [sp, #20]
 8000a38:	f7ff fdfe 	bl	8000638 <LCD_String>
	  Print(time.year);
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	799b      	ldrb	r3, [r3, #6]
  string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000a40:	0029      	movs	r1, r5
 8000a42:	0018      	movs	r0, r3
	  Print(time.year);
 8000a44:	469a      	mov	sl, r3
  string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000a46:	f7ff fbe9 	bl	800021c <__divsi3>
 8000a4a:	0029      	movs	r1, r5
 8000a4c:	f7ff fccc 	bl	80003e8 <__aeabi_idivmod>
 8000a50:	3130      	adds	r1, #48	; 0x30
 8000a52:	7021      	strb	r1, [r4, #0]
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000a54:	4650      	mov	r0, sl
 8000a56:	0029      	movs	r1, r5
 8000a58:	f7ff fcc6 	bl	80003e8 <__aeabi_idivmod>
  LCD_String(string); // Send the formatted string to your LCD display function
 8000a5c:	0020      	movs	r0, r4
  string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000a5e:	3130      	adds	r1, #48	; 0x30
 8000a60:	7061      	strb	r1, [r4, #1]
  string[2] = 0;
 8000a62:	70a6      	strb	r6, [r4, #2]
  LCD_String(string); // Send the formatted string to your LCD display function
 8000a64:	f7ff fde8 	bl	8000638 <LCD_String>
  LCD_String(" ");
 8000a68:	0038      	movs	r0, r7
 8000a6a:	f7ff fde5 	bl	8000638 <LCD_String>
 8000a6e:	e742      	b.n	80008f6 <main+0x172>
 8000a70:	40021000 	.word	0x40021000
 8000a74:	20000028 	.word	0x20000028
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	2000090e 	.word	0x2000090e
 8000a80:	2000007c 	.word	0x2000007c
 8000a84:	40012c00 	.word	0x40012c00
 8000a88:	0000ffff 	.word	0x0000ffff
 8000a8c:	01023000 	.word	0x01023000
 8000a90:	00000504 	.word	0x00000504
 8000a94:	08002468 	.word	0x08002468
 8000a98:	08002470 	.word	0x08002470
 8000a9c:	200000c4 	.word	0x200000c4
 8000aa0:	08002478 	.word	0x08002478
 8000aa4:	08002464 	.word	0x08002464
 8000aa8:	0800247c 	.word	0x0800247c

08000aac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aac:	2201      	movs	r2, #1
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_MspInit+0x2c>)
{
 8000ab0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	6999      	ldr	r1, [r3, #24]
 8000ab4:	4311      	orrs	r1, r2
 8000ab6:	6199      	str	r1, [r3, #24]
 8000ab8:	6999      	ldr	r1, [r3, #24]
 8000aba:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	9200      	str	r2, [sp, #0]
 8000ac0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	69da      	ldr	r2, [r3, #28]
 8000ac4:	0549      	lsls	r1, r1, #21
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	61da      	str	r2, [r3, #28]
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	400b      	ands	r3, r1
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	b002      	add	sp, #8
 8000ad4:	4770      	bx	lr
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000adc:	b510      	push	{r4, lr}
 8000ade:	0004      	movs	r4, r0
 8000ae0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	2214      	movs	r2, #20
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	a802      	add	r0, sp, #8
 8000ae8:	f001 fc84 	bl	80023f4 <memset>
  if(hi2c->Instance==I2C1)
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_I2C_MspInit+0x60>)
 8000aee:	6822      	ldr	r2, [r4, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d001      	beq.n	8000af8 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af4:	b008      	add	sp, #32
 8000af6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	4c11      	ldr	r4, [pc, #68]	; (8000b40 <HAL_I2C_MspInit+0x64>)
 8000afc:	0292      	lsls	r2, r2, #10
 8000afe:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4313      	orrs	r3, r2
 8000b04:	6163      	str	r3, [r4, #20]
 8000b06:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b0e:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b12:	2312      	movs	r3, #18
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	9202      	str	r2, [sp, #8]
 8000b18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b20:	3301      	adds	r3, #1
 8000b22:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f000 f902 	bl	8000d2c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	69e3      	ldr	r3, [r4, #28]
 8000b2c:	0392      	lsls	r2, r2, #14
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	61e3      	str	r3, [r4, #28]
 8000b32:	69e3      	ldr	r3, [r4, #28]
 8000b34:	4013      	ands	r3, r2
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	9b01      	ldr	r3, [sp, #4]
}
 8000b3a:	e7db      	b.n	8000af4 <HAL_I2C_MspInit+0x18>
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	40021000 	.word	0x40021000

08000b44 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_TIM_Base_MspInit+0x24>)
 8000b46:	6802      	ldr	r2, [r0, #0]
{
 8000b48:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d001      	beq.n	8000b52 <HAL_TIM_Base_MspInit+0xe>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b4e:	b002      	add	sp, #8
 8000b50:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_TIM_Base_MspInit+0x28>)
 8000b56:	0109      	lsls	r1, r1, #4
 8000b58:	699a      	ldr	r2, [r3, #24]
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	619a      	str	r2, [r3, #24]
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	400b      	ands	r3, r1
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	9b01      	ldr	r3, [sp, #4]
}
 8000b66:	e7f2      	b.n	8000b4e <HAL_TIM_Base_MspInit+0xa>
 8000b68:	40012c00 	.word	0x40012c00
 8000b6c:	40021000 	.word	0x40021000

08000b70 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler>
 8000b72:	46c0      	nop			; (mov r8, r8)

08000b74 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <HardFault_Handler>
 8000b76:	46c0      	nop			; (mov r8, r8)

08000b78 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b78:	4770      	bx	lr
 8000b7a:	46c0      	nop			; (mov r8, r8)

08000b7c <PendSV_Handler>:
 8000b7c:	4770      	bx	lr
 8000b7e:	46c0      	nop			; (mov r8, r8)

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b82:	f000 f863 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bd10      	pop	{r4, pc}

08000b88 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b88:	4770      	bx	lr
 8000b8a:	46c0      	nop			; (mov r8, r8)

08000b8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b90:	f7ff fffa 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	; (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bba:	f001 fc23 	bl	8002404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bbe:	f7ff fde1 	bl	8000784 <main>

08000bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   r0, =_estack
 8000bc4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd0:	080024b8 	.word	0x080024b8
  ldr r2, =_sbss
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd8:	200000d0 	.word	0x200000d0

08000bdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_IRQHandler>
	...

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be4:	20fa      	movs	r0, #250	; 0xfa
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_InitTick+0x40>)
 8000be8:	0080      	lsls	r0, r0, #2
 8000bea:	7819      	ldrb	r1, [r3, #0]
 8000bec:	f7ff fa8c 	bl	8000108 <__udivsi3>
 8000bf0:	4d0c      	ldr	r5, [pc, #48]	; (8000c24 <HAL_InitTick+0x44>)
 8000bf2:	0001      	movs	r1, r0
 8000bf4:	6828      	ldr	r0, [r5, #0]
 8000bf6:	f7ff fa87 	bl	8000108 <__udivsi3>
 8000bfa:	f000 f87d 	bl	8000cf8 <HAL_SYSTICK_Config>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d10c      	bne.n	8000c1c <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8000c02:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c04:	2c03      	cmp	r4, #3
 8000c06:	d900      	bls.n	8000c0a <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000c08:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	0021      	movs	r1, r4
 8000c10:	f000 f840 	bl	8000c94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <HAL_InitTick+0x48>)
 8000c16:	2000      	movs	r0, #0
 8000c18:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000c1a:	e7f5      	b.n	8000c08 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	e7f3      	b.n	8000c08 <HAL_InitTick+0x28>
 8000c20:	20000004 	.word	0x20000004
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000008 	.word	0x20000008

08000c2c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_Init+0x1c>)
{
 8000c30:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c32:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c34:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c36:	430b      	orrs	r3, r1
 8000c38:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	f7ff ffd1 	bl	8000be0 <HAL_InitTick>
  HAL_MspInit();
 8000c3e:	f7ff ff35 	bl	8000aac <HAL_MspInit>
}
 8000c42:	2000      	movs	r0, #0
 8000c44:	bd10      	pop	{r4, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <HAL_IncTick+0x10>)
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_IncTick+0x14>)
 8000c50:	6811      	ldr	r1, [r2, #0]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	185b      	adds	r3, r3, r1
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	4770      	bx	lr
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	200000cc 	.word	0x200000cc
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c64:	4b01      	ldr	r3, [pc, #4]	; (8000c6c <HAL_GetTick+0x8>)
 8000c66:	6818      	ldr	r0, [r3, #0]
}
 8000c68:	4770      	bx	lr
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	200000cc 	.word	0x200000cc

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff fff6 	bl	8000c64 <HAL_GetTick>
 8000c78:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7a:	1c63      	adds	r3, r4, #1
 8000c7c:	d002      	beq.n	8000c84 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <HAL_Delay+0x20>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c84:	f7ff ffee 	bl	8000c64 <HAL_GetTick>
 8000c88:	1b40      	subs	r0, r0, r5
 8000c8a:	42a0      	cmp	r0, r4
 8000c8c:	d3fa      	bcc.n	8000c84 <HAL_Delay+0x14>
  {
  }
}
 8000c8e:	bd70      	pop	{r4, r5, r6, pc}
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c94:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000c96:	2800      	cmp	r0, #0
 8000c98:	db14      	blt.n	8000cc4 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_NVIC_SetPriority+0x5c>)
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	23ff      	movs	r3, #255	; 0xff
 8000ca2:	0884      	lsrs	r4, r0, #2
 8000ca4:	4002      	ands	r2, r0
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	26c0      	movs	r6, #192	; 0xc0
 8000caa:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cac:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cae:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cb0:	400b      	ands	r3, r1
 8000cb2:	4093      	lsls	r3, r2
 8000cb4:	00a4      	lsls	r4, r4, #2
 8000cb6:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb8:	00b6      	lsls	r6, r6, #2
 8000cba:	59a5      	ldr	r5, [r4, r6]
 8000cbc:	4385      	bics	r5, r0
 8000cbe:	432b      	orrs	r3, r5
 8000cc0:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc4:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <HAL_NVIC_SetPriority+0x60>)
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	4694      	mov	ip, r2
 8000cca:	2203      	movs	r2, #3
 8000ccc:	4003      	ands	r3, r0
 8000cce:	4010      	ands	r0, r2
 8000cd0:	32fc      	adds	r2, #252	; 0xfc
 8000cd2:	0015      	movs	r5, r2
 8000cd4:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cd6:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cda:	400a      	ands	r2, r1
 8000cdc:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cde:	3b08      	subs	r3, #8
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4463      	add	r3, ip
 8000ce6:	69dc      	ldr	r4, [r3, #28]
 8000ce8:	43ac      	bics	r4, r5
 8000cea:	4322      	orrs	r2, r4
 8000cec:	61da      	str	r2, [r3, #28]
 8000cee:	e7e8      	b.n	8000cc2 <HAL_NVIC_SetPriority+0x2e>
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	1e43      	subs	r3, r0, #1
 8000cfc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d20e      	bcs.n	8000d22 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d04:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d08:	4807      	ldr	r0, [pc, #28]	; (8000d28 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0c:	6a03      	ldr	r3, [r0, #32]
 8000d0e:	0609      	lsls	r1, r1, #24
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	0a1b      	lsrs	r3, r3, #8
 8000d14:	430b      	orrs	r3, r1
 8000d16:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	3307      	adds	r3, #7
 8000d20:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d22:	4770      	bx	lr
 8000d24:	e000e010 	.word	0xe000e010
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	46de      	mov	lr, fp
 8000d30:	4657      	mov	r7, sl
 8000d32:	464e      	mov	r6, r9
 8000d34:	4645      	mov	r5, r8
 8000d36:	b5e0      	push	{r5, r6, r7, lr}
 8000d38:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	6809      	ldr	r1, [r1, #0]
 8000d3c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000d3e:	2300      	movs	r3, #0
{
 8000d40:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d07c      	beq.n	8000e40 <HAL_GPIO_Init+0x114>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4c79      	ldr	r4, [pc, #484]	; (8000f2c <HAL_GPIO_Init+0x200>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d48:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	46a3      	mov	fp, r4
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d4c:	2601      	movs	r6, #1
 8000d4e:	000c      	movs	r4, r1
 8000d50:	409e      	lsls	r6, r3
 8000d52:	4034      	ands	r4, r6
 8000d54:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8000d56:	4231      	tst	r1, r6
 8000d58:	d06c      	beq.n	8000e34 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d5a:	4654      	mov	r4, sl
 8000d5c:	2503      	movs	r5, #3
 8000d5e:	6864      	ldr	r4, [r4, #4]
 8000d60:	4025      	ands	r5, r4
 8000d62:	46ac      	mov	ip, r5
 8000d64:	3d01      	subs	r5, #1
 8000d66:	2d01      	cmp	r5, #1
 8000d68:	d800      	bhi.n	8000d6c <HAL_GPIO_Init+0x40>
 8000d6a:	e070      	b.n	8000e4e <HAL_GPIO_Init+0x122>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6c:	4665      	mov	r5, ip
 8000d6e:	2d03      	cmp	r5, #3
 8000d70:	d000      	beq.n	8000d74 <HAL_GPIO_Init+0x48>
 8000d72:	e0b3      	b.n	8000edc <HAL_GPIO_Init+0x1b0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d74:	4666      	mov	r6, ip
 8000d76:	4096      	lsls	r6, r2
 8000d78:	43f5      	mvns	r5, r6
 8000d7a:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8000d7c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d7e:	9d02      	ldr	r5, [sp, #8]
 8000d80:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d82:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d84:	25c0      	movs	r5, #192	; 0xc0
 8000d86:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 8000d88:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d8a:	422c      	tst	r4, r5
 8000d8c:	d052      	beq.n	8000e34 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	465d      	mov	r5, fp
 8000d90:	2601      	movs	r6, #1
 8000d92:	465f      	mov	r7, fp
 8000d94:	69ad      	ldr	r5, [r5, #24]
 8000d96:	4335      	orrs	r5, r6
 8000d98:	61bd      	str	r5, [r7, #24]
 8000d9a:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d9c:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4035      	ands	r5, r6
 8000da0:	4e63      	ldr	r6, [pc, #396]	; (8000f30 <HAL_GPIO_Init+0x204>)
 8000da2:	9505      	str	r5, [sp, #20]
 8000da4:	46b4      	mov	ip, r6
 8000da6:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000da8:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8000daa:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dac:	00bf      	lsls	r7, r7, #2
 8000dae:	00ad      	lsls	r5, r5, #2
 8000db0:	4465      	add	r5, ip
 8000db2:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8000db4:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000db6:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8000db8:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dba:	4666      	mov	r6, ip
 8000dbc:	40b7      	lsls	r7, r6
 8000dbe:	003e      	movs	r6, r7
 8000dc0:	464f      	mov	r7, r9
 8000dc2:	43b7      	bics	r7, r6
 8000dc4:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dc6:	2790      	movs	r7, #144	; 0x90
 8000dc8:	05ff      	lsls	r7, r7, #23
 8000dca:	42b8      	cmp	r0, r7
 8000dcc:	d012      	beq.n	8000df4 <HAL_GPIO_Init+0xc8>
 8000dce:	4f59      	ldr	r7, [pc, #356]	; (8000f34 <HAL_GPIO_Init+0x208>)
 8000dd0:	42b8      	cmp	r0, r7
 8000dd2:	d100      	bne.n	8000dd6 <HAL_GPIO_Init+0xaa>
 8000dd4:	e09b      	b.n	8000f0e <HAL_GPIO_Init+0x1e2>
 8000dd6:	4f58      	ldr	r7, [pc, #352]	; (8000f38 <HAL_GPIO_Init+0x20c>)
 8000dd8:	42b8      	cmp	r0, r7
 8000dda:	d100      	bne.n	8000dde <HAL_GPIO_Init+0xb2>
 8000ddc:	e09f      	b.n	8000f1e <HAL_GPIO_Init+0x1f2>
 8000dde:	4f57      	ldr	r7, [pc, #348]	; (8000f3c <HAL_GPIO_Init+0x210>)
 8000de0:	42b8      	cmp	r0, r7
 8000de2:	d100      	bne.n	8000de6 <HAL_GPIO_Init+0xba>
 8000de4:	e08c      	b.n	8000f00 <HAL_GPIO_Init+0x1d4>
 8000de6:	4666      	mov	r6, ip
 8000de8:	2705      	movs	r7, #5
 8000dea:	40b7      	lsls	r7, r6
 8000dec:	003e      	movs	r6, r7
 8000dee:	464f      	mov	r7, r9
 8000df0:	4337      	orrs	r7, r6
 8000df2:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000df4:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000df6:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000df8:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 8000dfa:	4d51      	ldr	r5, [pc, #324]	; (8000f40 <HAL_GPIO_Init+0x214>)
        temp &= ~(iocurrent);
 8000dfc:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dfe:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8000e00:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 8000e02:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e04:	423c      	tst	r4, r7
 8000e06:	d000      	beq.n	8000e0a <HAL_GPIO_Init+0xde>
 8000e08:	e077      	b.n	8000efa <HAL_GPIO_Init+0x1ce>
        temp &= ~(iocurrent);
 8000e0a:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000e0c:	4f4c      	ldr	r7, [pc, #304]	; (8000f40 <HAL_GPIO_Init+0x214>)
 8000e0e:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8000e10:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e12:	02a7      	lsls	r7, r4, #10
 8000e14:	d46e      	bmi.n	8000ef4 <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 8000e16:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000e18:	4f49      	ldr	r7, [pc, #292]	; (8000f40 <HAL_GPIO_Init+0x214>)
 8000e1a:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000e1c:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e1e:	03a7      	lsls	r7, r4, #14
 8000e20:	d465      	bmi.n	8000eee <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 8000e22:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000e24:	4f46      	ldr	r7, [pc, #280]	; (8000f40 <HAL_GPIO_Init+0x214>)
 8000e26:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 8000e28:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e2a:	03e4      	lsls	r4, r4, #15
 8000e2c:	d45b      	bmi.n	8000ee6 <HAL_GPIO_Init+0x1ba>
        temp &= ~(iocurrent);
 8000e2e:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000e30:	4c43      	ldr	r4, [pc, #268]	; (8000f40 <HAL_GPIO_Init+0x214>)
 8000e32:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e34:	000c      	movs	r4, r1
      }
    }

    position++;
 8000e36:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	40dc      	lsrs	r4, r3
 8000e3a:	3202      	adds	r2, #2
 8000e3c:	2c00      	cmp	r4, #0
 8000e3e:	d185      	bne.n	8000d4c <HAL_GPIO_Init+0x20>
  } 
}
 8000e40:	b007      	add	sp, #28
 8000e42:	bcf0      	pop	{r4, r5, r6, r7}
 8000e44:	46bb      	mov	fp, r7
 8000e46:	46b2      	mov	sl, r6
 8000e48:	46a9      	mov	r9, r5
 8000e4a:	46a0      	mov	r8, r4
 8000e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000e4e:	6885      	ldr	r5, [r0, #8]
 8000e50:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e52:	2503      	movs	r5, #3
 8000e54:	4095      	lsls	r5, r2
 8000e56:	46a8      	mov	r8, r5
 8000e58:	43ed      	mvns	r5, r5
 8000e5a:	464f      	mov	r7, r9
 8000e5c:	9502      	str	r5, [sp, #8]
 8000e5e:	4645      	mov	r5, r8
 8000e60:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e62:	4655      	mov	r5, sl
 8000e64:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e66:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e68:	002f      	movs	r7, r5
 8000e6a:	4097      	lsls	r7, r2
 8000e6c:	46b8      	mov	r8, r7
 8000e6e:	464f      	mov	r7, r9
 8000e70:	4645      	mov	r5, r8
 8000e72:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8000e74:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e76:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e78:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7a:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7c:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7e:	0926      	lsrs	r6, r4, #4
 8000e80:	402e      	ands	r6, r5
 8000e82:	409e      	lsls	r6, r3
 8000e84:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000e86:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8000e88:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e8a:	9d02      	ldr	r5, [sp, #8]
 8000e8c:	402e      	ands	r6, r5
 8000e8e:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e90:	4656      	mov	r6, sl
 8000e92:	68b6      	ldr	r6, [r6, #8]
 8000e94:	4647      	mov	r7, r8
 8000e96:	4096      	lsls	r6, r2
 8000e98:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8000e9a:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9c:	4667      	mov	r7, ip
 8000e9e:	4666      	mov	r6, ip
 8000ea0:	4096      	lsls	r6, r2
 8000ea2:	2f02      	cmp	r7, #2
 8000ea4:	d000      	beq.n	8000ea8 <HAL_GPIO_Init+0x17c>
 8000ea6:	e769      	b.n	8000d7c <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 8000ea8:	08dd      	lsrs	r5, r3, #3
 8000eaa:	00ad      	lsls	r5, r5, #2
 8000eac:	46ac      	mov	ip, r5
 8000eae:	4484      	add	ip, r0
 8000eb0:	4665      	mov	r5, ip
 8000eb2:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb4:	2507      	movs	r5, #7
 8000eb6:	401d      	ands	r5, r3
 8000eb8:	00ad      	lsls	r5, r5, #2
 8000eba:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8000ebc:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ebe:	250f      	movs	r5, #15
 8000ec0:	4647      	mov	r7, r8
 8000ec2:	40bd      	lsls	r5, r7
 8000ec4:	9f03      	ldr	r7, [sp, #12]
 8000ec6:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec8:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eca:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ecc:	4647      	mov	r7, r8
 8000ece:	692d      	ldr	r5, [r5, #16]
 8000ed0:	40bd      	lsls	r5, r7
 8000ed2:	9f03      	ldr	r7, [sp, #12]
 8000ed4:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8000ed6:	4665      	mov	r5, ip
 8000ed8:	622f      	str	r7, [r5, #32]
 8000eda:	e74f      	b.n	8000d7c <HAL_GPIO_Init+0x50>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000edc:	2503      	movs	r5, #3
 8000ede:	4095      	lsls	r5, r2
 8000ee0:	43ed      	mvns	r5, r5
 8000ee2:	9502      	str	r5, [sp, #8]
 8000ee4:	e7d0      	b.n	8000e88 <HAL_GPIO_Init+0x15c>
          temp |= iocurrent;
 8000ee6:	9c01      	ldr	r4, [sp, #4]
 8000ee8:	432c      	orrs	r4, r5
 8000eea:	0025      	movs	r5, r4
 8000eec:	e7a0      	b.n	8000e30 <HAL_GPIO_Init+0x104>
          temp |= iocurrent;
 8000eee:	9f01      	ldr	r7, [sp, #4]
 8000ef0:	433d      	orrs	r5, r7
 8000ef2:	e797      	b.n	8000e24 <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 8000ef4:	9f01      	ldr	r7, [sp, #4]
 8000ef6:	433d      	orrs	r5, r7
 8000ef8:	e78e      	b.n	8000e18 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 8000efa:	9f01      	ldr	r7, [sp, #4]
 8000efc:	433d      	orrs	r5, r7
 8000efe:	e785      	b.n	8000e0c <HAL_GPIO_Init+0xe0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f00:	4667      	mov	r7, ip
 8000f02:	2603      	movs	r6, #3
 8000f04:	40be      	lsls	r6, r7
 8000f06:	464f      	mov	r7, r9
 8000f08:	4337      	orrs	r7, r6
 8000f0a:	46b9      	mov	r9, r7
 8000f0c:	e772      	b.n	8000df4 <HAL_GPIO_Init+0xc8>
 8000f0e:	4666      	mov	r6, ip
 8000f10:	2701      	movs	r7, #1
 8000f12:	40b7      	lsls	r7, r6
 8000f14:	003e      	movs	r6, r7
 8000f16:	464f      	mov	r7, r9
 8000f18:	4337      	orrs	r7, r6
 8000f1a:	46b9      	mov	r9, r7
 8000f1c:	e76a      	b.n	8000df4 <HAL_GPIO_Init+0xc8>
 8000f1e:	4667      	mov	r7, ip
 8000f20:	2602      	movs	r6, #2
 8000f22:	40be      	lsls	r6, r7
 8000f24:	464f      	mov	r7, r9
 8000f26:	4337      	orrs	r7, r6
 8000f28:	46b9      	mov	r9, r7
 8000f2a:	e763      	b.n	8000df4 <HAL_GPIO_Init+0xc8>
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000
 8000f34:	48000400 	.word	0x48000400
 8000f38:	48000800 	.word	0x48000800
 8000f3c:	48000c00 	.word	0x48000c00
 8000f40:	40010400 	.word	0x40010400

08000f44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f48:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f4a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4c:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000f4e:	e7fc      	b.n	8000f4a <HAL_GPIO_WritePin+0x6>

08000f50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	464e      	mov	r6, r9
 8000f54:	4645      	mov	r5, r8
 8000f56:	46de      	mov	lr, fp
 8000f58:	4657      	mov	r7, sl
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000f5a:	2420      	movs	r4, #32
{
 8000f5c:	b5e0      	push	{r5, r6, r7, lr}
 8000f5e:	4680      	mov	r8, r0
 8000f60:	000e      	movs	r6, r1
 8000f62:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000f64:	6803      	ldr	r3, [r0, #0]
{
 8000f66:	9201      	str	r2, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000f68:	2202      	movs	r2, #2
 8000f6a:	4692      	mov	sl, r2
 8000f6c:	4657      	mov	r7, sl
 8000f6e:	4651      	mov	r1, sl
 8000f70:	699a      	ldr	r2, [r3, #24]
 8000f72:	4017      	ands	r7, r2
 8000f74:	4211      	tst	r1, r2
 8000f76:	d000      	beq.n	8000f7a <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
 8000f78:	e0b7      	b.n	80010ea <I2C_WaitOnTXISFlagUntilTimeout+0x19a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	000a      	movs	r2, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8000f7e:	6998      	ldr	r0, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8000f80:	2500      	movs	r5, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000f82:	4002      	ands	r2, r0
 8000f84:	4201      	tst	r1, r0
 8000f86:	d015      	beq.n	8000fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  HAL_StatusTypeDef status = HAL_OK;
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4691      	mov	r9, r2
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
          tmp2 = hi2c->Mode;
 8000f8c:	3242      	adds	r2, #66	; 0x42
 8000f8e:	4693      	mov	fp, r2
  uint32_t tickstart = Tickstart;
 8000f90:	9d01      	ldr	r5, [sp, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f92:	61d9      	str	r1, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000f94:	1c72      	adds	r2, r6, #1
 8000f96:	d14b      	bne.n	8001030 <I2C_WaitOnTXISFlagUntilTimeout+0xe0>
 8000f98:	699a      	ldr	r2, [r3, #24]
 8000f9a:	4214      	tst	r4, r2
 8000f9c:	d000      	beq.n	8000fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
 8000f9e:	e0b5      	b.n	800110c <I2C_WaitOnTXISFlagUntilTimeout+0x1bc>
 8000fa0:	464a      	mov	r2, r9
 8000fa2:	2a00      	cmp	r2, #0
 8000fa4:	d103      	bne.n	8000fae <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
 8000fa6:	699a      	ldr	r2, [r3, #24]
 8000fa8:	4214      	tst	r4, r2
 8000faa:	d0fc      	beq.n	8000fa6 <I2C_WaitOnTXISFlagUntilTimeout+0x56>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fac:	61dc      	str	r4, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8000fae:	2204      	movs	r2, #4

    status = HAL_ERROR;
 8000fb0:	2501      	movs	r5, #1
    error_code |= HAL_I2C_ERROR_AF;
 8000fb2:	433a      	orrs	r2, r7
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8000fb4:	2080      	movs	r0, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8000fb6:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8000fb8:	0040      	lsls	r0, r0, #1
 8000fba:	4201      	tst	r1, r0
 8000fbc:	d034      	beq.n	8001028 <I2C_WaitOnTXISFlagUntilTimeout+0xd8>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8000fbe:	2401      	movs	r4, #1
 8000fc0:	4645      	mov	r5, r8
 8000fc2:	4322      	orrs	r2, r4

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000fc4:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8000fc6:	0548      	lsls	r0, r1, #21
 8000fc8:	d504      	bpl.n	8000fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8000fca:	2008      	movs	r0, #8
 8000fcc:	4302      	orrs	r2, r0

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000fce:	2080      	movs	r0, #128	; 0x80
 8000fd0:	00c0      	lsls	r0, r0, #3
 8000fd2:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8000fd4:	0589      	lsls	r1, r1, #22
 8000fd6:	d504      	bpl.n	8000fe2 <I2C_WaitOnTXISFlagUntilTimeout+0x92>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8000fd8:	2102      	movs	r1, #2
 8000fda:	430a      	orrs	r2, r1

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8000fdc:	31ff      	adds	r1, #255	; 0xff
 8000fde:	31ff      	adds	r1, #255	; 0xff
 8000fe0:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000fe2:	6999      	ldr	r1, [r3, #24]
 8000fe4:	0789      	lsls	r1, r1, #30
 8000fe6:	d501      	bpl.n	8000fec <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
    hi2c->Instance->TXDR = 0x00U;
 8000fe8:	2100      	movs	r1, #0
 8000fea:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000fec:	2101      	movs	r1, #1
 8000fee:	6998      	ldr	r0, [r3, #24]
 8000ff0:	4201      	tst	r1, r0
 8000ff2:	d102      	bne.n	8000ffa <I2C_WaitOnTXISFlagUntilTimeout+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000ff4:	6998      	ldr	r0, [r3, #24]
 8000ff6:	4301      	orrs	r1, r0
 8000ff8:	6199      	str	r1, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ffa:	6859      	ldr	r1, [r3, #4]
 8000ffc:	4847      	ldr	r0, [pc, #284]	; (800111c <I2C_WaitOnTXISFlagUntilTimeout+0x1cc>)
 8000ffe:	4001      	ands	r1, r0
 8001000:	6059      	str	r1, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001002:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      return HAL_ERROR;
 8001004:	2001      	movs	r0, #1
    hi2c->ErrorCode |= error_code;
 8001006:	4313      	orrs	r3, r2
 8001008:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800100a:	2220      	movs	r2, #32
 800100c:	2341      	movs	r3, #65	; 0x41
 800100e:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001010:	2300      	movs	r3, #0
 8001012:	3222      	adds	r2, #34	; 0x22
 8001014:	54ab      	strb	r3, [r5, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001016:	3a02      	subs	r2, #2
 8001018:	54ab      	strb	r3, [r5, r2]
}
 800101a:	b003      	add	sp, #12
 800101c:	bcf0      	pop	{r4, r5, r6, r7}
 800101e:	46bb      	mov	fp, r7
 8001020:	46b2      	mov	sl, r6
 8001022:	46a9      	mov	r9, r5
 8001024:	46a0      	mov	r8, r4
 8001026:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001028:	0548      	lsls	r0, r1, #21
 800102a:	d530      	bpl.n	800108e <I2C_WaitOnTXISFlagUntilTimeout+0x13e>
 800102c:	4645      	mov	r5, r8
 800102e:	e7cc      	b.n	8000fca <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	4214      	tst	r4, r2
 8001034:	d16a      	bne.n	800110c <I2C_WaitOnTXISFlagUntilTimeout+0x1bc>
 8001036:	464a      	mov	r2, r9
 8001038:	2a00      	cmp	r2, #0
 800103a:	d1b8      	bne.n	8000fae <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800103c:	f7ff fe12 	bl	8000c64 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001040:	4643      	mov	r3, r8
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001042:	1b40      	subs	r0, r0, r5
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001044:	681b      	ldr	r3, [r3, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001046:	4286      	cmp	r6, r0
 8001048:	d301      	bcc.n	800104e <I2C_WaitOnTXISFlagUntilTimeout+0xfe>
 800104a:	2e00      	cmp	r6, #0
 800104c:	d1a2      	bne.n	8000f94 <I2C_WaitOnTXISFlagUntilTimeout+0x44>
          tmp2 = hi2c->Mode;
 800104e:	4659      	mov	r1, fp
 8001050:	4642      	mov	r2, r8
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001052:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8001054:	5c52      	ldrb	r2, [r2, r1]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001056:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	0212      	lsls	r2, r2, #8
 8001060:	4211      	tst	r1, r2
 8001062:	d003      	beq.n	800106c <I2C_WaitOnTXISFlagUntilTimeout+0x11c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001068:	4208      	tst	r0, r1
 800106a:	d040      	beq.n	80010ee <I2C_WaitOnTXISFlagUntilTimeout+0x19e>
 800106c:	4642      	mov	r2, r8
 800106e:	46b8      	mov	r8, r7
 8001070:	0017      	movs	r7, r2
 8001072:	e005      	b.n	8001080 <I2C_WaitOnTXISFlagUntilTimeout+0x130>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001074:	f7ff fdf6 	bl	8000c64 <HAL_GetTick>
 8001078:	1b40      	subs	r0, r0, r5
 800107a:	2819      	cmp	r0, #25
 800107c:	d82f      	bhi.n	80010de <I2C_WaitOnTXISFlagUntilTimeout+0x18e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800107e:	683b      	ldr	r3, [r7, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001080:	699a      	ldr	r2, [r3, #24]
 8001082:	4214      	tst	r4, r2
 8001084:	d0f6      	beq.n	8001074 <I2C_WaitOnTXISFlagUntilTimeout+0x124>
 8001086:	003a      	movs	r2, r7
 8001088:	4647      	mov	r7, r8
 800108a:	4690      	mov	r8, r2
 800108c:	e782      	b.n	8000f94 <I2C_WaitOnTXISFlagUntilTimeout+0x44>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800108e:	0589      	lsls	r1, r1, #22
 8001090:	d501      	bpl.n	8001096 <I2C_WaitOnTXISFlagUntilTimeout+0x146>
 8001092:	4645      	mov	r5, r8
 8001094:	e7a0      	b.n	8000fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x88>
  if (status != HAL_OK)
 8001096:	2d00      	cmp	r5, #0
 8001098:	d13d      	bne.n	8001116 <I2C_WaitOnTXISFlagUntilTimeout+0x1c6>
    if (Timeout != HAL_MAX_DELAY)
 800109a:	1c72      	adds	r2, r6, #1
 800109c:	d100      	bne.n	80010a0 <I2C_WaitOnTXISFlagUntilTimeout+0x150>
 800109e:	e765      	b.n	8000f6c <I2C_WaitOnTXISFlagUntilTimeout+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010a0:	f7ff fde0 	bl	8000c64 <HAL_GetTick>
 80010a4:	9b01      	ldr	r3, [sp, #4]
 80010a6:	1ac0      	subs	r0, r0, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80010a8:	4643      	mov	r3, r8
 80010aa:	681b      	ldr	r3, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010ac:	42b0      	cmp	r0, r6
 80010ae:	d802      	bhi.n	80010b6 <I2C_WaitOnTXISFlagUntilTimeout+0x166>
 80010b0:	2e00      	cmp	r6, #0
 80010b2:	d000      	beq.n	80010b6 <I2C_WaitOnTXISFlagUntilTimeout+0x166>
 80010b4:	e758      	b.n	8000f68 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80010b6:	2102      	movs	r1, #2
 80010b8:	0008      	movs	r0, r1
 80010ba:	699a      	ldr	r2, [r3, #24]
 80010bc:	4010      	ands	r0, r2
 80010be:	4211      	tst	r1, r2
 80010c0:	d000      	beq.n	80010c4 <I2C_WaitOnTXISFlagUntilTimeout+0x174>
 80010c2:	e751      	b.n	8000f68 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010c4:	4645      	mov	r5, r8
 80010c6:	2220      	movs	r2, #32
 80010c8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80010ca:	4313      	orrs	r3, r2
 80010cc:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80010ce:	2341      	movs	r3, #65	; 0x41
 80010d0:	54ea      	strb	r2, [r5, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80010d2:	3301      	adds	r3, #1
 80010d4:	54e8      	strb	r0, [r5, r3]
          __HAL_UNLOCK(hi2c);
 80010d6:	3b02      	subs	r3, #2
 80010d8:	54e8      	strb	r0, [r5, r3]
 80010da:	2001      	movs	r0, #1
 80010dc:	e79d      	b.n	800101a <I2C_WaitOnTXISFlagUntilTimeout+0xca>
              status = HAL_ERROR;
 80010de:	2201      	movs	r2, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80010e0:	46b8      	mov	r8, r7
 80010e2:	683b      	ldr	r3, [r7, #0]
              status = HAL_ERROR;
 80010e4:	4691      	mov	r9, r2
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80010e6:	2720      	movs	r7, #32
 80010e8:	e754      	b.n	8000f94 <I2C_WaitOnTXISFlagUntilTimeout+0x44>
  return HAL_OK;
 80010ea:	2000      	movs	r0, #0
 80010ec:	e795      	b.n	800101a <I2C_WaitOnTXISFlagUntilTimeout+0xca>
              (tmp1 != I2C_CR2_STOP) && \
 80010ee:	4662      	mov	r2, ip
 80010f0:	2a20      	cmp	r2, #32
 80010f2:	d0bb      	beq.n	800106c <I2C_WaitOnTXISFlagUntilTimeout+0x11c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4311      	orrs	r1, r2
 80010f8:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 80010fa:	f7ff fdb3 	bl	8000c64 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010fe:	4643      	mov	r3, r8
 8001100:	4642      	mov	r2, r8
            tickstart = HAL_GetTick();
 8001102:	0005      	movs	r5, r0
 8001104:	46b8      	mov	r8, r7
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	0017      	movs	r7, r2
 800110a:	e7b9      	b.n	8001080 <I2C_WaitOnTXISFlagUntilTimeout+0x130>
    if (status == HAL_OK)
 800110c:	464a      	mov	r2, r9
 800110e:	2a00      	cmp	r2, #0
 8001110:	d100      	bne.n	8001114 <I2C_WaitOnTXISFlagUntilTimeout+0x1c4>
 8001112:	e74b      	b.n	8000fac <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
 8001114:	e74b      	b.n	8000fae <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
 8001116:	4645      	mov	r5, r8
 8001118:	e763      	b.n	8000fe2 <I2C_WaitOnTXISFlagUntilTimeout+0x92>
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	fe00e800 	.word	0xfe00e800

08001120 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001122:	46de      	mov	lr, fp
 8001124:	4657      	mov	r7, sl
 8001126:	464e      	mov	r6, r9
 8001128:	4645      	mov	r5, r8
 800112a:	b5e0      	push	{r5, r6, r7, lr}
 800112c:	0005      	movs	r5, r0
 800112e:	000e      	movs	r6, r1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001130:	6801      	ldr	r1, [r0, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001132:	2010      	movs	r0, #16
{
 8001134:	4692      	mov	sl, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001136:	698a      	ldr	r2, [r1, #24]
 8001138:	000b      	movs	r3, r1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800113a:	4683      	mov	fp, r0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800113c:	2420      	movs	r4, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800113e:	0692      	lsls	r2, r2, #26
 8001140:	d46d      	bmi.n	800121e <I2C_WaitOnSTOPFlagUntilTimeout+0xfe>
  HAL_StatusTypeDef status = HAL_OK;
 8001142:	2700      	movs	r7, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001144:	465a      	mov	r2, fp
  HAL_StatusTypeDef status = HAL_OK;
 8001146:	46bc      	mov	ip, r7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001148:	465f      	mov	r7, fp
  uint32_t itflag   = hi2c->Instance->ISR;
 800114a:	6988      	ldr	r0, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800114c:	4002      	ands	r2, r0
 800114e:	4207      	tst	r7, r0
 8001150:	d019      	beq.n	8001186 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
  uint32_t error_code = 0;
 8001152:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001154:	61cf      	str	r7, [r1, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001156:	000b      	movs	r3, r1
  uint32_t tickstart = Tickstart;
 8001158:	4657      	mov	r7, sl
  uint32_t error_code = 0;
 800115a:	4691      	mov	r9, r2
  HAL_StatusTypeDef status = HAL_OK;
 800115c:	4690      	mov	r8, r2
 800115e:	1c72      	adds	r2, r6, #1
 8001160:	d000      	beq.n	8001164 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
 8001162:	e070      	b.n	8001246 <I2C_WaitOnSTOPFlagUntilTimeout+0x126>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001164:	699a      	ldr	r2, [r3, #24]
 8001166:	4214      	tst	r4, r2
 8001168:	d000      	beq.n	800116c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
 800116a:	e0a3      	b.n	80012b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x194>
 800116c:	4642      	mov	r2, r8
 800116e:	2a00      	cmp	r2, #0
 8001170:	d103      	bne.n	800117a <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
 8001172:	699a      	ldr	r2, [r3, #24]
 8001174:	4214      	tst	r4, r2
 8001176:	d0fc      	beq.n	8001172 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001178:	61dc      	str	r4, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800117a:	2204      	movs	r2, #4
 800117c:	4649      	mov	r1, r9
 800117e:	4311      	orrs	r1, r2
 8001180:	000a      	movs	r2, r1
    status = HAL_ERROR;
 8001182:	2101      	movs	r1, #1
 8001184:	468c      	mov	ip, r1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001186:	2080      	movs	r0, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8001188:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800118a:	0040      	lsls	r0, r0, #1
 800118c:	4201      	tst	r1, r0
 800118e:	d032      	beq.n	80011f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xd6>
    error_code |= HAL_I2C_ERROR_BERR;
 8001190:	2401      	movs	r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001192:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001194:	4322      	orrs	r2, r4
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001196:	0548      	lsls	r0, r1, #21
 8001198:	d504      	bpl.n	80011a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    error_code |= HAL_I2C_ERROR_OVR;
 800119a:	2008      	movs	r0, #8
 800119c:	4302      	orrs	r2, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800119e:	2080      	movs	r0, #128	; 0x80
 80011a0:	00c0      	lsls	r0, r0, #3
 80011a2:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80011a4:	0589      	lsls	r1, r1, #22
 80011a6:	d504      	bpl.n	80011b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    error_code |= HAL_I2C_ERROR_ARLO;
 80011a8:	2102      	movs	r1, #2
 80011aa:	430a      	orrs	r2, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80011ac:	31ff      	adds	r1, #255	; 0xff
 80011ae:	31ff      	adds	r1, #255	; 0xff
 80011b0:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80011b2:	6999      	ldr	r1, [r3, #24]
 80011b4:	0789      	lsls	r1, r1, #30
 80011b6:	d501      	bpl.n	80011bc <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    hi2c->Instance->TXDR = 0x00U;
 80011b8:	2100      	movs	r1, #0
 80011ba:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011bc:	2101      	movs	r1, #1
 80011be:	6998      	ldr	r0, [r3, #24]
 80011c0:	4201      	tst	r1, r0
 80011c2:	d102      	bne.n	80011ca <I2C_WaitOnSTOPFlagUntilTimeout+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80011c4:	6998      	ldr	r0, [r3, #24]
 80011c6:	4301      	orrs	r1, r0
 80011c8:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80011ca:	6859      	ldr	r1, [r3, #4]
 80011cc:	483c      	ldr	r0, [pc, #240]	; (80012c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a0>)
 80011ce:	4001      	ands	r1, r0
 80011d0:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80011d2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      return HAL_ERROR;
 80011d4:	2001      	movs	r0, #1
    hi2c->ErrorCode |= error_code;
 80011d6:	4313      	orrs	r3, r2
 80011d8:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80011da:	2220      	movs	r2, #32
 80011dc:	2341      	movs	r3, #65	; 0x41
 80011de:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	3222      	adds	r2, #34	; 0x22
 80011e4:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 80011e6:	3a02      	subs	r2, #2
 80011e8:	54ab      	strb	r3, [r5, r2]
}
 80011ea:	bcf0      	pop	{r4, r5, r6, r7}
 80011ec:	46bb      	mov	fp, r7
 80011ee:	46b2      	mov	sl, r6
 80011f0:	46a9      	mov	r9, r5
 80011f2:	46a0      	mov	r8, r4
 80011f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80011f6:	0548      	lsls	r0, r1, #21
 80011f8:	d4cf      	bmi.n	800119a <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80011fa:	0589      	lsls	r1, r1, #22
 80011fc:	d4d4      	bmi.n	80011a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x88>
  if (status != HAL_OK)
 80011fe:	4661      	mov	r1, ip
 8001200:	2900      	cmp	r1, #0
 8001202:	d1d6      	bne.n	80011b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001204:	f7ff fd2e 	bl	8000c64 <HAL_GetTick>
 8001208:	4653      	mov	r3, sl
 800120a:	1ac0      	subs	r0, r0, r3
 800120c:	42b0      	cmp	r0, r6
 800120e:	d808      	bhi.n	8001222 <I2C_WaitOnSTOPFlagUntilTimeout+0x102>
 8001210:	2e00      	cmp	r6, #0
 8001212:	d006      	beq.n	8001222 <I2C_WaitOnSTOPFlagUntilTimeout+0x102>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	0019      	movs	r1, r3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001218:	698a      	ldr	r2, [r1, #24]
 800121a:	4214      	tst	r4, r2
 800121c:	d091      	beq.n	8001142 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  return HAL_OK;
 800121e:	2000      	movs	r0, #0
 8001220:	e7e3      	b.n	80011ea <I2C_WaitOnSTOPFlagUntilTimeout+0xca>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001222:	0020      	movs	r0, r4
 8001224:	6829      	ldr	r1, [r5, #0]
 8001226:	698a      	ldr	r2, [r1, #24]
 8001228:	000b      	movs	r3, r1
 800122a:	4010      	ands	r0, r2
 800122c:	4214      	tst	r4, r2
 800122e:	d1f3      	bne.n	8001218 <I2C_WaitOnSTOPFlagUntilTimeout+0xf8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001230:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001232:	4323      	orrs	r3, r4
 8001234:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001236:	2341      	movs	r3, #65	; 0x41
 8001238:	54ec      	strb	r4, [r5, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800123a:	3301      	adds	r3, #1
 800123c:	54e8      	strb	r0, [r5, r3]
          __HAL_UNLOCK(hi2c);
 800123e:	3b02      	subs	r3, #2
 8001240:	54e8      	strb	r0, [r5, r3]
 8001242:	2001      	movs	r0, #1
 8001244:	e7d1      	b.n	80011ea <I2C_WaitOnSTOPFlagUntilTimeout+0xca>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001246:	699a      	ldr	r2, [r3, #24]
 8001248:	4214      	tst	r4, r2
 800124a:	d133      	bne.n	80012b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x194>
 800124c:	4642      	mov	r2, r8
 800124e:	2a00      	cmp	r2, #0
 8001250:	d193      	bne.n	800117a <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001252:	f7ff fd07 	bl	8000c64 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001256:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001258:	1bc0      	subs	r0, r0, r7
 800125a:	4286      	cmp	r6, r0
 800125c:	d302      	bcc.n	8001264 <I2C_WaitOnSTOPFlagUntilTimeout+0x144>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <I2C_WaitOnSTOPFlagUntilTimeout+0x144>
 8001262:	e77c      	b.n	800115e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
          tmp2 = hi2c->Mode;
 8001264:	2242      	movs	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001266:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8001268:	5caa      	ldrb	r2, [r5, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800126a:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	0212      	lsls	r2, r2, #8
 8001274:	4211      	tst	r1, r2
 8001276:	d003      	beq.n	8001280 <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800127c:	4208      	tst	r0, r1
 800127e:	d00e      	beq.n	800129e <I2C_WaitOnSTOPFlagUntilTimeout+0x17e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001280:	699a      	ldr	r2, [r3, #24]
 8001282:	4214      	tst	r4, r2
 8001284:	d000      	beq.n	8001288 <I2C_WaitOnSTOPFlagUntilTimeout+0x168>
 8001286:	e76a      	b.n	800115e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001288:	f7ff fcec 	bl	8000c64 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800128c:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800128e:	1bc0      	subs	r0, r0, r7
 8001290:	2819      	cmp	r0, #25
 8001292:	d9f5      	bls.n	8001280 <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001294:	2220      	movs	r2, #32
 8001296:	4691      	mov	r9, r2
              status = HAL_ERROR;
 8001298:	3a1f      	subs	r2, #31
 800129a:	4690      	mov	r8, r2
 800129c:	e75f      	b.n	800115e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
              (tmp1 != I2C_CR2_STOP) && \
 800129e:	4662      	mov	r2, ip
 80012a0:	2a20      	cmp	r2, #32
 80012a2:	d0ed      	beq.n	8001280 <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	4311      	orrs	r1, r2
 80012a8:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 80012aa:	f7ff fcdb 	bl	8000c64 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012ae:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80012b0:	0007      	movs	r7, r0
 80012b2:	e7e5      	b.n	8001280 <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
    if (status == HAL_OK)
 80012b4:	4642      	mov	r2, r8
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d100      	bne.n	80012bc <I2C_WaitOnSTOPFlagUntilTimeout+0x19c>
 80012ba:	e75d      	b.n	8001178 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
 80012bc:	e75d      	b.n	800117a <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	fe00e800 	.word	0xfe00e800

080012c4 <HAL_I2C_Init>:
{
 80012c4:	b510      	push	{r4, lr}
 80012c6:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80012c8:	d04d      	beq.n	8001366 <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ca:	2341      	movs	r3, #65	; 0x41
 80012cc:	5cc3      	ldrb	r3, [r0, r3]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d043      	beq.n	800135c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80012d4:	2341      	movs	r3, #65	; 0x41
 80012d6:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80012d8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80012da:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	438a      	bics	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012e4:	4921      	ldr	r1, [pc, #132]	; (800136c <HAL_I2C_Init+0xa8>)
 80012e6:	6862      	ldr	r2, [r4, #4]
 80012e8:	400a      	ands	r2, r1
 80012ea:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	4920      	ldr	r1, [pc, #128]	; (8001370 <HAL_I2C_Init+0xac>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012f4:	68e2      	ldr	r2, [r4, #12]
 80012f6:	2a01      	cmp	r2, #1
 80012f8:	d02a      	beq.n	8001350 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012fa:	2184      	movs	r1, #132	; 0x84
 80012fc:	68a0      	ldr	r0, [r4, #8]
 80012fe:	0209      	lsls	r1, r1, #8
 8001300:	4301      	orrs	r1, r0
 8001302:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001304:	2a02      	cmp	r2, #2
 8001306:	d102      	bne.n	800130e <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	4a18      	ldr	r2, [pc, #96]	; (8001374 <HAL_I2C_Init+0xb0>)
  return HAL_OK;
 8001312:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001314:	430a      	orrs	r2, r1
 8001316:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	4915      	ldr	r1, [pc, #84]	; (8001370 <HAL_I2C_Init+0xac>)
 800131c:	400a      	ands	r2, r1
 800131e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001320:	6961      	ldr	r1, [r4, #20]
 8001322:	6922      	ldr	r2, [r4, #16]
 8001324:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001326:	69a1      	ldr	r1, [r4, #24]
 8001328:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800132a:	430a      	orrs	r2, r1
 800132c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800132e:	6a21      	ldr	r1, [r4, #32]
 8001330:	69e2      	ldr	r2, [r4, #28]
 8001332:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8001334:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001336:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800133e:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001340:	2241      	movs	r2, #65	; 0x41
 8001342:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001344:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001346:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001348:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 800134a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800134c:	54a3      	strb	r3, [r4, r2]
}
 800134e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	68a1      	ldr	r1, [r4, #8]
 8001354:	0212      	lsls	r2, r2, #8
 8001356:	430a      	orrs	r2, r1
 8001358:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800135a:	e7d8      	b.n	800130e <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 800135c:	3340      	adds	r3, #64	; 0x40
 800135e:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8001360:	f7ff fbbc 	bl	8000adc <HAL_I2C_MspInit>
 8001364:	e7b6      	b.n	80012d4 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8001366:	2001      	movs	r0, #1
 8001368:	e7f1      	b.n	800134e <HAL_I2C_Init+0x8a>
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	f0ffffff 	.word	0xf0ffffff
 8001370:	ffff7fff 	.word	0xffff7fff
 8001374:	02008000 	.word	0x02008000

08001378 <HAL_I2C_Mem_Write>:
{
 8001378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800137a:	4657      	mov	r7, sl
 800137c:	46de      	mov	lr, fp
 800137e:	464e      	mov	r6, r9
 8001380:	4645      	mov	r5, r8
 8001382:	b5e0      	push	{r5, r6, r7, lr}
 8001384:	4698      	mov	r8, r3
 8001386:	ab0a      	add	r3, sp, #40	; 0x28
 8001388:	4691      	mov	r9, r2
 800138a:	cb04      	ldmia	r3!, {r2}
 800138c:	0004      	movs	r4, r0
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	000f      	movs	r7, r1
 8001392:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001394:	2341      	movs	r3, #65	; 0x41
 8001396:	5cc3      	ldrb	r3, [r0, r3]
{
 8001398:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800139a:	2b20      	cmp	r3, #32
 800139c:	d000      	beq.n	80013a0 <HAL_I2C_Mem_Write+0x28>
 800139e:	e0a8      	b.n	80014f2 <HAL_I2C_Mem_Write+0x17a>
    if ((pData == NULL) || (Size == 0U))
 80013a0:	2a00      	cmp	r2, #0
 80013a2:	d100      	bne.n	80013a6 <HAL_I2C_Mem_Write+0x2e>
 80013a4:	e09b      	b.n	80014de <HAL_I2C_Mem_Write+0x166>
 80013a6:	465b      	mov	r3, fp
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d100      	bne.n	80013ae <HAL_I2C_Mem_Write+0x36>
 80013ac:	e097      	b.n	80014de <HAL_I2C_Mem_Write+0x166>
    __HAL_LOCK(hi2c);
 80013ae:	2340      	movs	r3, #64	; 0x40
 80013b0:	5cc2      	ldrb	r2, [r0, r3]
 80013b2:	2a01      	cmp	r2, #1
 80013b4:	d100      	bne.n	80013b8 <HAL_I2C_Mem_Write+0x40>
 80013b6:	e09c      	b.n	80014f2 <HAL_I2C_Mem_Write+0x17a>
 80013b8:	2201      	movs	r2, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013ba:	2680      	movs	r6, #128	; 0x80
    __HAL_LOCK(hi2c);
 80013bc:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80013be:	f7ff fc51 	bl	8000c64 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	0236      	lsls	r6, r6, #8
 80013c6:	699a      	ldr	r2, [r3, #24]
    tickstart = HAL_GetTick();
 80013c8:	0005      	movs	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013ca:	4232      	tst	r2, r6
 80013cc:	d00c      	beq.n	80013e8 <HAL_I2C_Mem_Write+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ce:	f7ff fc49 	bl	8000c64 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80013d2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013d4:	1b40      	subs	r0, r0, r5
 80013d6:	2819      	cmp	r0, #25
 80013d8:	d903      	bls.n	80013e2 <HAL_I2C_Mem_Write+0x6a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80013da:	699a      	ldr	r2, [r3, #24]
 80013dc:	4232      	tst	r2, r6
 80013de:	d000      	beq.n	80013e2 <HAL_I2C_Mem_Write+0x6a>
 80013e0:	e089      	b.n	80014f6 <HAL_I2C_Mem_Write+0x17e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013e2:	699a      	ldr	r2, [r3, #24]
 80013e4:	4232      	tst	r2, r6
 80013e6:	d1f2      	bne.n	80013ce <HAL_I2C_Mem_Write+0x56>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013e8:	2241      	movs	r2, #65	; 0x41
 80013ea:	2121      	movs	r1, #33	; 0x21
 80013ec:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013ee:	3201      	adds	r2, #1
 80013f0:	311f      	adds	r1, #31
 80013f2:	54a1      	strb	r1, [r4, r2]
    hi2c->pBuffPtr  = pData;
 80013f4:	4651      	mov	r1, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f6:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 80013f8:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80013fa:	4659      	mov	r1, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013fc:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 80013fe:	6362      	str	r2, [r4, #52]	; 0x34
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001400:	4642      	mov	r2, r8
    hi2c->XferCount = Size;
 8001402:	8561      	strh	r1, [r4, #42]	; 0x2a
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001404:	6859      	ldr	r1, [r3, #4]
 8001406:	4880      	ldr	r0, [pc, #512]	; (8001608 <HAL_I2C_Mem_Write+0x290>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001408:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800140a:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800140c:	05bf      	lsls	r7, r7, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800140e:	0412      	lsls	r2, r2, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8001410:	430a      	orrs	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001412:	0dbf      	lsrs	r7, r7, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8001414:	497d      	ldr	r1, [pc, #500]	; (800160c <HAL_I2C_Mem_Write+0x294>)
 8001416:	433a      	orrs	r2, r7
 8001418:	430a      	orrs	r2, r1
 800141a:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800141c:	0020      	movs	r0, r4
 800141e:	002a      	movs	r2, r5
 8001420:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001422:	f7ff fd95 	bl	8000f50 <I2C_WaitOnTXISFlagUntilTimeout>
 8001426:	2800      	cmp	r0, #0
 8001428:	d000      	beq.n	800142c <HAL_I2C_Mem_Write+0xb4>
 800142a:	e0a0      	b.n	800156e <HAL_I2C_Mem_Write+0x1f6>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800142c:	4643      	mov	r3, r8
 800142e:	2b01      	cmp	r3, #1
 8001430:	d000      	beq.n	8001434 <HAL_I2C_Mem_Write+0xbc>
 8001432:	e090      	b.n	8001556 <HAL_I2C_Mem_Write+0x1de>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001434:	464b      	mov	r3, r9
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001436:	2680      	movs	r6, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001438:	6822      	ldr	r2, [r4, #0]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	6293      	str	r3, [r2, #40]	; 0x28
 800143e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001440:	3301      	adds	r3, #1
 8001442:	d165      	bne.n	8001510 <HAL_I2C_Mem_Write+0x198>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	6993      	ldr	r3, [r2, #24]
 8001448:	4219      	tst	r1, r3
 800144a:	d0fc      	beq.n	8001446 <HAL_I2C_Mem_Write+0xce>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800144c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800144e:	2bff      	cmp	r3, #255	; 0xff
 8001450:	d900      	bls.n	8001454 <HAL_I2C_Mem_Write+0xdc>
 8001452:	e076      	b.n	8001542 <HAL_I2C_Mem_Write+0x1ca>
      hi2c->XferSize = hi2c->XferCount;
 8001454:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8001456:	486e      	ldr	r0, [pc, #440]	; (8001610 <HAL_I2C_Mem_Write+0x298>)
 8001458:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 800145a:	b29b      	uxth	r3, r3
 800145c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800145e:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001460:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8001462:	4339      	orrs	r1, r7
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001464:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8001466:	430b      	orrs	r3, r1
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	0489      	lsls	r1, r1, #18
 800146c:	430b      	orrs	r3, r1
 800146e:	6053      	str	r3, [r2, #4]
 8001470:	4b67      	ldr	r3, [pc, #412]	; (8001610 <HAL_I2C_Mem_Write+0x298>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001472:	2680      	movs	r6, #128	; 0x80
  MODIFY_REG(hi2c->Instance->CR2, \
 8001474:	4698      	mov	r8, r3
 8001476:	e003      	b.n	8001480 <HAL_I2C_Mem_Write+0x108>
    } while (hi2c->XferCount > 0U);
 8001478:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800147a:	2b00      	cmp	r3, #0
 800147c:	d100      	bne.n	8001480 <HAL_I2C_Mem_Write+0x108>
 800147e:	e0ad      	b.n	80015dc <HAL_I2C_Mem_Write+0x264>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001480:	002a      	movs	r2, r5
 8001482:	0020      	movs	r0, r4
 8001484:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001486:	f7ff fd63 	bl	8000f50 <I2C_WaitOnTXISFlagUntilTimeout>
 800148a:	2800      	cmp	r0, #0
 800148c:	d000      	beq.n	8001490 <HAL_I2C_Mem_Write+0x118>
 800148e:	e094      	b.n	80015ba <HAL_I2C_Mem_Write+0x242>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001496:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001498:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800149a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800149c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80014a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014a6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80014a8:	3b01      	subs	r3, #1
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014ae:	2900      	cmp	r1, #0
 80014b0:	d0e2      	beq.n	8001478 <HAL_I2C_Mem_Write+0x100>
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1e0      	bne.n	8001478 <HAL_I2C_Mem_Write+0x100>
 80014b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014b8:	3301      	adds	r3, #1
 80014ba:	d161      	bne.n	8001580 <HAL_I2C_Mem_Write+0x208>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014bc:	6993      	ldr	r3, [r2, #24]
 80014be:	421e      	tst	r6, r3
 80014c0:	d0fc      	beq.n	80014bc <HAL_I2C_Mem_Write+0x144>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014c4:	2bff      	cmp	r3, #255	; 0xff
 80014c6:	d800      	bhi.n	80014ca <HAL_I2C_Mem_Write+0x152>
 80014c8:	e079      	b.n	80015be <HAL_I2C_Mem_Write+0x246>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ca:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80014cc:	4641      	mov	r1, r8
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ce:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80014d0:	6853      	ldr	r3, [r2, #4]
 80014d2:	400b      	ands	r3, r1
 80014d4:	494f      	ldr	r1, [pc, #316]	; (8001614 <HAL_I2C_Mem_Write+0x29c>)
 80014d6:	433b      	orrs	r3, r7
 80014d8:	430b      	orrs	r3, r1
 80014da:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80014dc:	e7cc      	b.n	8001478 <HAL_I2C_Mem_Write+0x100>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014de:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 80014e0:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	6463      	str	r3, [r4, #68]	; 0x44
}
 80014e6:	bcf0      	pop	{r4, r5, r6, r7}
 80014e8:	46bb      	mov	fp, r7
 80014ea:	46b2      	mov	sl, r6
 80014ec:	46a9      	mov	r9, r5
 80014ee:	46a0      	mov	r8, r4
 80014f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80014f2:	2002      	movs	r0, #2
 80014f4:	e7f7      	b.n	80014e6 <HAL_I2C_Mem_Write+0x16e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014f6:	2220      	movs	r2, #32
 80014f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80014fa:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014fc:	4313      	orrs	r3, r2
 80014fe:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001500:	2341      	movs	r3, #65	; 0x41
 8001502:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	3222      	adds	r2, #34	; 0x22
 8001508:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 800150a:	3a02      	subs	r2, #2
 800150c:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 800150e:	e7ea      	b.n	80014e6 <HAL_I2C_Mem_Write+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001510:	6993      	ldr	r3, [r2, #24]
 8001512:	421e      	tst	r6, r3
 8001514:	d19a      	bne.n	800144c <HAL_I2C_Mem_Write+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001516:	f7ff fba5 	bl	8000c64 <HAL_GetTick>
 800151a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800151c:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151e:	1b40      	subs	r0, r0, r5
 8001520:	4283      	cmp	r3, r0
 8001522:	d229      	bcs.n	8001578 <HAL_I2C_Mem_Write+0x200>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001524:	0031      	movs	r1, r6
 8001526:	6993      	ldr	r3, [r2, #24]
 8001528:	4019      	ands	r1, r3
 800152a:	421e      	tst	r6, r3
 800152c:	d000      	beq.n	8001530 <HAL_I2C_Mem_Write+0x1b8>
 800152e:	e786      	b.n	800143e <HAL_I2C_Mem_Write+0xc6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001530:	2220      	movs	r2, #32
 8001532:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001534:	4313      	orrs	r3, r2
 8001536:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001538:	2341      	movs	r3, #65	; 0x41
 800153a:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800153c:	3301      	adds	r3, #1
 800153e:	54e1      	strb	r1, [r4, r3]
    return HAL_ERROR;
 8001540:	e015      	b.n	800156e <HAL_I2C_Mem_Write+0x1f6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001542:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8001544:	4932      	ldr	r1, [pc, #200]	; (8001610 <HAL_I2C_Mem_Write+0x298>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001546:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8001548:	6853      	ldr	r3, [r2, #4]
 800154a:	400b      	ands	r3, r1
 800154c:	4931      	ldr	r1, [pc, #196]	; (8001614 <HAL_I2C_Mem_Write+0x29c>)
 800154e:	433b      	orrs	r3, r7
 8001550:	430b      	orrs	r3, r1
 8001552:	6053      	str	r3, [r2, #4]
}
 8001554:	e78c      	b.n	8001470 <HAL_I2C_Mem_Write+0xf8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001556:	464a      	mov	r2, r9
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	0a12      	lsrs	r2, r2, #8
 800155c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800155e:	0020      	movs	r0, r4
 8001560:	002a      	movs	r2, r5
 8001562:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001564:	f7ff fcf4 	bl	8000f50 <I2C_WaitOnTXISFlagUntilTimeout>
 8001568:	2800      	cmp	r0, #0
 800156a:	d100      	bne.n	800156e <HAL_I2C_Mem_Write+0x1f6>
 800156c:	e762      	b.n	8001434 <HAL_I2C_Mem_Write+0xbc>
      __HAL_UNLOCK(hi2c);
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	2200      	movs	r2, #0
      return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8001574:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8001576:	e7b6      	b.n	80014e6 <HAL_I2C_Mem_Write+0x16e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001578:	2b00      	cmp	r3, #0
 800157a:	d000      	beq.n	800157e <HAL_I2C_Mem_Write+0x206>
 800157c:	e75f      	b.n	800143e <HAL_I2C_Mem_Write+0xc6>
 800157e:	e7d1      	b.n	8001524 <HAL_I2C_Mem_Write+0x1ac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001580:	6993      	ldr	r3, [r2, #24]
 8001582:	421e      	tst	r6, r3
 8001584:	d19d      	bne.n	80014c2 <HAL_I2C_Mem_Write+0x14a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001586:	f7ff fb6d 	bl	8000c64 <HAL_GetTick>
 800158a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800158c:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800158e:	1b40      	subs	r0, r0, r5
 8001590:	4283      	cmp	r3, r0
 8001592:	d302      	bcc.n	800159a <HAL_I2C_Mem_Write+0x222>
 8001594:	2b00      	cmp	r3, #0
 8001596:	d000      	beq.n	800159a <HAL_I2C_Mem_Write+0x222>
 8001598:	e78d      	b.n	80014b6 <HAL_I2C_Mem_Write+0x13e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800159a:	0031      	movs	r1, r6
 800159c:	6993      	ldr	r3, [r2, #24]
 800159e:	4019      	ands	r1, r3
 80015a0:	421e      	tst	r6, r3
 80015a2:	d000      	beq.n	80015a6 <HAL_I2C_Mem_Write+0x22e>
 80015a4:	e787      	b.n	80014b6 <HAL_I2C_Mem_Write+0x13e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015a6:	2220      	movs	r2, #32
 80015a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015aa:	4313      	orrs	r3, r2
 80015ac:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	2341      	movs	r3, #65	; 0x41
 80015b0:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b2:	3301      	adds	r3, #1
 80015b4:	54e1      	strb	r1, [r4, r3]
          __HAL_UNLOCK(hi2c);
 80015b6:	3b02      	subs	r3, #2
 80015b8:	54e1      	strb	r1, [r4, r3]
          return HAL_ERROR;
 80015ba:	2001      	movs	r0, #1
 80015bc:	e793      	b.n	80014e6 <HAL_I2C_Mem_Write+0x16e>
  MODIFY_REG(hi2c->Instance->CR2, \
 80015be:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 80015c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80015c2:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80015c8:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80015ca:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80015cc:	4339      	orrs	r1, r7
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80015ce:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80015d0:	430b      	orrs	r3, r1
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	0489      	lsls	r1, r1, #18
 80015d6:	430b      	orrs	r3, r1
 80015d8:	6053      	str	r3, [r2, #4]
}
 80015da:	e74d      	b.n	8001478 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015dc:	002a      	movs	r2, r5
 80015de:	0020      	movs	r0, r4
 80015e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80015e2:	f7ff fd9d 	bl	8001120 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d1e7      	bne.n	80015ba <HAL_I2C_Mem_Write+0x242>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ea:	2120      	movs	r1, #32
 80015ec:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80015ee:	4d0a      	ldr	r5, [pc, #40]	; (8001618 <HAL_I2C_Mem_Write+0x2a0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015f0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	402a      	ands	r2, r5
 80015f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80015f8:	2341      	movs	r3, #65	; 0x41
 80015fa:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015fc:	3301      	adds	r3, #1
 80015fe:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8001600:	3b02      	subs	r3, #2
 8001602:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8001604:	e76f      	b.n	80014e6 <HAL_I2C_Mem_Write+0x16e>
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	fc009800 	.word	0xfc009800
 800160c:	01002000 	.word	0x01002000
 8001610:	fc009c00 	.word	0xfc009c00
 8001614:	01ff0000 	.word	0x01ff0000
 8001618:	fe00e800 	.word	0xfe00e800

0800161c <HAL_I2C_Mem_Read>:
{
 800161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161e:	4645      	mov	r5, r8
 8001620:	46de      	mov	lr, fp
 8001622:	4657      	mov	r7, sl
 8001624:	464e      	mov	r6, r9
 8001626:	b5e0      	push	{r5, r6, r7, lr}
 8001628:	4699      	mov	r9, r3
 800162a:	ab0a      	add	r3, sp, #40	; 0x28
 800162c:	0015      	movs	r5, r2
 800162e:	cb04      	ldmia	r3!, {r2}
 8001630:	0004      	movs	r4, r0
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	4688      	mov	r8, r1
 8001636:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001638:	2341      	movs	r3, #65	; 0x41
 800163a:	5cc3      	ldrb	r3, [r0, r3]
{
 800163c:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800163e:	2b20      	cmp	r3, #32
 8001640:	d000      	beq.n	8001644 <HAL_I2C_Mem_Read+0x28>
 8001642:	e0b1      	b.n	80017a8 <HAL_I2C_Mem_Read+0x18c>
    if ((pData == NULL) || (Size == 0U))
 8001644:	2a00      	cmp	r2, #0
 8001646:	d100      	bne.n	800164a <HAL_I2C_Mem_Read+0x2e>
 8001648:	e0a4      	b.n	8001794 <HAL_I2C_Mem_Read+0x178>
 800164a:	465b      	mov	r3, fp
 800164c:	2b00      	cmp	r3, #0
 800164e:	d100      	bne.n	8001652 <HAL_I2C_Mem_Read+0x36>
 8001650:	e0a0      	b.n	8001794 <HAL_I2C_Mem_Read+0x178>
    __HAL_LOCK(hi2c);
 8001652:	2340      	movs	r3, #64	; 0x40
 8001654:	5cc2      	ldrb	r2, [r0, r3]
 8001656:	2a01      	cmp	r2, #1
 8001658:	d100      	bne.n	800165c <HAL_I2C_Mem_Read+0x40>
 800165a:	e0a5      	b.n	80017a8 <HAL_I2C_Mem_Read+0x18c>
 800165c:	2201      	movs	r2, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800165e:	2780      	movs	r7, #128	; 0x80
    __HAL_LOCK(hi2c);
 8001660:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8001662:	f7ff faff 	bl	8000c64 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	023f      	lsls	r7, r7, #8
 800166a:	699a      	ldr	r2, [r3, #24]
    tickstart = HAL_GetTick();
 800166c:	0006      	movs	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800166e:	423a      	tst	r2, r7
 8001670:	d00c      	beq.n	800168c <HAL_I2C_Mem_Read+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001672:	f7ff faf7 	bl	8000c64 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001676:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001678:	1b80      	subs	r0, r0, r6
 800167a:	2819      	cmp	r0, #25
 800167c:	d903      	bls.n	8001686 <HAL_I2C_Mem_Read+0x6a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800167e:	699a      	ldr	r2, [r3, #24]
 8001680:	423a      	tst	r2, r7
 8001682:	d000      	beq.n	8001686 <HAL_I2C_Mem_Read+0x6a>
 8001684:	e092      	b.n	80017ac <HAL_I2C_Mem_Read+0x190>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001686:	699a      	ldr	r2, [r3, #24]
 8001688:	423a      	tst	r2, r7
 800168a:	d1f2      	bne.n	8001672 <HAL_I2C_Mem_Read+0x56>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800168c:	2241      	movs	r2, #65	; 0x41
 800168e:	2122      	movs	r1, #34	; 0x22
 8001690:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001692:	3201      	adds	r2, #1
 8001694:	311e      	adds	r1, #30
 8001696:	54a1      	strb	r1, [r4, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001698:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 800169a:	4651      	mov	r1, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800169c:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 800169e:	6362      	str	r2, [r4, #52]	; 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016a0:	4642      	mov	r2, r8
    hi2c->pBuffPtr  = pData;
 80016a2:	6261      	str	r1, [r4, #36]	; 0x24
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016a4:	0597      	lsls	r7, r2, #22
    hi2c->XferCount = Size;
 80016a6:	4659      	mov	r1, fp
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016a8:	0dba      	lsrs	r2, r7, #22
 80016aa:	4690      	mov	r8, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016ac:	464a      	mov	r2, r9
    hi2c->XferCount = Size;
 80016ae:	8561      	strh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80016b0:	6859      	ldr	r1, [r3, #4]
 80016b2:	488b      	ldr	r0, [pc, #556]	; (80018e0 <HAL_I2C_Mem_Read+0x2c4>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016b4:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 80016b6:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016b8:	0412      	lsls	r2, r2, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80016ba:	430a      	orrs	r2, r1
 80016bc:	4641      	mov	r1, r8
 80016be:	430a      	orrs	r2, r1
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	0189      	lsls	r1, r1, #6
 80016c4:	430a      	orrs	r2, r1
 80016c6:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016c8:	0020      	movs	r0, r4
 80016ca:	0032      	movs	r2, r6
 80016cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80016ce:	f7ff fc3f 	bl	8000f50 <I2C_WaitOnTXISFlagUntilTimeout>
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d000      	beq.n	80016d8 <HAL_I2C_Mem_Read+0xbc>
 80016d6:	e0d7      	b.n	8001888 <HAL_I2C_Mem_Read+0x26c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016d8:	464b      	mov	r3, r9
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d000      	beq.n	80016e0 <HAL_I2C_Mem_Read+0xc4>
 80016de:	e072      	b.n	80017c6 <HAL_I2C_Mem_Read+0x1aa>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016e0:	6822      	ldr	r2, [r4, #0]
 80016e2:	b2ed      	uxtb	r5, r5
 80016e4:	6295      	str	r5, [r2, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016e6:	2540      	movs	r5, #64	; 0x40
 80016e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80016ea:	3301      	adds	r3, #1
 80016ec:	d000      	beq.n	80016f0 <HAL_I2C_Mem_Read+0xd4>
 80016ee:	e0af      	b.n	8001850 <HAL_I2C_Mem_Read+0x234>
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	6993      	ldr	r3, [r2, #24]
 80016f4:	4219      	tst	r1, r3
 80016f6:	d0fc      	beq.n	80016f2 <HAL_I2C_Mem_Read+0xd6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016fa:	2bff      	cmp	r3, #255	; 0xff
 80016fc:	d800      	bhi.n	8001700 <HAL_I2C_Mem_Read+0xe4>
 80016fe:	e0c8      	b.n	8001892 <HAL_I2C_Mem_Read+0x276>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001700:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8001702:	4977      	ldr	r1, [pc, #476]	; (80018e0 <HAL_I2C_Mem_Read+0x2c4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001704:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8001706:	6853      	ldr	r3, [r2, #4]
 8001708:	400b      	ands	r3, r1
 800170a:	4641      	mov	r1, r8
 800170c:	430b      	orrs	r3, r1
 800170e:	4975      	ldr	r1, [pc, #468]	; (80018e4 <HAL_I2C_Mem_Read+0x2c8>)
 8001710:	430b      	orrs	r3, r1
 8001712:	6053      	str	r3, [r2, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001714:	2504      	movs	r5, #4
 8001716:	2780      	movs	r7, #128	; 0x80
 8001718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800171a:	3301      	adds	r3, #1
 800171c:	d11d      	bne.n	800175a <HAL_I2C_Mem_Read+0x13e>
 800171e:	6993      	ldr	r3, [r2, #24]
 8001720:	421d      	tst	r5, r3
 8001722:	d0fc      	beq.n	800171e <HAL_I2C_Mem_Read+0x102>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001724:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001728:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800172a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800172c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800172e:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8001730:	3301      	adds	r3, #1
      hi2c->XferCount--;
 8001732:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8001734:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001736:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001738:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800173a:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800173c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800173e:	b29b      	uxth	r3, r3
 8001740:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001742:	2a00      	cmp	r2, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Mem_Read+0x12e>
 8001746:	2b00      	cmp	r3, #0
 8001748:	d04b      	beq.n	80017e2 <HAL_I2C_Mem_Read+0x1c6>
    } while (hi2c->XferCount > 0U);
 800174a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800174c:	2b00      	cmp	r3, #0
 800174e:	d100      	bne.n	8001752 <HAL_I2C_Mem_Read+0x136>
 8001750:	e0ae      	b.n	80018b0 <HAL_I2C_Mem_Read+0x294>
 8001752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001754:	6822      	ldr	r2, [r4, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	d0e1      	beq.n	800171e <HAL_I2C_Mem_Read+0x102>
 800175a:	6993      	ldr	r3, [r2, #24]
 800175c:	421d      	tst	r5, r3
 800175e:	d1e1      	bne.n	8001724 <HAL_I2C_Mem_Read+0x108>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001760:	f7ff fa80 	bl	8000c64 <HAL_GetTick>
 8001764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001766:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001768:	1b80      	subs	r0, r0, r6
 800176a:	4283      	cmp	r3, r0
 800176c:	d301      	bcc.n	8001772 <HAL_I2C_Mem_Read+0x156>
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1d2      	bne.n	8001718 <HAL_I2C_Mem_Read+0xfc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001772:	0029      	movs	r1, r5
 8001774:	6993      	ldr	r3, [r2, #24]
 8001776:	4019      	ands	r1, r3
 8001778:	421d      	tst	r5, r3
 800177a:	d1cd      	bne.n	8001718 <HAL_I2C_Mem_Read+0xfc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800177c:	2220      	movs	r2, #32
 800177e:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001780:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001782:	4313      	orrs	r3, r2
 8001784:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001786:	2341      	movs	r3, #65	; 0x41
 8001788:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800178a:	3301      	adds	r3, #1
 800178c:	54e1      	strb	r1, [r4, r3]
          __HAL_UNLOCK(hi2c);
 800178e:	3b02      	subs	r3, #2
 8001790:	54e1      	strb	r1, [r4, r3]
          return HAL_ERROR;
 8001792:	e003      	b.n	800179c <HAL_I2C_Mem_Read+0x180>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001794:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8001796:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800179c:	bcf0      	pop	{r4, r5, r6, r7}
 800179e:	46bb      	mov	fp, r7
 80017a0:	46b2      	mov	sl, r6
 80017a2:	46a9      	mov	r9, r5
 80017a4:	46a0      	mov	r8, r4
 80017a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80017a8:	2002      	movs	r0, #2
 80017aa:	e7f7      	b.n	800179c <HAL_I2C_Mem_Read+0x180>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ac:	2220      	movs	r2, #32
 80017ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80017b0:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b2:	4313      	orrs	r3, r2
 80017b4:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017b6:	2341      	movs	r3, #65	; 0x41
 80017b8:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	3222      	adds	r2, #34	; 0x22
 80017be:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 80017c0:	3a02      	subs	r2, #2
 80017c2:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 80017c4:	e7ea      	b.n	800179c <HAL_I2C_Mem_Read+0x180>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	0a2a      	lsrs	r2, r5, #8
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017cc:	0020      	movs	r0, r4
 80017ce:	0032      	movs	r2, r6
 80017d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80017d2:	f7ff fbbd 	bl	8000f50 <I2C_WaitOnTXISFlagUntilTimeout>
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d156      	bne.n	8001888 <HAL_I2C_Mem_Read+0x26c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017da:	6822      	ldr	r2, [r4, #0]
 80017dc:	b2eb      	uxtb	r3, r5
 80017de:	6293      	str	r3, [r2, #40]	; 0x28
 80017e0:	e781      	b.n	80016e6 <HAL_I2C_Mem_Read+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017e2:	6822      	ldr	r2, [r4, #0]
 80017e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80017e6:	3301      	adds	r3, #1
 80017e8:	d110      	bne.n	800180c <HAL_I2C_Mem_Read+0x1f0>
 80017ea:	6993      	ldr	r3, [r2, #24]
 80017ec:	421f      	tst	r7, r3
 80017ee:	d0fc      	beq.n	80017ea <HAL_I2C_Mem_Read+0x1ce>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017f2:	2bff      	cmp	r3, #255	; 0xff
 80017f4:	d91c      	bls.n	8001830 <HAL_I2C_Mem_Read+0x214>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017f6:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80017f8:	493b      	ldr	r1, [pc, #236]	; (80018e8 <HAL_I2C_Mem_Read+0x2cc>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017fa:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80017fc:	6853      	ldr	r3, [r2, #4]
 80017fe:	400b      	ands	r3, r1
 8001800:	4641      	mov	r1, r8
 8001802:	430b      	orrs	r3, r1
 8001804:	4939      	ldr	r1, [pc, #228]	; (80018ec <HAL_I2C_Mem_Read+0x2d0>)
 8001806:	430b      	orrs	r3, r1
 8001808:	6053      	str	r3, [r2, #4]
}
 800180a:	e79e      	b.n	800174a <HAL_I2C_Mem_Read+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800180c:	6993      	ldr	r3, [r2, #24]
 800180e:	421f      	tst	r7, r3
 8001810:	d1ee      	bne.n	80017f0 <HAL_I2C_Mem_Read+0x1d4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001812:	f7ff fa27 	bl	8000c64 <HAL_GetTick>
 8001816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001818:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800181a:	1b80      	subs	r0, r0, r6
 800181c:	4283      	cmp	r3, r0
 800181e:	d301      	bcc.n	8001824 <HAL_I2C_Mem_Read+0x208>
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1df      	bne.n	80017e4 <HAL_I2C_Mem_Read+0x1c8>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001824:	0039      	movs	r1, r7
 8001826:	6993      	ldr	r3, [r2, #24]
 8001828:	4019      	ands	r1, r3
 800182a:	421f      	tst	r7, r3
 800182c:	d1da      	bne.n	80017e4 <HAL_I2C_Mem_Read+0x1c8>
 800182e:	e7a5      	b.n	800177c <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = hi2c->XferCount;
 8001830:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8001832:	482d      	ldr	r0, [pc, #180]	; (80018e8 <HAL_I2C_Mem_Read+0x2cc>)
 8001834:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8001836:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8001838:	4001      	ands	r1, r0
 800183a:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 800183c:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800183e:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8001840:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001842:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8001844:	430b      	orrs	r3, r1
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	0489      	lsls	r1, r1, #18
 800184a:	430b      	orrs	r3, r1
 800184c:	6053      	str	r3, [r2, #4]
}
 800184e:	e77c      	b.n	800174a <HAL_I2C_Mem_Read+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001850:	6993      	ldr	r3, [r2, #24]
 8001852:	421d      	tst	r5, r3
 8001854:	d000      	beq.n	8001858 <HAL_I2C_Mem_Read+0x23c>
 8001856:	e74f      	b.n	80016f8 <HAL_I2C_Mem_Read+0xdc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001858:	f7ff fa04 	bl	8000c64 <HAL_GetTick>
 800185c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800185e:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001860:	1b80      	subs	r0, r0, r6
 8001862:	4283      	cmp	r3, r0
 8001864:	d302      	bcc.n	800186c <HAL_I2C_Mem_Read+0x250>
 8001866:	2b00      	cmp	r3, #0
 8001868:	d000      	beq.n	800186c <HAL_I2C_Mem_Read+0x250>
 800186a:	e73d      	b.n	80016e8 <HAL_I2C_Mem_Read+0xcc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800186c:	0029      	movs	r1, r5
 800186e:	6993      	ldr	r3, [r2, #24]
 8001870:	4019      	ands	r1, r3
 8001872:	421d      	tst	r5, r3
 8001874:	d000      	beq.n	8001878 <HAL_I2C_Mem_Read+0x25c>
 8001876:	e737      	b.n	80016e8 <HAL_I2C_Mem_Read+0xcc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001878:	2220      	movs	r2, #32
 800187a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800187c:	4313      	orrs	r3, r2
 800187e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001880:	2341      	movs	r3, #65	; 0x41
 8001882:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001884:	3301      	adds	r3, #1
 8001886:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hi2c);
 8001888:	2340      	movs	r3, #64	; 0x40
 800188a:	2200      	movs	r2, #0
      return HAL_ERROR;
 800188c:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800188e:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8001890:	e784      	b.n	800179c <HAL_I2C_Mem_Read+0x180>
      hi2c->XferSize = hi2c->XferCount;
 8001892:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8001894:	4812      	ldr	r0, [pc, #72]	; (80018e0 <HAL_I2C_Mem_Read+0x2c4>)
 8001896:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8001898:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800189a:	4001      	ands	r1, r0
 800189c:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 800189e:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018a0:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80018a2:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018a4:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80018a6:	430b      	orrs	r3, r1
 80018a8:	4911      	ldr	r1, [pc, #68]	; (80018f0 <HAL_I2C_Mem_Read+0x2d4>)
 80018aa:	430b      	orrs	r3, r1
 80018ac:	6053      	str	r3, [r2, #4]
}
 80018ae:	e731      	b.n	8001714 <HAL_I2C_Mem_Read+0xf8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b0:	0032      	movs	r2, r6
 80018b2:	0020      	movs	r0, r4
 80018b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80018b6:	f7ff fc33 	bl	8001120 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018ba:	2800      	cmp	r0, #0
 80018bc:	d10d      	bne.n	80018da <HAL_I2C_Mem_Read+0x2be>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018be:	2120      	movs	r1, #32
 80018c0:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80018c2:	4d0c      	ldr	r5, [pc, #48]	; (80018f4 <HAL_I2C_Mem_Read+0x2d8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018c4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	402a      	ands	r2, r5
 80018ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80018cc:	2341      	movs	r3, #65	; 0x41
 80018ce:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018d0:	3301      	adds	r3, #1
 80018d2:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80018d4:	3b02      	subs	r3, #2
 80018d6:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 80018d8:	e760      	b.n	800179c <HAL_I2C_Mem_Read+0x180>
      return HAL_ERROR;
 80018da:	2001      	movs	r0, #1
 80018dc:	e75e      	b.n	800179c <HAL_I2C_Mem_Read+0x180>
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	fc009800 	.word	0xfc009800
 80018e4:	01ff2400 	.word	0x01ff2400
 80018e8:	fc009c00 	.word	0xfc009c00
 80018ec:	01ff0000 	.word	0x01ff0000
 80018f0:	02002400 	.word	0x02002400
 80018f4:	fe00e800 	.word	0xfe00e800

080018f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018fa:	2441      	movs	r4, #65	; 0x41
 80018fc:	5d03      	ldrb	r3, [r0, r4]
{
 80018fe:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001900:	b2dd      	uxtb	r5, r3
 8001902:	2b20      	cmp	r3, #32
 8001904:	d11a      	bne.n	800193c <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001906:	2640      	movs	r6, #64	; 0x40
 8001908:	5d83      	ldrb	r3, [r0, r6]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d016      	beq.n	800193c <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800190e:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001910:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001912:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8001914:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001916:	490a      	ldr	r1, [pc, #40]	; (8001940 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	43ba      	bics	r2, r7
 800191c:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	400a      	ands	r2, r1
 8001922:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001924:	4662      	mov	r2, ip
 8001926:	6819      	ldr	r1, [r3, #0]
 8001928:	4311      	orrs	r1, r2
 800192a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	433a      	orrs	r2, r7
 8001930:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001932:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001934:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8001936:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8001938:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800193c:	2002      	movs	r0, #2
 800193e:	e7fc      	b.n	800193a <HAL_I2CEx_ConfigAnalogFilter+0x42>
 8001940:	ffffefff 	.word	0xffffefff

08001944 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	46ce      	mov	lr, r9
 8001948:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800194a:	2441      	movs	r4, #65	; 0x41
{
 800194c:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800194e:	5d03      	ldrb	r3, [r0, r4]
 8001950:	b2dd      	uxtb	r5, r3
 8001952:	2b20      	cmp	r3, #32
 8001954:	d11f      	bne.n	8001996 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001956:	2640      	movs	r6, #64	; 0x40
 8001958:	5d83      	ldrb	r3, [r0, r6]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d01b      	beq.n	8001996 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800195e:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001960:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001962:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8001964:	6802      	ldr	r2, [r0, #0]
 8001966:	46b9      	mov	r9, r7
 8001968:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800196a:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 800196c:	43bb      	bics	r3, r7
 800196e:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8001970:	6813      	ldr	r3, [r2, #0]
 8001972:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 8001974:	4647      	mov	r7, r8
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 8001978:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 800197a:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800197c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800197e:	4649      	mov	r1, r9
 8001980:	6813      	ldr	r3, [r2, #0]
 8001982:	430b      	orrs	r3, r1
 8001984:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001986:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001988:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 800198a:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 800198c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800198e:	bcc0      	pop	{r6, r7}
 8001990:	46b9      	mov	r9, r7
 8001992:	46b0      	mov	r8, r6
 8001994:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001996:	2002      	movs	r0, #2
 8001998:	e7f9      	b.n	800198e <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	fffff0ff 	.word	0xfffff0ff

080019a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a2:	46ce      	mov	lr, r9
 80019a4:	4647      	mov	r7, r8
 80019a6:	b580      	push	{r7, lr}
 80019a8:	0004      	movs	r4, r0
 80019aa:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019ac:	2800      	cmp	r0, #0
 80019ae:	d100      	bne.n	80019b2 <HAL_RCC_OscConfig+0x12>
 80019b0:	e0ee      	b.n	8001b90 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b2:	6803      	ldr	r3, [r0, #0]
 80019b4:	07da      	lsls	r2, r3, #31
 80019b6:	d535      	bpl.n	8001a24 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019b8:	210c      	movs	r1, #12
 80019ba:	48c3      	ldr	r0, [pc, #780]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 80019bc:	6842      	ldr	r2, [r0, #4]
 80019be:	400a      	ands	r2, r1
 80019c0:	2a04      	cmp	r2, #4
 80019c2:	d100      	bne.n	80019c6 <HAL_RCC_OscConfig+0x26>
 80019c4:	e101      	b.n	8001bca <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c6:	6842      	ldr	r2, [r0, #4]
 80019c8:	4011      	ands	r1, r2
 80019ca:	2908      	cmp	r1, #8
 80019cc:	d100      	bne.n	80019d0 <HAL_RCC_OscConfig+0x30>
 80019ce:	e0f8      	b.n	8001bc2 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	6863      	ldr	r3, [r4, #4]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d00f      	beq.n	80019f6 <HAL_RCC_OscConfig+0x56>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d100      	bne.n	80019dc <HAL_RCC_OscConfig+0x3c>
 80019da:	e11e      	b.n	8001c1a <HAL_RCC_OscConfig+0x27a>
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d100      	bne.n	80019e2 <HAL_RCC_OscConfig+0x42>
 80019e0:	e1a7      	b.n	8001d32 <HAL_RCC_OscConfig+0x392>
 80019e2:	4bb9      	ldr	r3, [pc, #740]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 80019e4:	49b9      	ldr	r1, [pc, #740]	; (8001ccc <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	400a      	ands	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	49b8      	ldr	r1, [pc, #736]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 80019f0:	400a      	ands	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e005      	b.n	8001a02 <HAL_RCC_OscConfig+0x62>
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	4ab3      	ldr	r2, [pc, #716]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	6811      	ldr	r1, [r2, #0]
 80019fe:	430b      	orrs	r3, r1
 8001a00:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff f92f 	bl	8000c64 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001a08:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4faf      	ldr	r7, [pc, #700]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 8001a0c:	02b6      	lsls	r6, r6, #10
 8001a0e:	e005      	b.n	8001a1c <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff f928 	bl	8000c64 <HAL_GetTick>
 8001a14:	1b40      	subs	r0, r0, r5
 8001a16:	2864      	cmp	r0, #100	; 0x64
 8001a18:	d900      	bls.n	8001a1c <HAL_RCC_OscConfig+0x7c>
 8001a1a:	e0fc      	b.n	8001c16 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4233      	tst	r3, r6
 8001a20:	d0f6      	beq.n	8001a10 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	079a      	lsls	r2, r3, #30
 8001a26:	d529      	bpl.n	8001a7c <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a28:	220c      	movs	r2, #12
 8001a2a:	49a7      	ldr	r1, [pc, #668]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 8001a2c:	6848      	ldr	r0, [r1, #4]
 8001a2e:	4202      	tst	r2, r0
 8001a30:	d100      	bne.n	8001a34 <HAL_RCC_OscConfig+0x94>
 8001a32:	e0a6      	b.n	8001b82 <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a34:	6848      	ldr	r0, [r1, #4]
 8001a36:	4002      	ands	r2, r0
 8001a38:	2a08      	cmp	r2, #8
 8001a3a:	d100      	bne.n	8001a3e <HAL_RCC_OscConfig+0x9e>
 8001a3c:	e09d      	b.n	8001b7a <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a3e:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a40:	4da1      	ldr	r5, [pc, #644]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d100      	bne.n	8001a48 <HAL_RCC_OscConfig+0xa8>
 8001a46:	e11f      	b.n	8001c88 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8001a48:	2201      	movs	r2, #1
 8001a4a:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a52:	f7ff f907 	bl	8000c64 <HAL_GetTick>
 8001a56:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a58:	e005      	b.n	8001a66 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff f903 	bl	8000c64 <HAL_GetTick>
 8001a5e:	1b80      	subs	r0, r0, r6
 8001a60:	2802      	cmp	r0, #2
 8001a62:	d900      	bls.n	8001a66 <HAL_RCC_OscConfig+0xc6>
 8001a64:	e0d7      	b.n	8001c16 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a66:	682b      	ldr	r3, [r5, #0]
 8001a68:	421f      	tst	r7, r3
 8001a6a:	d0f6      	beq.n	8001a5a <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	21f8      	movs	r1, #248	; 0xf8
 8001a6e:	682a      	ldr	r2, [r5, #0]
 8001a70:	6923      	ldr	r3, [r4, #16]
 8001a72:	438a      	bics	r2, r1
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4313      	orrs	r3, r2
 8001a78:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	071a      	lsls	r2, r3, #28
 8001a7e:	d42d      	bmi.n	8001adc <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a80:	075a      	lsls	r2, r3, #29
 8001a82:	d544      	bpl.n	8001b0e <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a84:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001a86:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a88:	4b8f      	ldr	r3, [pc, #572]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 8001a8a:	0552      	lsls	r2, r2, #21
 8001a8c:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001a8e:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a90:	4211      	tst	r1, r2
 8001a92:	d108      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	69d9      	ldr	r1, [r3, #28]
 8001a96:	4311      	orrs	r1, r2
 8001a98:	61d9      	str	r1, [r3, #28]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	2780      	movs	r7, #128	; 0x80
 8001aa8:	4e8a      	ldr	r6, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x334>)
 8001aaa:	007f      	lsls	r7, r7, #1
 8001aac:	6833      	ldr	r3, [r6, #0]
 8001aae:	423b      	tst	r3, r7
 8001ab0:	d100      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x114>
 8001ab2:	e094      	b.n	8001bde <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab4:	68a3      	ldr	r3, [r4, #8]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d100      	bne.n	8001abc <HAL_RCC_OscConfig+0x11c>
 8001aba:	e0f8      	b.n	8001cae <HAL_RCC_OscConfig+0x30e>
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d100      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x122>
 8001ac0:	e0c4      	b.n	8001c4c <HAL_RCC_OscConfig+0x2ac>
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d100      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x128>
 8001ac6:	e140      	b.n	8001d4a <HAL_RCC_OscConfig+0x3aa>
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 8001acc:	6a1a      	ldr	r2, [r3, #32]
 8001ace:	438a      	bics	r2, r1
 8001ad0:	621a      	str	r2, [r3, #32]
 8001ad2:	6a1a      	ldr	r2, [r3, #32]
 8001ad4:	3103      	adds	r1, #3
 8001ad6:	438a      	bics	r2, r1
 8001ad8:	621a      	str	r2, [r3, #32]
 8001ada:	e0ec      	b.n	8001cb6 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001adc:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8001ade:	4d7a      	ldr	r5, [pc, #488]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d05b      	beq.n	8001b9c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae8:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001aea:	4313      	orrs	r3, r2
 8001aec:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001aee:	f7ff f8b9 	bl	8000c64 <HAL_GetTick>
 8001af2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af4:	e005      	b.n	8001b02 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af6:	f7ff f8b5 	bl	8000c64 <HAL_GetTick>
 8001afa:	1b80      	subs	r0, r0, r6
 8001afc:	2802      	cmp	r0, #2
 8001afe:	d900      	bls.n	8001b02 <HAL_RCC_OscConfig+0x162>
 8001b00:	e089      	b.n	8001c16 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001b04:	421f      	tst	r7, r3
 8001b06:	d0f6      	beq.n	8001af6 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	075a      	lsls	r2, r3, #29
 8001b0c:	d4ba      	bmi.n	8001a84 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b0e:	06db      	lsls	r3, r3, #27
 8001b10:	d512      	bpl.n	8001b38 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b12:	6963      	ldr	r3, [r4, #20]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d100      	bne.n	8001b1a <HAL_RCC_OscConfig+0x17a>
 8001b18:	e13d      	b.n	8001d96 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b1a:	3305      	adds	r3, #5
 8001b1c:	d000      	beq.n	8001b20 <HAL_RCC_OscConfig+0x180>
 8001b1e:	e0e9      	b.n	8001cf4 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b20:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b22:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b24:	4a68      	ldr	r2, [pc, #416]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 8001b26:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001b28:	438b      	bics	r3, r1
 8001b2a:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b2c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001b2e:	69a3      	ldr	r3, [r4, #24]
 8001b30:	4381      	bics	r1, r0
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b38:	6a23      	ldr	r3, [r4, #32]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d01b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	4d61      	ldr	r5, [pc, #388]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 8001b42:	6869      	ldr	r1, [r5, #4]
 8001b44:	400a      	ands	r2, r1
 8001b46:	2a08      	cmp	r2, #8
 8001b48:	d100      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1ac>
 8001b4a:	e108      	b.n	8001d5e <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d100      	bne.n	8001b52 <HAL_RCC_OscConfig+0x1b2>
 8001b50:	e13f      	b.n	8001dd2 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b52:	682b      	ldr	r3, [r5, #0]
 8001b54:	4a60      	ldr	r2, [pc, #384]	; (8001cd8 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b56:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4013      	ands	r3, r2
 8001b5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f882 	bl	8000c64 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8001b62:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b64:	e004      	b.n	8001b70 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff f87d 	bl	8000c64 <HAL_GetTick>
 8001b6a:	1b00      	subs	r0, r0, r4
 8001b6c:	2802      	cmp	r0, #2
 8001b6e:	d852      	bhi.n	8001c16 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	4233      	tst	r3, r6
 8001b74:	d1f7      	bne.n	8001b66 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8001b76:	2000      	movs	r0, #0
 8001b78:	e00b      	b.n	8001b92 <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b7a:	684a      	ldr	r2, [r1, #4]
 8001b7c:	03d2      	lsls	r2, r2, #15
 8001b7e:	d500      	bpl.n	8001b82 <HAL_RCC_OscConfig+0x1e2>
 8001b80:	e75d      	b.n	8001a3e <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b82:	4a51      	ldr	r2, [pc, #324]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	0792      	lsls	r2, r2, #30
 8001b88:	d539      	bpl.n	8001bfe <HAL_RCC_OscConfig+0x25e>
 8001b8a:	68e2      	ldr	r2, [r4, #12]
 8001b8c:	2a01      	cmp	r2, #1
 8001b8e:	d036      	beq.n	8001bfe <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8001b90:	2001      	movs	r0, #1
}
 8001b92:	b003      	add	sp, #12
 8001b94:	bcc0      	pop	{r6, r7}
 8001b96:	46b9      	mov	r9, r7
 8001b98:	46b0      	mov	r8, r6
 8001b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001ba2:	4393      	bics	r3, r2
 8001ba4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f85d 	bl	8000c64 <HAL_GetTick>
 8001baa:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	e004      	b.n	8001bb8 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff f859 	bl	8000c64 <HAL_GetTick>
 8001bb2:	1b80      	subs	r0, r0, r6
 8001bb4:	2802      	cmp	r0, #2
 8001bb6:	d82e      	bhi.n	8001c16 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001bba:	421f      	tst	r7, r3
 8001bbc:	d1f7      	bne.n	8001bae <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	e7a3      	b.n	8001b0a <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc2:	6842      	ldr	r2, [r0, #4]
 8001bc4:	03d2      	lsls	r2, r2, #15
 8001bc6:	d400      	bmi.n	8001bca <HAL_RCC_OscConfig+0x22a>
 8001bc8:	e702      	b.n	80019d0 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bca:	4a3f      	ldr	r2, [pc, #252]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	0392      	lsls	r2, r2, #14
 8001bd0:	d400      	bmi.n	8001bd4 <HAL_RCC_OscConfig+0x234>
 8001bd2:	e727      	b.n	8001a24 <HAL_RCC_OscConfig+0x84>
 8001bd4:	6862      	ldr	r2, [r4, #4]
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d000      	beq.n	8001bdc <HAL_RCC_OscConfig+0x23c>
 8001bda:	e723      	b.n	8001a24 <HAL_RCC_OscConfig+0x84>
 8001bdc:	e7d8      	b.n	8001b90 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bde:	6833      	ldr	r3, [r6, #0]
 8001be0:	433b      	orrs	r3, r7
 8001be2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001be4:	f7ff f83e 	bl	8000c64 <HAL_GetTick>
 8001be8:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bea:	e004      	b.n	8001bf6 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bec:	f7ff f83a 	bl	8000c64 <HAL_GetTick>
 8001bf0:	1b40      	subs	r0, r0, r5
 8001bf2:	2864      	cmp	r0, #100	; 0x64
 8001bf4:	d80f      	bhi.n	8001c16 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	6833      	ldr	r3, [r6, #0]
 8001bf8:	423b      	tst	r3, r7
 8001bfa:	d0f7      	beq.n	8001bec <HAL_RCC_OscConfig+0x24c>
 8001bfc:	e75a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	25f8      	movs	r5, #248	; 0xf8
 8001c00:	4831      	ldr	r0, [pc, #196]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 8001c02:	6922      	ldr	r2, [r4, #16]
 8001c04:	6801      	ldr	r1, [r0, #0]
 8001c06:	00d2      	lsls	r2, r2, #3
 8001c08:	43a9      	bics	r1, r5
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0e:	071a      	lsls	r2, r3, #28
 8001c10:	d400      	bmi.n	8001c14 <HAL_RCC_OscConfig+0x274>
 8001c12:	e735      	b.n	8001a80 <HAL_RCC_OscConfig+0xe0>
 8001c14:	e762      	b.n	8001adc <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8001c16:	2003      	movs	r0, #3
 8001c18:	e7bb      	b.n	8001b92 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1a:	4d2b      	ldr	r5, [pc, #172]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 8001c1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ccc <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c20:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c22:	4013      	ands	r3, r2
 8001c24:	602b      	str	r3, [r5, #0]
 8001c26:	682b      	ldr	r3, [r5, #0]
 8001c28:	4a29      	ldr	r2, [pc, #164]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c30:	f7ff f818 	bl	8000c64 <HAL_GetTick>
 8001c34:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	e004      	b.n	8001c42 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff f814 	bl	8000c64 <HAL_GetTick>
 8001c3c:	1b80      	subs	r0, r0, r6
 8001c3e:	2864      	cmp	r0, #100	; 0x64
 8001c40:	d8e9      	bhi.n	8001c16 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	682b      	ldr	r3, [r5, #0]
 8001c44:	423b      	tst	r3, r7
 8001c46:	d1f7      	bne.n	8001c38 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	e6eb      	b.n	8001a24 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4e1e      	ldr	r6, [pc, #120]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	4d22      	ldr	r5, [pc, #136]	; (8001cdc <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c52:	6a33      	ldr	r3, [r6, #32]
 8001c54:	4393      	bics	r3, r2
 8001c56:	6233      	str	r3, [r6, #32]
 8001c58:	6a33      	ldr	r3, [r6, #32]
 8001c5a:	3203      	adds	r2, #3
 8001c5c:	4393      	bics	r3, r2
 8001c5e:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001c60:	f7ff f800 	bl	8000c64 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c64:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8001c66:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c68:	4698      	mov	r8, r3
 8001c6a:	e004      	b.n	8001c76 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6c:	f7fe fffa 	bl	8000c64 <HAL_GetTick>
 8001c70:	1bc0      	subs	r0, r0, r7
 8001c72:	42a8      	cmp	r0, r5
 8001c74:	d8cf      	bhi.n	8001c16 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c76:	4642      	mov	r2, r8
 8001c78:	6a33      	ldr	r3, [r6, #32]
 8001c7a:	421a      	tst	r2, r3
 8001c7c:	d1f6      	bne.n	8001c6c <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8001c7e:	464b      	mov	r3, r9
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d04f      	beq.n	8001d24 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	e742      	b.n	8001b0e <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8001c88:	2201      	movs	r2, #1
 8001c8a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001c8e:	4393      	bics	r3, r2
 8001c90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c92:	f7fe ffe7 	bl	8000c64 <HAL_GetTick>
 8001c96:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c98:	e004      	b.n	8001ca4 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7fe ffe3 	bl	8000c64 <HAL_GetTick>
 8001c9e:	1b80      	subs	r0, r0, r6
 8001ca0:	2802      	cmp	r0, #2
 8001ca2:	d8b8      	bhi.n	8001c16 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca4:	682b      	ldr	r3, [r5, #0]
 8001ca6:	421f      	tst	r7, r3
 8001ca8:	d1f7      	bne.n	8001c9a <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	e6e6      	b.n	8001a7c <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cae:	4906      	ldr	r1, [pc, #24]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
 8001cb0:	6a0a      	ldr	r2, [r1, #32]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001cb6:	f7fe ffd5 	bl	8000c64 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cba:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8001cbc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbe:	4698      	mov	r8, r3
 8001cc0:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	4d06      	ldr	r5, [pc, #24]	; (8001cdc <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	e011      	b.n	8001cea <HAL_RCC_OscConfig+0x34a>
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	fffeffff 	.word	0xfffeffff
 8001cd0:	fffbffff 	.word	0xfffbffff
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	feffffff 	.word	0xfeffffff
 8001cdc:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7fe ffc0 	bl	8000c64 <HAL_GetTick>
 8001ce4:	1b80      	subs	r0, r0, r6
 8001ce6:	42a8      	cmp	r0, r5
 8001ce8:	d895      	bhi.n	8001c16 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cea:	4643      	mov	r3, r8
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	421f      	tst	r7, r3
 8001cf0:	d0f6      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x340>
 8001cf2:	e7c4      	b.n	8001c7e <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	4d53      	ldr	r5, [pc, #332]	; (8001e44 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cf8:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cfa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001d00:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001d02:	3a03      	subs	r2, #3
 8001d04:	4393      	bics	r3, r2
 8001d06:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001d08:	f7fe ffac 	bl	8000c64 <HAL_GetTick>
 8001d0c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d0e:	e005      	b.n	8001d1c <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d10:	f7fe ffa8 	bl	8000c64 <HAL_GetTick>
 8001d14:	1b80      	subs	r0, r0, r6
 8001d16:	2802      	cmp	r0, #2
 8001d18:	d900      	bls.n	8001d1c <HAL_RCC_OscConfig+0x37c>
 8001d1a:	e77c      	b.n	8001c16 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d1c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001d1e:	421f      	tst	r7, r3
 8001d20:	d1f6      	bne.n	8001d10 <HAL_RCC_OscConfig+0x370>
 8001d22:	e709      	b.n	8001b38 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d24:	4a47      	ldr	r2, [pc, #284]	; (8001e44 <HAL_RCC_OscConfig+0x4a4>)
 8001d26:	4948      	ldr	r1, [pc, #288]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001d28:	69d3      	ldr	r3, [r2, #28]
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	e6ed      	b.n	8001b0e <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d32:	2280      	movs	r2, #128	; 0x80
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <HAL_RCC_OscConfig+0x4a4>)
 8001d36:	02d2      	lsls	r2, r2, #11
 8001d38:	6819      	ldr	r1, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	0252      	lsls	r2, r2, #9
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e65b      	b.n	8001a02 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_RCC_OscConfig+0x4a4>)
 8001d4e:	6a1a      	ldr	r2, [r3, #32]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	621a      	str	r2, [r3, #32]
 8001d54:	6a1a      	ldr	r2, [r3, #32]
 8001d56:	3903      	subs	r1, #3
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	621a      	str	r2, [r3, #32]
 8001d5c:	e7ab      	b.n	8001cb6 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d100      	bne.n	8001d64 <HAL_RCC_OscConfig+0x3c4>
 8001d62:	e715      	b.n	8001b90 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d64:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8001d66:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d6a:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8001d6c:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8001d6e:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d70:	4013      	ands	r3, r2
 8001d72:	428b      	cmp	r3, r1
 8001d74:	d000      	beq.n	8001d78 <HAL_RCC_OscConfig+0x3d8>
 8001d76:	e70c      	b.n	8001b92 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d78:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d7c:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	428b      	cmp	r3, r1
 8001d80:	d000      	beq.n	8001d84 <HAL_RCC_OscConfig+0x3e4>
 8001d82:	e706      	b.n	8001b92 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d84:	23f0      	movs	r3, #240	; 0xf0
 8001d86:	039b      	lsls	r3, r3, #14
 8001d88:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d8c:	1ad2      	subs	r2, r2, r3
 8001d8e:	1e53      	subs	r3, r2, #1
 8001d90:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 8001d92:	b2d0      	uxtb	r0, r2
 8001d94:	e6fd      	b.n	8001b92 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d96:	2104      	movs	r1, #4
 8001d98:	4d2a      	ldr	r5, [pc, #168]	; (8001e44 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d9a:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d9c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001da2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001da4:	4313      	orrs	r3, r2
 8001da6:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001da8:	f7fe ff5c 	bl	8000c64 <HAL_GetTick>
 8001dac:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dae:	e005      	b.n	8001dbc <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001db0:	f7fe ff58 	bl	8000c64 <HAL_GetTick>
 8001db4:	1b80      	subs	r0, r0, r6
 8001db6:	2802      	cmp	r0, #2
 8001db8:	d900      	bls.n	8001dbc <HAL_RCC_OscConfig+0x41c>
 8001dba:	e72c      	b.n	8001c16 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dbc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001dbe:	421f      	tst	r7, r3
 8001dc0:	d0f6      	beq.n	8001db0 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dc2:	21f8      	movs	r1, #248	; 0xf8
 8001dc4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001dc6:	69a3      	ldr	r3, [r4, #24]
 8001dc8:	438a      	bics	r2, r1
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	636b      	str	r3, [r5, #52]	; 0x34
 8001dd0:	e6b2      	b.n	8001b38 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	682b      	ldr	r3, [r5, #0]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd6:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001dd8:	4013      	ands	r3, r2
 8001dda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ddc:	f7fe ff42 	bl	8000c64 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de0:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8001de2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de4:	e005      	b.n	8001df2 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de6:	f7fe ff3d 	bl	8000c64 <HAL_GetTick>
 8001dea:	1b80      	subs	r0, r0, r6
 8001dec:	2802      	cmp	r0, #2
 8001dee:	d900      	bls.n	8001df2 <HAL_RCC_OscConfig+0x452>
 8001df0:	e711      	b.n	8001c16 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df2:	682b      	ldr	r3, [r5, #0]
 8001df4:	423b      	tst	r3, r7
 8001df6:	d1f6      	bne.n	8001de6 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df8:	220f      	movs	r2, #15
 8001dfa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfc:	4e11      	ldr	r6, [pc, #68]	; (8001e44 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfe:	4393      	bics	r3, r2
 8001e00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e02:	4313      	orrs	r3, r2
 8001e04:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001e06:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e0a:	686a      	ldr	r2, [r5, #4]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	4910      	ldr	r1, [pc, #64]	; (8001e50 <HAL_RCC_OscConfig+0x4b0>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	4313      	orrs	r3, r2
 8001e14:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	682a      	ldr	r2, [r5, #0]
 8001e1a:	045b      	lsls	r3, r3, #17
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e20:	f7fe ff20 	bl	8000c64 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e24:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001e26:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e28:	04ad      	lsls	r5, r5, #18
 8001e2a:	e005      	b.n	8001e38 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7fe ff1a 	bl	8000c64 <HAL_GetTick>
 8001e30:	1b00      	subs	r0, r0, r4
 8001e32:	2802      	cmp	r0, #2
 8001e34:	d900      	bls.n	8001e38 <HAL_RCC_OscConfig+0x498>
 8001e36:	e6ee      	b.n	8001c16 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e38:	6833      	ldr	r3, [r6, #0]
 8001e3a:	422b      	tst	r3, r5
 8001e3c:	d0f6      	beq.n	8001e2c <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8001e3e:	2000      	movs	r0, #0
 8001e40:	e6a7      	b.n	8001b92 <HAL_RCC_OscConfig+0x1f2>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	40021000 	.word	0x40021000
 8001e48:	efffffff 	.word	0xefffffff
 8001e4c:	feffffff 	.word	0xfeffffff
 8001e50:	ffc2ffff 	.word	0xffc2ffff

08001e54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e56:	46ce      	mov	lr, r9
 8001e58:	4647      	mov	r7, r8
 8001e5a:	0004      	movs	r4, r0
 8001e5c:	000d      	movs	r5, r1
 8001e5e:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e60:	2800      	cmp	r0, #0
 8001e62:	d00d      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e64:	2301      	movs	r3, #1
 8001e66:	494f      	ldr	r1, [pc, #316]	; (8001fa4 <HAL_RCC_ClockConfig+0x150>)
 8001e68:	680a      	ldr	r2, [r1, #0]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	42aa      	cmp	r2, r5
 8001e6e:	d20c      	bcs.n	8001e8a <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e70:	680a      	ldr	r2, [r1, #0]
 8001e72:	439a      	bics	r2, r3
 8001e74:	432a      	orrs	r2, r5
 8001e76:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e78:	680a      	ldr	r2, [r1, #0]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	42ab      	cmp	r3, r5
 8001e7e:	d004      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8001e80:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8001e82:	bcc0      	pop	{r6, r7}
 8001e84:	46b9      	mov	r9, r7
 8001e86:	46b0      	mov	r8, r6
 8001e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	079a      	lsls	r2, r3, #30
 8001e8e:	d50e      	bpl.n	8001eae <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	075a      	lsls	r2, r3, #29
 8001e92:	d505      	bpl.n	8001ea0 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e94:	22e0      	movs	r2, #224	; 0xe0
 8001e96:	4944      	ldr	r1, [pc, #272]	; (8001fa8 <HAL_RCC_ClockConfig+0x154>)
 8001e98:	00d2      	lsls	r2, r2, #3
 8001e9a:	6848      	ldr	r0, [r1, #4]
 8001e9c:	4302      	orrs	r2, r0
 8001e9e:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea0:	20f0      	movs	r0, #240	; 0xf0
 8001ea2:	4941      	ldr	r1, [pc, #260]	; (8001fa8 <HAL_RCC_ClockConfig+0x154>)
 8001ea4:	684a      	ldr	r2, [r1, #4]
 8001ea6:	4382      	bics	r2, r0
 8001ea8:	68a0      	ldr	r0, [r4, #8]
 8001eaa:	4302      	orrs	r2, r0
 8001eac:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	07db      	lsls	r3, r3, #31
 8001eb0:	d522      	bpl.n	8001ef8 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCC_ClockConfig+0x154>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb4:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb8:	2a01      	cmp	r2, #1
 8001eba:	d065      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebc:	2a02      	cmp	r2, #2
 8001ebe:	d060      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x12e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec0:	079b      	lsls	r3, r3, #30
 8001ec2:	d5dd      	bpl.n	8001e80 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec4:	2103      	movs	r1, #3
 8001ec6:	4e38      	ldr	r6, [pc, #224]	; (8001fa8 <HAL_RCC_ClockConfig+0x154>)
 8001ec8:	6873      	ldr	r3, [r6, #4]
 8001eca:	438b      	bics	r3, r1
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001ed0:	f7fe fec8 	bl	8000c64 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed4:	230c      	movs	r3, #12
 8001ed6:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed8:	4b34      	ldr	r3, [pc, #208]	; (8001fac <HAL_RCC_ClockConfig+0x158>)
    tickstart = HAL_GetTick();
 8001eda:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	e004      	b.n	8001eea <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee0:	f7fe fec0 	bl	8000c64 <HAL_GetTick>
 8001ee4:	1bc0      	subs	r0, r0, r7
 8001ee6:	4548      	cmp	r0, r9
 8001ee8:	d851      	bhi.n	8001f8e <HAL_RCC_ClockConfig+0x13a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	4643      	mov	r3, r8
 8001eec:	6872      	ldr	r2, [r6, #4]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	6863      	ldr	r3, [r4, #4]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d1f3      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4a2a      	ldr	r2, [pc, #168]	; (8001fa4 <HAL_RCC_ClockConfig+0x150>)
 8001efc:	6813      	ldr	r3, [r2, #0]
 8001efe:	400b      	ands	r3, r1
 8001f00:	42ab      	cmp	r3, r5
 8001f02:	d905      	bls.n	8001f10 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f04:	6813      	ldr	r3, [r2, #0]
 8001f06:	438b      	bics	r3, r1
 8001f08:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	6813      	ldr	r3, [r2, #0]
 8001f0c:	4219      	tst	r1, r3
 8001f0e:	d1b7      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	075b      	lsls	r3, r3, #29
 8001f14:	d416      	bmi.n	8001f44 <HAL_RCC_ClockConfig+0xf0>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f16:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001f18:	4923      	ldr	r1, [pc, #140]	; (8001fa8 <HAL_RCC_ClockConfig+0x154>)
 8001f1a:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d01d      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x10a>
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d01d      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
 8001f26:	4822      	ldr	r0, [pc, #136]	; (8001fb0 <HAL_RCC_ClockConfig+0x15c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <HAL_RCC_ClockConfig+0x154>)
 8001f2a:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <HAL_RCC_ClockConfig+0x160>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4922      	ldr	r1, [pc, #136]	; (8001fb8 <HAL_RCC_ClockConfig+0x164>)
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	0f1b      	lsrs	r3, r3, #28
 8001f34:	5cd3      	ldrb	r3, [r2, r3]
 8001f36:	40d8      	lsrs	r0, r3
 8001f38:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f3a:	2003      	movs	r0, #3
 8001f3c:	f7fe fe50 	bl	8000be0 <HAL_InitTick>
  return HAL_OK;
 8001f40:	2000      	movs	r0, #0
 8001f42:	e79e      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f44:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <HAL_RCC_ClockConfig+0x154>)
 8001f46:	491d      	ldr	r1, [pc, #116]	; (8001fbc <HAL_RCC_ClockConfig+0x168>)
 8001f48:	6853      	ldr	r3, [r2, #4]
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	68e1      	ldr	r1, [r4, #12]
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	6053      	str	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f52:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001f54:	4914      	ldr	r1, [pc, #80]	; (8001fa8 <HAL_RCC_ClockConfig+0x154>)
 8001f56:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d1e1      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f5e:	4818      	ldr	r0, [pc, #96]	; (8001fc0 <HAL_RCC_ClockConfig+0x16c>)
 8001f60:	e7e2      	b.n	8001f28 <HAL_RCC_ClockConfig+0xd4>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f62:	250f      	movs	r5, #15
 8001f64:	4817      	ldr	r0, [pc, #92]	; (8001fc4 <HAL_RCC_ClockConfig+0x170>)
 8001f66:	0c93      	lsrs	r3, r2, #18
 8001f68:	402b      	ands	r3, r5
 8001f6a:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f6c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f6e:	03d2      	lsls	r2, r2, #15
 8001f70:	d50f      	bpl.n	8001f92 <HAL_RCC_ClockConfig+0x13e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_RCC_ClockConfig+0x174>)
 8001f74:	400d      	ands	r5, r1
 8001f76:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f78:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <HAL_RCC_ClockConfig+0x16c>)
 8001f7a:	f7fe f8c5 	bl	8000108 <__udivsi3>
 8001f7e:	4360      	muls	r0, r4
 8001f80:	e7d2      	b.n	8001f28 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	019b      	lsls	r3, r3, #6
 8001f84:	d49e      	bmi.n	8001ec4 <HAL_RCC_ClockConfig+0x70>
 8001f86:	e77b      	b.n	8001e80 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f88:	039b      	lsls	r3, r3, #14
 8001f8a:	d49b      	bmi.n	8001ec4 <HAL_RCC_ClockConfig+0x70>
 8001f8c:	e778      	b.n	8001e80 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8001f8e:	2003      	movs	r0, #3
 8001f90:	e777      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f92:	0162      	lsls	r2, r4, #5
 8001f94:	1b12      	subs	r2, r2, r4
 8001f96:	0193      	lsls	r3, r2, #6
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	191b      	adds	r3, r3, r4
 8001f9e:	0218      	lsls	r0, r3, #8
 8001fa0:	e7c2      	b.n	8001f28 <HAL_RCC_ClockConfig+0xd4>
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	00001388 	.word	0x00001388
 8001fb0:	007a1200 	.word	0x007a1200
 8001fb4:	08002480 	.word	0x08002480
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	fffff8ff 	.word	0xfffff8ff
 8001fc0:	00f42400 	.word	0x00f42400
 8001fc4:	08002490 	.word	0x08002490
 8001fc8:	080024a0 	.word	0x080024a0

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	46ce      	mov	lr, r9
 8001fd0:	4647      	mov	r7, r8
 8001fd2:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fd4:	6803      	ldr	r3, [r0, #0]
{
 8001fd6:	0004      	movs	r4, r0
 8001fd8:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fda:	03da      	lsls	r2, r3, #15
 8001fdc:	d530      	bpl.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001fe2:	0552      	lsls	r2, r2, #21
 8001fe4:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe8:	4211      	tst	r1, r2
 8001fea:	d041      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fec:	2680      	movs	r6, #128	; 0x80
 8001fee:	4d41      	ldr	r5, [pc, #260]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001ff0:	0076      	lsls	r6, r6, #1
 8001ff2:	682b      	ldr	r3, [r5, #0]
 8001ff4:	4233      	tst	r3, r6
 8001ff6:	d049      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ff8:	4d3d      	ldr	r5, [pc, #244]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001ffa:	23c0      	movs	r3, #192	; 0xc0
 8001ffc:	6a2a      	ldr	r2, [r5, #32]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	0010      	movs	r0, r2
 8002002:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002004:	421a      	tst	r2, r3
 8002006:	d063      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002008:	6861      	ldr	r1, [r4, #4]
 800200a:	400b      	ands	r3, r1
 800200c:	4283      	cmp	r3, r0
 800200e:	d00e      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002010:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002012:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002014:	6a2e      	ldr	r6, [r5, #32]
 8002016:	0240      	lsls	r0, r0, #9
 8002018:	4330      	orrs	r0, r6
 800201a:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800201c:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800201e:	4a36      	ldr	r2, [pc, #216]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002020:	4e36      	ldr	r6, [pc, #216]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002022:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002024:	4030      	ands	r0, r6
 8002026:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002028:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800202a:	07db      	lsls	r3, r3, #31
 800202c:	d43f      	bmi.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800202e:	4a30      	ldr	r2, [pc, #192]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002030:	4831      	ldr	r0, [pc, #196]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002032:	6a13      	ldr	r3, [r2, #32]
 8002034:	4003      	ands	r3, r0
 8002036:	430b      	orrs	r3, r1
 8002038:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800203a:	2f01      	cmp	r7, #1
 800203c:	d051      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	07da      	lsls	r2, r3, #31
 8002042:	d506      	bpl.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002044:	2003      	movs	r0, #3
 8002046:	492a      	ldr	r1, [pc, #168]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002048:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800204a:	4382      	bics	r2, r0
 800204c:	68a0      	ldr	r0, [r4, #8]
 800204e:	4302      	orrs	r2, r0
 8002050:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002052:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002054:	069b      	lsls	r3, r3, #26
 8002056:	d506      	bpl.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002058:	2110      	movs	r1, #16
 800205a:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800205c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800205e:	438b      	bics	r3, r1
 8002060:	68e1      	ldr	r1, [r4, #12]
 8002062:	430b      	orrs	r3, r1
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002066:	b003      	add	sp, #12
 8002068:	bcc0      	pop	{r6, r7}
 800206a:	46b9      	mov	r9, r7
 800206c:	46b0      	mov	r8, r6
 800206e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	4d1f      	ldr	r5, [pc, #124]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4311      	orrs	r1, r2
 8002078:	61d9      	str	r1, [r3, #28]
 800207a:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4013      	ands	r3, r2
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8002086:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	4233      	tst	r3, r6
 800208a:	d1b5      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208c:	682b      	ldr	r3, [r5, #0]
 800208e:	4333      	orrs	r3, r6
 8002090:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002092:	f7fe fde7 	bl	8000c64 <HAL_GetTick>
 8002096:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	682b      	ldr	r3, [r5, #0]
 800209a:	4233      	tst	r3, r6
 800209c:	d1ac      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209e:	f7fe fde1 	bl	8000c64 <HAL_GetTick>
 80020a2:	4643      	mov	r3, r8
 80020a4:	1ac0      	subs	r0, r0, r3
 80020a6:	2864      	cmp	r0, #100	; 0x64
 80020a8:	d9f6      	bls.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 80020aa:	2003      	movs	r0, #3
 80020ac:	e7db      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 80020ae:	f7fe fdd9 	bl	8000c64 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b2:	2302      	movs	r3, #2
 80020b4:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 80020b8:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020bc:	e004      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7fe fdd1 	bl	8000c64 <HAL_GetTick>
 80020c2:	1b80      	subs	r0, r0, r6
 80020c4:	4548      	cmp	r0, r9
 80020c6:	d8f0      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c8:	4642      	mov	r2, r8
 80020ca:	6a2b      	ldr	r3, [r5, #32]
 80020cc:	421a      	tst	r2, r3
 80020ce:	d0f6      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020d0:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80020d2:	4809      	ldr	r0, [pc, #36]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80020d4:	6a13      	ldr	r3, [r2, #32]
 80020d6:	6861      	ldr	r1, [r4, #4]
 80020d8:	4003      	ands	r3, r0
 80020da:	430b      	orrs	r3, r1
 80020dc:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 80020de:	2f01      	cmp	r7, #1
 80020e0:	d1ad      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	69d3      	ldr	r3, [r2, #28]
 80020e4:	4907      	ldr	r1, [pc, #28]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80020e6:	400b      	ands	r3, r1
 80020e8:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	e7a8      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40007000 	.word	0x40007000
 80020f8:	fffffcff 	.word	0xfffffcff
 80020fc:	fffeffff 	.word	0xfffeffff
 8002100:	00001388 	.word	0x00001388
 8002104:	efffffff 	.word	0xefffffff

08002108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002108:	b510      	push	{r4, lr}
 800210a:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800210c:	d05b      	beq.n	80021c6 <HAL_TIM_Base_Init+0xbe>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210e:	233d      	movs	r3, #61	; 0x3d
 8002110:	5cc3      	ldrb	r3, [r0, r3]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d048      	beq.n	80021aa <HAL_TIM_Base_Init+0xa2>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002118:	233d      	movs	r3, #61	; 0x3d
 800211a:	2202      	movs	r2, #2
 800211c:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800211e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002120:	492a      	ldr	r1, [pc, #168]	; (80021cc <HAL_TIM_Base_Init+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002122:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002124:	428a      	cmp	r2, r1
 8002126:	d015      	beq.n	8002154 <HAL_TIM_Base_Init+0x4c>
 8002128:	4929      	ldr	r1, [pc, #164]	; (80021d0 <HAL_TIM_Base_Init+0xc8>)
 800212a:	428a      	cmp	r2, r1
 800212c:	d042      	beq.n	80021b4 <HAL_TIM_Base_Init+0xac>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800212e:	4929      	ldr	r1, [pc, #164]	; (80021d4 <HAL_TIM_Base_Init+0xcc>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d043      	beq.n	80021bc <HAL_TIM_Base_Init+0xb4>
 8002134:	4928      	ldr	r1, [pc, #160]	; (80021d8 <HAL_TIM_Base_Init+0xd0>)
 8002136:	428a      	cmp	r2, r1
 8002138:	d010      	beq.n	800215c <HAL_TIM_Base_Init+0x54>
 800213a:	4928      	ldr	r1, [pc, #160]	; (80021dc <HAL_TIM_Base_Init+0xd4>)
 800213c:	428a      	cmp	r2, r1
 800213e:	d00d      	beq.n	800215c <HAL_TIM_Base_Init+0x54>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	438b      	bics	r3, r1
 8002144:	69a1      	ldr	r1, [r4, #24]
 8002146:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8002148:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800214a:	68e3      	ldr	r3, [r4, #12]
 800214c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800214e:	6863      	ldr	r3, [r4, #4]
 8002150:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002152:	e012      	b.n	800217a <HAL_TIM_Base_Init+0x72>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002154:	2170      	movs	r1, #112	; 0x70
 8002156:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8002158:	68a1      	ldr	r1, [r4, #8]
 800215a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800215c:	4920      	ldr	r1, [pc, #128]	; (80021e0 <HAL_TIM_Base_Init+0xd8>)
 800215e:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002160:	6921      	ldr	r1, [r4, #16]
 8002162:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	438b      	bics	r3, r1
 8002168:	69a1      	ldr	r1, [r4, #24]
 800216a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800216c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800216e:	68e3      	ldr	r3, [r4, #12]
 8002170:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002172:	6863      	ldr	r3, [r4, #4]
 8002174:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002176:	6963      	ldr	r3, [r4, #20]
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800217a:	2301      	movs	r3, #1
 800217c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800217e:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8002180:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002182:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002184:	3a08      	subs	r2, #8
 8002186:	54a3      	strb	r3, [r4, r2]
 8002188:	3201      	adds	r2, #1
 800218a:	54a3      	strb	r3, [r4, r2]
 800218c:	3201      	adds	r2, #1
 800218e:	54a3      	strb	r3, [r4, r2]
 8002190:	3201      	adds	r2, #1
 8002192:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002194:	3201      	adds	r2, #1
 8002196:	54a3      	strb	r3, [r4, r2]
 8002198:	3201      	adds	r2, #1
 800219a:	54a3      	strb	r3, [r4, r2]
 800219c:	3201      	adds	r2, #1
 800219e:	54a3      	strb	r3, [r4, r2]
 80021a0:	3201      	adds	r2, #1
 80021a2:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80021a4:	3a08      	subs	r2, #8
 80021a6:	54a3      	strb	r3, [r4, r2]
}
 80021a8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80021aa:	333c      	adds	r3, #60	; 0x3c
 80021ac:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80021ae:	f7fe fcc9 	bl	8000b44 <HAL_TIM_Base_MspInit>
 80021b2:	e7b1      	b.n	8002118 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b4:	2170      	movs	r1, #112	; 0x70
 80021b6:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80021b8:	68a1      	ldr	r1, [r4, #8]
 80021ba:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80021bc:	4908      	ldr	r1, [pc, #32]	; (80021e0 <HAL_TIM_Base_Init+0xd8>)
 80021be:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c0:	6921      	ldr	r1, [r4, #16]
 80021c2:	430b      	orrs	r3, r1
 80021c4:	e7bc      	b.n	8002140 <HAL_TIM_Base_Init+0x38>
    return HAL_ERROR;
 80021c6:	2001      	movs	r0, #1
 80021c8:	e7ee      	b.n	80021a8 <HAL_TIM_Base_Init+0xa0>
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	40012c00 	.word	0x40012c00
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40002000 	.word	0x40002000
 80021d8:	40014400 	.word	0x40014400
 80021dc:	40014800 	.word	0x40014800
 80021e0:	fffffcff 	.word	0xfffffcff

080021e4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80021e4:	223d      	movs	r2, #61	; 0x3d
 80021e6:	5c81      	ldrb	r1, [r0, r2]
{
 80021e8:	0003      	movs	r3, r0
    return HAL_ERROR;
 80021ea:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80021ec:	2901      	cmp	r1, #1
 80021ee:	d10c      	bne.n	800220a <HAL_TIM_Base_Start+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	3101      	adds	r1, #1
 80021f2:	5499      	strb	r1, [r3, r2]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <HAL_TIM_Base_Start+0x44>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d007      	beq.n	800220c <HAL_TIM_Base_Start+0x28>
 80021fc:	4a0b      	ldr	r2, [pc, #44]	; (800222c <HAL_TIM_Base_Start+0x48>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d004      	beq.n	800220c <HAL_TIM_Base_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4302      	orrs	r2, r0
  return HAL_OK;
 8002206:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002208:	601a      	str	r2, [r3, #0]
}
 800220a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800220c:	2207      	movs	r2, #7
 800220e:	6899      	ldr	r1, [r3, #8]
 8002210:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002212:	2a06      	cmp	r2, #6
 8002214:	d005      	beq.n	8002222 <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
 8002216:	2101      	movs	r1, #1
 8002218:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800221a:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e7f3      	b.n	800220a <HAL_TIM_Base_Start+0x26>
  return HAL_OK;
 8002222:	2000      	movs	r0, #0
 8002224:	e7f1      	b.n	800220a <HAL_TIM_Base_Start+0x26>
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	40012c00 	.word	0x40012c00
 800222c:	40000400 	.word	0x40000400

08002230 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002230:	233c      	movs	r3, #60	; 0x3c
{
 8002232:	b570      	push	{r4, r5, r6, lr}
 8002234:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002236:	5cc0      	ldrb	r0, [r0, r3]
 8002238:	2801      	cmp	r0, #1
 800223a:	d100      	bne.n	800223e <HAL_TIM_ConfigClockSource+0xe>
 800223c:	e075      	b.n	800232a <HAL_TIM_ConfigClockSource+0xfa>
 800223e:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002242:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002244:	3301      	adds	r3, #1
 8002246:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8002248:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800224a:	4d52      	ldr	r5, [pc, #328]	; (8002394 <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr = htim->Instance->SMCR;
 800224c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800224e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8002250:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002252:	680b      	ldr	r3, [r1, #0]
 8002254:	2b60      	cmp	r3, #96	; 0x60
 8002256:	d100      	bne.n	800225a <HAL_TIM_ConfigClockSource+0x2a>
 8002258:	e069      	b.n	800232e <HAL_TIM_ConfigClockSource+0xfe>
 800225a:	d823      	bhi.n	80022a4 <HAL_TIM_ConfigClockSource+0x74>
 800225c:	2b40      	cmp	r3, #64	; 0x40
 800225e:	d100      	bne.n	8002262 <HAL_TIM_ConfigClockSource+0x32>
 8002260:	e07f      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x132>
 8002262:	d952      	bls.n	800230a <HAL_TIM_ConfigClockSource+0xda>
 8002264:	2b50      	cmp	r3, #80	; 0x50
 8002266:	d13b      	bne.n	80022e0 <HAL_TIM_ConfigClockSource+0xb0>
                               sClockSourceConfig->ClockPolarity,
 8002268:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800226a:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800226c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800226e:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002270:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002272:	43a6      	bics	r6, r4
 8002274:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002276:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002278:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800227a:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800227c:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800227e:	240a      	movs	r4, #10
 8002280:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002282:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002284:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002286:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002288:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800228a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800228c:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800228e:	3919      	subs	r1, #25
 8002290:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002292:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002296:	233d      	movs	r3, #61	; 0x3d
 8002298:	2101      	movs	r1, #1
 800229a:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 800229c:	2100      	movs	r1, #0
 800229e:	3b01      	subs	r3, #1
 80022a0:	54d1      	strb	r1, [r2, r3]
}
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80022a4:	2480      	movs	r4, #128	; 0x80
 80022a6:	0164      	lsls	r4, r4, #5
 80022a8:	42a3      	cmp	r3, r4
 80022aa:	d03c      	beq.n	8002326 <HAL_TIM_ConfigClockSource+0xf6>
 80022ac:	2480      	movs	r4, #128	; 0x80
 80022ae:	01a4      	lsls	r4, r4, #6
 80022b0:	42a3      	cmp	r3, r4
 80022b2:	d117      	bne.n	80022e4 <HAL_TIM_ConfigClockSource+0xb4>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022b4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b6:	4b38      	ldr	r3, [pc, #224]	; (8002398 <HAL_TIM_ConfigClockSource+0x168>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022b8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022ba:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022bc:	688b      	ldr	r3, [r1, #8]
 80022be:	68c9      	ldr	r1, [r1, #12]
 80022c0:	432b      	orrs	r3, r5
 80022c2:	0209      	lsls	r1, r1, #8
 80022c4:	430b      	orrs	r3, r1
 80022c6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022c8:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	6881      	ldr	r1, [r0, #8]
 80022ce:	01db      	lsls	r3, r3, #7
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80022d4:	2000      	movs	r0, #0
      break;
 80022d6:	e7de      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80022d8:	2110      	movs	r1, #16
 80022da:	001c      	movs	r4, r3
 80022dc:	438c      	bics	r4, r1
 80022de:	d019      	beq.n	8002314 <HAL_TIM_ConfigClockSource+0xe4>
 80022e0:	2001      	movs	r0, #1
 80022e2:	e7d8      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x66>
 80022e4:	2b70      	cmp	r3, #112	; 0x70
 80022e6:	d1fb      	bne.n	80022e0 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr = TIMx->SMCR;
 80022e8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022ea:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022ec:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022ee:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022f0:	688b      	ldr	r3, [r1, #8]
 80022f2:	68c9      	ldr	r1, [r1, #12]
 80022f4:	432b      	orrs	r3, r5
 80022f6:	0209      	lsls	r1, r1, #8
 80022f8:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022fa:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022fc:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80022fe:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002300:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002302:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8002304:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002306:	2000      	movs	r0, #0
      break;
 8002308:	e7c5      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800230a:	2b20      	cmp	r3, #32
 800230c:	d002      	beq.n	8002314 <HAL_TIM_ConfigClockSource+0xe4>
 800230e:	d9e3      	bls.n	80022d8 <HAL_TIM_ConfigClockSource+0xa8>
 8002310:	2b30      	cmp	r3, #48	; 0x30
 8002312:	d1e5      	bne.n	80022e0 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr &= ~TIM_SMCR_TS;
 8002314:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002316:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002318:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800231a:	430b      	orrs	r3, r1
 800231c:	2107      	movs	r1, #7
 800231e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002320:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002322:	2000      	movs	r0, #0
}
 8002324:	e7b7      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2000      	movs	r0, #0
 8002328:	e7b5      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 800232a:	2002      	movs	r0, #2
 800232c:	e7b9      	b.n	80022a2 <HAL_TIM_ConfigClockSource+0x72>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800232e:	2510      	movs	r5, #16
 8002330:	6a04      	ldr	r4, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8002332:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002334:	43ac      	bics	r4, r5
                               sClockSourceConfig->ClockFilter);
 8002336:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002338:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800233a:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800233c:	4e17      	ldr	r6, [pc, #92]	; (800239c <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800233e:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002340:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002342:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002344:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002346:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8002348:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800234a:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800234c:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 8002352:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002354:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002356:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002358:	3909      	subs	r1, #9
 800235a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800235c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2000      	movs	r0, #0
}
 8002360:	e799      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8002362:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002364:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002366:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002368:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800236a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800236c:	43a6      	bics	r6, r4
 800236e:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002370:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002372:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002374:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002376:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002378:	240a      	movs	r4, #10
 800237a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800237c:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 800237e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002380:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002382:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002384:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002386:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002388:	3929      	subs	r1, #41	; 0x29
 800238a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800238c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2000      	movs	r0, #0
}
 8002390:	e781      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x66>
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	ffff0088 	.word	0xffff0088
 8002398:	ffff00ff 	.word	0xffff00ff
 800239c:	ffff0fff 	.word	0xffff0fff

080023a0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023a0:	233c      	movs	r3, #60	; 0x3c
{
 80023a2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80023a4:	5cc3      	ldrb	r3, [r0, r3]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d01e      	beq.n	80023e8 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023aa:	233d      	movs	r3, #61	; 0x3d
 80023ac:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023ae:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 80023b2:	6803      	ldr	r3, [r0, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80023b6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80023b8:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023ba:	680d      	ldr	r5, [r1, #0]
 80023bc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00a      	beq.n	80023dc <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d007      	beq.n	80023dc <HAL_TIMEx_MasterConfigSynchronization+0x3c>
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	233d      	movs	r3, #61	; 0x3d
 80023ce:	2201      	movs	r2, #1
 80023d0:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80023d2:	2200      	movs	r2, #0
 80023d4:	3b01      	subs	r3, #1
 80023d6:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80023d8:	2000      	movs	r0, #0
}
 80023da:	bd30      	pop	{r4, r5, pc}
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023dc:	2280      	movs	r2, #128	; 0x80
 80023de:	4394      	bics	r4, r2
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023e0:	684a      	ldr	r2, [r1, #4]
 80023e2:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 80023e4:	609c      	str	r4, [r3, #8]
 80023e6:	e7f1      	b.n	80023cc <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 80023e8:	2002      	movs	r0, #2
 80023ea:	e7f6      	b.n	80023da <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80023ec:	40012c00 	.word	0x40012c00
 80023f0:	40000400 	.word	0x40000400

080023f4 <memset>:
 80023f4:	0003      	movs	r3, r0
 80023f6:	1882      	adds	r2, r0, r2
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d100      	bne.n	80023fe <memset+0xa>
 80023fc:	4770      	bx	lr
 80023fe:	7019      	strb	r1, [r3, #0]
 8002400:	3301      	adds	r3, #1
 8002402:	e7f9      	b.n	80023f8 <memset+0x4>

08002404 <__libc_init_array>:
 8002404:	b570      	push	{r4, r5, r6, lr}
 8002406:	2600      	movs	r6, #0
 8002408:	4c0c      	ldr	r4, [pc, #48]	; (800243c <__libc_init_array+0x38>)
 800240a:	4d0d      	ldr	r5, [pc, #52]	; (8002440 <__libc_init_array+0x3c>)
 800240c:	1b64      	subs	r4, r4, r5
 800240e:	10a4      	asrs	r4, r4, #2
 8002410:	42a6      	cmp	r6, r4
 8002412:	d109      	bne.n	8002428 <__libc_init_array+0x24>
 8002414:	2600      	movs	r6, #0
 8002416:	f000 f819 	bl	800244c <_init>
 800241a:	4c0a      	ldr	r4, [pc, #40]	; (8002444 <__libc_init_array+0x40>)
 800241c:	4d0a      	ldr	r5, [pc, #40]	; (8002448 <__libc_init_array+0x44>)
 800241e:	1b64      	subs	r4, r4, r5
 8002420:	10a4      	asrs	r4, r4, #2
 8002422:	42a6      	cmp	r6, r4
 8002424:	d105      	bne.n	8002432 <__libc_init_array+0x2e>
 8002426:	bd70      	pop	{r4, r5, r6, pc}
 8002428:	00b3      	lsls	r3, r6, #2
 800242a:	58eb      	ldr	r3, [r5, r3]
 800242c:	4798      	blx	r3
 800242e:	3601      	adds	r6, #1
 8002430:	e7ee      	b.n	8002410 <__libc_init_array+0xc>
 8002432:	00b3      	lsls	r3, r6, #2
 8002434:	58eb      	ldr	r3, [r5, r3]
 8002436:	4798      	blx	r3
 8002438:	3601      	adds	r6, #1
 800243a:	e7f2      	b.n	8002422 <__libc_init_array+0x1e>
 800243c:	080024b0 	.word	0x080024b0
 8002440:	080024b0 	.word	0x080024b0
 8002444:	080024b4 	.word	0x080024b4
 8002448:	080024b0 	.word	0x080024b0

0800244c <_init>:
 800244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002452:	bc08      	pop	{r3}
 8002454:	469e      	mov	lr, r3
 8002456:	4770      	bx	lr

08002458 <_fini>:
 8002458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245e:	bc08      	pop	{r3}
 8002460:	469e      	mov	lr, r3
 8002462:	4770      	bx	lr
