
Uart Float Data Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002354  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002450  08002450  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002450  08002450  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002450  08002450  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002450  08002450  00012450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002454  08002454  00012454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002464  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002464  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aed2  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017a4  00000000  00000000  0002af49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000484c  00000000  00000000  0002c6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000508  00000000  00000000  00030f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007be  00000000  00000000  00031448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000f423  00000000  00000000  00031c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c0bb  00000000  00000000  00041029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0005b9cf  00000000  00000000  0004d0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000e98  00000000  00000000  000a8ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  000a994c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023fc 	.word	0x080023fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080023fc 	.word	0x080023fc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_fadd>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	4647      	mov	r7, r8
 8000408:	46ce      	mov	lr, r9
 800040a:	024a      	lsls	r2, r1, #9
 800040c:	0243      	lsls	r3, r0, #9
 800040e:	0045      	lsls	r5, r0, #1
 8000410:	0fc4      	lsrs	r4, r0, #31
 8000412:	0a50      	lsrs	r0, r2, #9
 8000414:	4680      	mov	r8, r0
 8000416:	0048      	lsls	r0, r1, #1
 8000418:	0a5b      	lsrs	r3, r3, #9
 800041a:	0e00      	lsrs	r0, r0, #24
 800041c:	0992      	lsrs	r2, r2, #6
 800041e:	4694      	mov	ip, r2
 8000420:	b580      	push	{r7, lr}
 8000422:	001e      	movs	r6, r3
 8000424:	4681      	mov	r9, r0
 8000426:	0002      	movs	r2, r0
 8000428:	0e2d      	lsrs	r5, r5, #24
 800042a:	00df      	lsls	r7, r3, #3
 800042c:	0fc9      	lsrs	r1, r1, #31
 800042e:	428c      	cmp	r4, r1
 8000430:	d024      	beq.n	800047c <__aeabi_fadd+0x78>
 8000432:	1a28      	subs	r0, r5, r0
 8000434:	2800      	cmp	r0, #0
 8000436:	dd0e      	ble.n	8000456 <__aeabi_fadd+0x52>
 8000438:	2a00      	cmp	r2, #0
 800043a:	d13e      	bne.n	80004ba <__aeabi_fadd+0xb6>
 800043c:	4662      	mov	r2, ip
 800043e:	2a00      	cmp	r2, #0
 8000440:	d100      	bne.n	8000444 <__aeabi_fadd+0x40>
 8000442:	e0fd      	b.n	8000640 <__aeabi_fadd+0x23c>
 8000444:	1e42      	subs	r2, r0, #1
 8000446:	2801      	cmp	r0, #1
 8000448:	d100      	bne.n	800044c <__aeabi_fadd+0x48>
 800044a:	e137      	b.n	80006bc <__aeabi_fadd+0x2b8>
 800044c:	28ff      	cmp	r0, #255	; 0xff
 800044e:	d100      	bne.n	8000452 <__aeabi_fadd+0x4e>
 8000450:	e0a9      	b.n	80005a6 <__aeabi_fadd+0x1a2>
 8000452:	0010      	movs	r0, r2
 8000454:	e039      	b.n	80004ca <__aeabi_fadd+0xc6>
 8000456:	2800      	cmp	r0, #0
 8000458:	d063      	beq.n	8000522 <__aeabi_fadd+0x11e>
 800045a:	464b      	mov	r3, r9
 800045c:	1b52      	subs	r2, r2, r5
 800045e:	2d00      	cmp	r5, #0
 8000460:	d000      	beq.n	8000464 <__aeabi_fadd+0x60>
 8000462:	e0e0      	b.n	8000626 <__aeabi_fadd+0x222>
 8000464:	2f00      	cmp	r7, #0
 8000466:	d100      	bne.n	800046a <__aeabi_fadd+0x66>
 8000468:	e0ce      	b.n	8000608 <__aeabi_fadd+0x204>
 800046a:	1e53      	subs	r3, r2, #1
 800046c:	2a01      	cmp	r2, #1
 800046e:	d100      	bne.n	8000472 <__aeabi_fadd+0x6e>
 8000470:	e155      	b.n	800071e <__aeabi_fadd+0x31a>
 8000472:	2aff      	cmp	r2, #255	; 0xff
 8000474:	d100      	bne.n	8000478 <__aeabi_fadd+0x74>
 8000476:	e094      	b.n	80005a2 <__aeabi_fadd+0x19e>
 8000478:	001a      	movs	r2, r3
 800047a:	e0d9      	b.n	8000630 <__aeabi_fadd+0x22c>
 800047c:	1a2a      	subs	r2, r5, r0
 800047e:	2a00      	cmp	r2, #0
 8000480:	dc00      	bgt.n	8000484 <__aeabi_fadd+0x80>
 8000482:	e099      	b.n	80005b8 <__aeabi_fadd+0x1b4>
 8000484:	2800      	cmp	r0, #0
 8000486:	d062      	beq.n	800054e <__aeabi_fadd+0x14a>
 8000488:	2dff      	cmp	r5, #255	; 0xff
 800048a:	d100      	bne.n	800048e <__aeabi_fadd+0x8a>
 800048c:	e08b      	b.n	80005a6 <__aeabi_fadd+0x1a2>
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	4661      	mov	r1, ip
 8000492:	04db      	lsls	r3, r3, #19
 8000494:	4319      	orrs	r1, r3
 8000496:	468c      	mov	ip, r1
 8000498:	2a1b      	cmp	r2, #27
 800049a:	dc00      	bgt.n	800049e <__aeabi_fadd+0x9a>
 800049c:	e0d2      	b.n	8000644 <__aeabi_fadd+0x240>
 800049e:	2301      	movs	r3, #1
 80004a0:	19db      	adds	r3, r3, r7
 80004a2:	015a      	lsls	r2, r3, #5
 80004a4:	d56a      	bpl.n	800057c <__aeabi_fadd+0x178>
 80004a6:	3501      	adds	r5, #1
 80004a8:	2dff      	cmp	r5, #255	; 0xff
 80004aa:	d05b      	beq.n	8000564 <__aeabi_fadd+0x160>
 80004ac:	2201      	movs	r2, #1
 80004ae:	49a3      	ldr	r1, [pc, #652]	; (800073c <__aeabi_fadd+0x338>)
 80004b0:	401a      	ands	r2, r3
 80004b2:	085b      	lsrs	r3, r3, #1
 80004b4:	400b      	ands	r3, r1
 80004b6:	4313      	orrs	r3, r2
 80004b8:	e01c      	b.n	80004f4 <__aeabi_fadd+0xf0>
 80004ba:	2dff      	cmp	r5, #255	; 0xff
 80004bc:	d100      	bne.n	80004c0 <__aeabi_fadd+0xbc>
 80004be:	e072      	b.n	80005a6 <__aeabi_fadd+0x1a2>
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	4662      	mov	r2, ip
 80004c4:	04db      	lsls	r3, r3, #19
 80004c6:	431a      	orrs	r2, r3
 80004c8:	4694      	mov	ip, r2
 80004ca:	281b      	cmp	r0, #27
 80004cc:	dc00      	bgt.n	80004d0 <__aeabi_fadd+0xcc>
 80004ce:	e090      	b.n	80005f2 <__aeabi_fadd+0x1ee>
 80004d0:	2301      	movs	r3, #1
 80004d2:	1afb      	subs	r3, r7, r3
 80004d4:	015a      	lsls	r2, r3, #5
 80004d6:	d551      	bpl.n	800057c <__aeabi_fadd+0x178>
 80004d8:	019b      	lsls	r3, r3, #6
 80004da:	099e      	lsrs	r6, r3, #6
 80004dc:	0030      	movs	r0, r6
 80004de:	f000 fc91 	bl	8000e04 <__clzsi2>
 80004e2:	0033      	movs	r3, r6
 80004e4:	3805      	subs	r0, #5
 80004e6:	4083      	lsls	r3, r0
 80004e8:	4285      	cmp	r5, r0
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_fadd+0xea>
 80004ec:	e075      	b.n	80005da <__aeabi_fadd+0x1d6>
 80004ee:	4a94      	ldr	r2, [pc, #592]	; (8000740 <__aeabi_fadd+0x33c>)
 80004f0:	1a2d      	subs	r5, r5, r0
 80004f2:	4013      	ands	r3, r2
 80004f4:	075a      	lsls	r2, r3, #29
 80004f6:	d004      	beq.n	8000502 <__aeabi_fadd+0xfe>
 80004f8:	220f      	movs	r2, #15
 80004fa:	401a      	ands	r2, r3
 80004fc:	2a04      	cmp	r2, #4
 80004fe:	d000      	beq.n	8000502 <__aeabi_fadd+0xfe>
 8000500:	3304      	adds	r3, #4
 8000502:	015a      	lsls	r2, r3, #5
 8000504:	d53c      	bpl.n	8000580 <__aeabi_fadd+0x17c>
 8000506:	1c68      	adds	r0, r5, #1
 8000508:	2dfe      	cmp	r5, #254	; 0xfe
 800050a:	d02b      	beq.n	8000564 <__aeabi_fadd+0x160>
 800050c:	019b      	lsls	r3, r3, #6
 800050e:	0a5e      	lsrs	r6, r3, #9
 8000510:	b2c0      	uxtb	r0, r0
 8000512:	05c0      	lsls	r0, r0, #23
 8000514:	4330      	orrs	r0, r6
 8000516:	07e4      	lsls	r4, r4, #31
 8000518:	4320      	orrs	r0, r4
 800051a:	bcc0      	pop	{r6, r7}
 800051c:	46b9      	mov	r9, r7
 800051e:	46b0      	mov	r8, r6
 8000520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000522:	20fe      	movs	r0, #254	; 0xfe
 8000524:	1c6a      	adds	r2, r5, #1
 8000526:	4210      	tst	r0, r2
 8000528:	d172      	bne.n	8000610 <__aeabi_fadd+0x20c>
 800052a:	2d00      	cmp	r5, #0
 800052c:	d000      	beq.n	8000530 <__aeabi_fadd+0x12c>
 800052e:	e0ae      	b.n	800068e <__aeabi_fadd+0x28a>
 8000530:	2f00      	cmp	r7, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_fadd+0x132>
 8000534:	e0ec      	b.n	8000710 <__aeabi_fadd+0x30c>
 8000536:	4663      	mov	r3, ip
 8000538:	2000      	movs	r0, #0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0e9      	beq.n	8000512 <__aeabi_fadd+0x10e>
 800053e:	1afb      	subs	r3, r7, r3
 8000540:	015a      	lsls	r2, r3, #5
 8000542:	d400      	bmi.n	8000546 <__aeabi_fadd+0x142>
 8000544:	e0f3      	b.n	800072e <__aeabi_fadd+0x32a>
 8000546:	4663      	mov	r3, ip
 8000548:	000c      	movs	r4, r1
 800054a:	1bdb      	subs	r3, r3, r7
 800054c:	e7d2      	b.n	80004f4 <__aeabi_fadd+0xf0>
 800054e:	4661      	mov	r1, ip
 8000550:	2900      	cmp	r1, #0
 8000552:	d05b      	beq.n	800060c <__aeabi_fadd+0x208>
 8000554:	1e51      	subs	r1, r2, #1
 8000556:	2a01      	cmp	r2, #1
 8000558:	d100      	bne.n	800055c <__aeabi_fadd+0x158>
 800055a:	e0a7      	b.n	80006ac <__aeabi_fadd+0x2a8>
 800055c:	2aff      	cmp	r2, #255	; 0xff
 800055e:	d022      	beq.n	80005a6 <__aeabi_fadd+0x1a2>
 8000560:	000a      	movs	r2, r1
 8000562:	e799      	b.n	8000498 <__aeabi_fadd+0x94>
 8000564:	20ff      	movs	r0, #255	; 0xff
 8000566:	2600      	movs	r6, #0
 8000568:	e7d3      	b.n	8000512 <__aeabi_fadd+0x10e>
 800056a:	21fe      	movs	r1, #254	; 0xfe
 800056c:	1c6a      	adds	r2, r5, #1
 800056e:	4211      	tst	r1, r2
 8000570:	d073      	beq.n	800065a <__aeabi_fadd+0x256>
 8000572:	2aff      	cmp	r2, #255	; 0xff
 8000574:	d0f6      	beq.n	8000564 <__aeabi_fadd+0x160>
 8000576:	0015      	movs	r5, r2
 8000578:	4467      	add	r7, ip
 800057a:	087b      	lsrs	r3, r7, #1
 800057c:	075a      	lsls	r2, r3, #29
 800057e:	d1bb      	bne.n	80004f8 <__aeabi_fadd+0xf4>
 8000580:	08db      	lsrs	r3, r3, #3
 8000582:	2dff      	cmp	r5, #255	; 0xff
 8000584:	d00f      	beq.n	80005a6 <__aeabi_fadd+0x1a2>
 8000586:	025b      	lsls	r3, r3, #9
 8000588:	0a5e      	lsrs	r6, r3, #9
 800058a:	b2e8      	uxtb	r0, r5
 800058c:	e7c1      	b.n	8000512 <__aeabi_fadd+0x10e>
 800058e:	4662      	mov	r2, ip
 8000590:	2a00      	cmp	r2, #0
 8000592:	d008      	beq.n	80005a6 <__aeabi_fadd+0x1a2>
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	03d2      	lsls	r2, r2, #15
 8000598:	4213      	tst	r3, r2
 800059a:	d004      	beq.n	80005a6 <__aeabi_fadd+0x1a2>
 800059c:	4640      	mov	r0, r8
 800059e:	4210      	tst	r0, r2
 80005a0:	d101      	bne.n	80005a6 <__aeabi_fadd+0x1a2>
 80005a2:	000c      	movs	r4, r1
 80005a4:	4643      	mov	r3, r8
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0dc      	beq.n	8000564 <__aeabi_fadd+0x160>
 80005aa:	2680      	movs	r6, #128	; 0x80
 80005ac:	03f6      	lsls	r6, r6, #15
 80005ae:	431e      	orrs	r6, r3
 80005b0:	0276      	lsls	r6, r6, #9
 80005b2:	20ff      	movs	r0, #255	; 0xff
 80005b4:	0a76      	lsrs	r6, r6, #9
 80005b6:	e7ac      	b.n	8000512 <__aeabi_fadd+0x10e>
 80005b8:	2a00      	cmp	r2, #0
 80005ba:	d0d6      	beq.n	800056a <__aeabi_fadd+0x166>
 80005bc:	1b42      	subs	r2, r0, r5
 80005be:	2d00      	cmp	r5, #0
 80005c0:	d05c      	beq.n	800067c <__aeabi_fadd+0x278>
 80005c2:	28ff      	cmp	r0, #255	; 0xff
 80005c4:	d0ee      	beq.n	80005a4 <__aeabi_fadd+0x1a0>
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	04db      	lsls	r3, r3, #19
 80005ca:	431f      	orrs	r7, r3
 80005cc:	2a1b      	cmp	r2, #27
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_fadd+0x1ce>
 80005d0:	e082      	b.n	80006d8 <__aeabi_fadd+0x2d4>
 80005d2:	2301      	movs	r3, #1
 80005d4:	464d      	mov	r5, r9
 80005d6:	4463      	add	r3, ip
 80005d8:	e763      	b.n	80004a2 <__aeabi_fadd+0x9e>
 80005da:	2220      	movs	r2, #32
 80005dc:	1b40      	subs	r0, r0, r5
 80005de:	3001      	adds	r0, #1
 80005e0:	1a12      	subs	r2, r2, r0
 80005e2:	0019      	movs	r1, r3
 80005e4:	4093      	lsls	r3, r2
 80005e6:	40c1      	lsrs	r1, r0
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	4193      	sbcs	r3, r2
 80005ec:	2500      	movs	r5, #0
 80005ee:	430b      	orrs	r3, r1
 80005f0:	e780      	b.n	80004f4 <__aeabi_fadd+0xf0>
 80005f2:	2320      	movs	r3, #32
 80005f4:	4661      	mov	r1, ip
 80005f6:	1a1b      	subs	r3, r3, r0
 80005f8:	4099      	lsls	r1, r3
 80005fa:	4662      	mov	r2, ip
 80005fc:	000b      	movs	r3, r1
 80005fe:	40c2      	lsrs	r2, r0
 8000600:	1e59      	subs	r1, r3, #1
 8000602:	418b      	sbcs	r3, r1
 8000604:	4313      	orrs	r3, r2
 8000606:	e764      	b.n	80004d2 <__aeabi_fadd+0xce>
 8000608:	000c      	movs	r4, r1
 800060a:	4643      	mov	r3, r8
 800060c:	0015      	movs	r5, r2
 800060e:	e7b8      	b.n	8000582 <__aeabi_fadd+0x17e>
 8000610:	4663      	mov	r3, ip
 8000612:	1afe      	subs	r6, r7, r3
 8000614:	0173      	lsls	r3, r6, #5
 8000616:	d445      	bmi.n	80006a4 <__aeabi_fadd+0x2a0>
 8000618:	2e00      	cmp	r6, #0
 800061a:	d000      	beq.n	800061e <__aeabi_fadd+0x21a>
 800061c:	e75e      	b.n	80004dc <__aeabi_fadd+0xd8>
 800061e:	2400      	movs	r4, #0
 8000620:	2000      	movs	r0, #0
 8000622:	2600      	movs	r6, #0
 8000624:	e775      	b.n	8000512 <__aeabi_fadd+0x10e>
 8000626:	2bff      	cmp	r3, #255	; 0xff
 8000628:	d0bb      	beq.n	80005a2 <__aeabi_fadd+0x19e>
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	04db      	lsls	r3, r3, #19
 800062e:	431f      	orrs	r7, r3
 8000630:	2a1b      	cmp	r2, #27
 8000632:	dd47      	ble.n	80006c4 <__aeabi_fadd+0x2c0>
 8000634:	2301      	movs	r3, #1
 8000636:	4662      	mov	r2, ip
 8000638:	000c      	movs	r4, r1
 800063a:	464d      	mov	r5, r9
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	e749      	b.n	80004d4 <__aeabi_fadd+0xd0>
 8000640:	0005      	movs	r5, r0
 8000642:	e79e      	b.n	8000582 <__aeabi_fadd+0x17e>
 8000644:	4661      	mov	r1, ip
 8000646:	2320      	movs	r3, #32
 8000648:	40d1      	lsrs	r1, r2
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	4662      	mov	r2, ip
 800064e:	409a      	lsls	r2, r3
 8000650:	0013      	movs	r3, r2
 8000652:	1e5a      	subs	r2, r3, #1
 8000654:	4193      	sbcs	r3, r2
 8000656:	430b      	orrs	r3, r1
 8000658:	e722      	b.n	80004a0 <__aeabi_fadd+0x9c>
 800065a:	2d00      	cmp	r5, #0
 800065c:	d146      	bne.n	80006ec <__aeabi_fadd+0x2e8>
 800065e:	2f00      	cmp	r7, #0
 8000660:	d062      	beq.n	8000728 <__aeabi_fadd+0x324>
 8000662:	4663      	mov	r3, ip
 8000664:	2000      	movs	r0, #0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x268>
 800066a:	e752      	b.n	8000512 <__aeabi_fadd+0x10e>
 800066c:	003b      	movs	r3, r7
 800066e:	4463      	add	r3, ip
 8000670:	015a      	lsls	r2, r3, #5
 8000672:	d583      	bpl.n	800057c <__aeabi_fadd+0x178>
 8000674:	4a32      	ldr	r2, [pc, #200]	; (8000740 <__aeabi_fadd+0x33c>)
 8000676:	3501      	adds	r5, #1
 8000678:	4013      	ands	r3, r2
 800067a:	e77f      	b.n	800057c <__aeabi_fadd+0x178>
 800067c:	2f00      	cmp	r7, #0
 800067e:	d0c4      	beq.n	800060a <__aeabi_fadd+0x206>
 8000680:	1e53      	subs	r3, r2, #1
 8000682:	2a01      	cmp	r2, #1
 8000684:	d012      	beq.n	80006ac <__aeabi_fadd+0x2a8>
 8000686:	2aff      	cmp	r2, #255	; 0xff
 8000688:	d08c      	beq.n	80005a4 <__aeabi_fadd+0x1a0>
 800068a:	001a      	movs	r2, r3
 800068c:	e79e      	b.n	80005cc <__aeabi_fadd+0x1c8>
 800068e:	2f00      	cmp	r7, #0
 8000690:	d000      	beq.n	8000694 <__aeabi_fadd+0x290>
 8000692:	e77c      	b.n	800058e <__aeabi_fadd+0x18a>
 8000694:	4663      	mov	r3, ip
 8000696:	2b00      	cmp	r3, #0
 8000698:	d183      	bne.n	80005a2 <__aeabi_fadd+0x19e>
 800069a:	2680      	movs	r6, #128	; 0x80
 800069c:	2400      	movs	r4, #0
 800069e:	20ff      	movs	r0, #255	; 0xff
 80006a0:	03f6      	lsls	r6, r6, #15
 80006a2:	e736      	b.n	8000512 <__aeabi_fadd+0x10e>
 80006a4:	4663      	mov	r3, ip
 80006a6:	000c      	movs	r4, r1
 80006a8:	1bde      	subs	r6, r3, r7
 80006aa:	e717      	b.n	80004dc <__aeabi_fadd+0xd8>
 80006ac:	003b      	movs	r3, r7
 80006ae:	4463      	add	r3, ip
 80006b0:	2501      	movs	r5, #1
 80006b2:	015a      	lsls	r2, r3, #5
 80006b4:	d400      	bmi.n	80006b8 <__aeabi_fadd+0x2b4>
 80006b6:	e761      	b.n	800057c <__aeabi_fadd+0x178>
 80006b8:	2502      	movs	r5, #2
 80006ba:	e6f7      	b.n	80004ac <__aeabi_fadd+0xa8>
 80006bc:	4663      	mov	r3, ip
 80006be:	2501      	movs	r5, #1
 80006c0:	1afb      	subs	r3, r7, r3
 80006c2:	e707      	b.n	80004d4 <__aeabi_fadd+0xd0>
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	0038      	movs	r0, r7
 80006ca:	409f      	lsls	r7, r3
 80006cc:	003b      	movs	r3, r7
 80006ce:	40d0      	lsrs	r0, r2
 80006d0:	1e5a      	subs	r2, r3, #1
 80006d2:	4193      	sbcs	r3, r2
 80006d4:	4303      	orrs	r3, r0
 80006d6:	e7ae      	b.n	8000636 <__aeabi_fadd+0x232>
 80006d8:	2320      	movs	r3, #32
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	0039      	movs	r1, r7
 80006de:	409f      	lsls	r7, r3
 80006e0:	003b      	movs	r3, r7
 80006e2:	40d1      	lsrs	r1, r2
 80006e4:	1e5a      	subs	r2, r3, #1
 80006e6:	4193      	sbcs	r3, r2
 80006e8:	430b      	orrs	r3, r1
 80006ea:	e773      	b.n	80005d4 <__aeabi_fadd+0x1d0>
 80006ec:	2f00      	cmp	r7, #0
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fadd+0x2ee>
 80006f0:	e758      	b.n	80005a4 <__aeabi_fadd+0x1a0>
 80006f2:	4662      	mov	r2, ip
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	d100      	bne.n	80006fa <__aeabi_fadd+0x2f6>
 80006f8:	e755      	b.n	80005a6 <__aeabi_fadd+0x1a2>
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	03d2      	lsls	r2, r2, #15
 80006fe:	4213      	tst	r3, r2
 8000700:	d100      	bne.n	8000704 <__aeabi_fadd+0x300>
 8000702:	e750      	b.n	80005a6 <__aeabi_fadd+0x1a2>
 8000704:	4641      	mov	r1, r8
 8000706:	4211      	tst	r1, r2
 8000708:	d000      	beq.n	800070c <__aeabi_fadd+0x308>
 800070a:	e74c      	b.n	80005a6 <__aeabi_fadd+0x1a2>
 800070c:	4643      	mov	r3, r8
 800070e:	e74a      	b.n	80005a6 <__aeabi_fadd+0x1a2>
 8000710:	4663      	mov	r3, ip
 8000712:	2b00      	cmp	r3, #0
 8000714:	d083      	beq.n	800061e <__aeabi_fadd+0x21a>
 8000716:	000c      	movs	r4, r1
 8000718:	4646      	mov	r6, r8
 800071a:	2000      	movs	r0, #0
 800071c:	e6f9      	b.n	8000512 <__aeabi_fadd+0x10e>
 800071e:	4663      	mov	r3, ip
 8000720:	000c      	movs	r4, r1
 8000722:	1bdb      	subs	r3, r3, r7
 8000724:	3501      	adds	r5, #1
 8000726:	e6d5      	b.n	80004d4 <__aeabi_fadd+0xd0>
 8000728:	4646      	mov	r6, r8
 800072a:	2000      	movs	r0, #0
 800072c:	e6f1      	b.n	8000512 <__aeabi_fadd+0x10e>
 800072e:	2b00      	cmp	r3, #0
 8000730:	d000      	beq.n	8000734 <__aeabi_fadd+0x330>
 8000732:	e723      	b.n	800057c <__aeabi_fadd+0x178>
 8000734:	2400      	movs	r4, #0
 8000736:	2600      	movs	r6, #0
 8000738:	e6eb      	b.n	8000512 <__aeabi_fadd+0x10e>
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	7dffffff 	.word	0x7dffffff
 8000740:	fbffffff 	.word	0xfbffffff

08000744 <__aeabi_fmul>:
 8000744:	0243      	lsls	r3, r0, #9
 8000746:	0a5b      	lsrs	r3, r3, #9
 8000748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074a:	464f      	mov	r7, r9
 800074c:	4646      	mov	r6, r8
 800074e:	4699      	mov	r9, r3
 8000750:	46d6      	mov	lr, sl
 8000752:	0fc3      	lsrs	r3, r0, #31
 8000754:	0045      	lsls	r5, r0, #1
 8000756:	4698      	mov	r8, r3
 8000758:	b5c0      	push	{r6, r7, lr}
 800075a:	464b      	mov	r3, r9
 800075c:	1c0f      	adds	r7, r1, #0
 800075e:	0e2d      	lsrs	r5, r5, #24
 8000760:	d100      	bne.n	8000764 <__aeabi_fmul+0x20>
 8000762:	e0cb      	b.n	80008fc <__aeabi_fmul+0x1b8>
 8000764:	2dff      	cmp	r5, #255	; 0xff
 8000766:	d100      	bne.n	800076a <__aeabi_fmul+0x26>
 8000768:	e0cf      	b.n	800090a <__aeabi_fmul+0x1c6>
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	04d2      	lsls	r2, r2, #19
 8000770:	431a      	orrs	r2, r3
 8000772:	2300      	movs	r3, #0
 8000774:	4691      	mov	r9, r2
 8000776:	2600      	movs	r6, #0
 8000778:	469a      	mov	sl, r3
 800077a:	3d7f      	subs	r5, #127	; 0x7f
 800077c:	027c      	lsls	r4, r7, #9
 800077e:	007b      	lsls	r3, r7, #1
 8000780:	0a64      	lsrs	r4, r4, #9
 8000782:	0e1b      	lsrs	r3, r3, #24
 8000784:	0fff      	lsrs	r7, r7, #31
 8000786:	2b00      	cmp	r3, #0
 8000788:	d100      	bne.n	800078c <__aeabi_fmul+0x48>
 800078a:	e0a9      	b.n	80008e0 <__aeabi_fmul+0x19c>
 800078c:	2bff      	cmp	r3, #255	; 0xff
 800078e:	d011      	beq.n	80007b4 <__aeabi_fmul+0x70>
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	00e4      	lsls	r4, r4, #3
 8000794:	04d2      	lsls	r2, r2, #19
 8000796:	4314      	orrs	r4, r2
 8000798:	4642      	mov	r2, r8
 800079a:	3b7f      	subs	r3, #127	; 0x7f
 800079c:	195b      	adds	r3, r3, r5
 800079e:	407a      	eors	r2, r7
 80007a0:	2000      	movs	r0, #0
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	1c5d      	adds	r5, r3, #1
 80007a6:	2e0a      	cmp	r6, #10
 80007a8:	dd13      	ble.n	80007d2 <__aeabi_fmul+0x8e>
 80007aa:	003a      	movs	r2, r7
 80007ac:	2e0b      	cmp	r6, #11
 80007ae:	d047      	beq.n	8000840 <__aeabi_fmul+0xfc>
 80007b0:	4647      	mov	r7, r8
 80007b2:	e03f      	b.n	8000834 <__aeabi_fmul+0xf0>
 80007b4:	002b      	movs	r3, r5
 80007b6:	33ff      	adds	r3, #255	; 0xff
 80007b8:	2c00      	cmp	r4, #0
 80007ba:	d11e      	bne.n	80007fa <__aeabi_fmul+0xb6>
 80007bc:	2202      	movs	r2, #2
 80007be:	4316      	orrs	r6, r2
 80007c0:	4642      	mov	r2, r8
 80007c2:	3501      	adds	r5, #1
 80007c4:	407a      	eors	r2, r7
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	35ff      	adds	r5, #255	; 0xff
 80007ca:	2e0a      	cmp	r6, #10
 80007cc:	dd00      	ble.n	80007d0 <__aeabi_fmul+0x8c>
 80007ce:	e0e4      	b.n	800099a <__aeabi_fmul+0x256>
 80007d0:	2002      	movs	r0, #2
 80007d2:	2e02      	cmp	r6, #2
 80007d4:	dc1c      	bgt.n	8000810 <__aeabi_fmul+0xcc>
 80007d6:	3e01      	subs	r6, #1
 80007d8:	2e01      	cmp	r6, #1
 80007da:	d842      	bhi.n	8000862 <__aeabi_fmul+0x11e>
 80007dc:	2802      	cmp	r0, #2
 80007de:	d03d      	beq.n	800085c <__aeabi_fmul+0x118>
 80007e0:	2801      	cmp	r0, #1
 80007e2:	d166      	bne.n	80008b2 <__aeabi_fmul+0x16e>
 80007e4:	2000      	movs	r0, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	05c0      	lsls	r0, r0, #23
 80007ea:	4308      	orrs	r0, r1
 80007ec:	07d2      	lsls	r2, r2, #31
 80007ee:	4310      	orrs	r0, r2
 80007f0:	bce0      	pop	{r5, r6, r7}
 80007f2:	46ba      	mov	sl, r7
 80007f4:	46b1      	mov	r9, r6
 80007f6:	46a8      	mov	r8, r5
 80007f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007fa:	2203      	movs	r2, #3
 80007fc:	4316      	orrs	r6, r2
 80007fe:	4642      	mov	r2, r8
 8000800:	3501      	adds	r5, #1
 8000802:	407a      	eors	r2, r7
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	35ff      	adds	r5, #255	; 0xff
 8000808:	2e0a      	cmp	r6, #10
 800080a:	dd00      	ble.n	800080e <__aeabi_fmul+0xca>
 800080c:	e0e4      	b.n	80009d8 <__aeabi_fmul+0x294>
 800080e:	2003      	movs	r0, #3
 8000810:	2101      	movs	r1, #1
 8000812:	40b1      	lsls	r1, r6
 8000814:	26a6      	movs	r6, #166	; 0xa6
 8000816:	00f6      	lsls	r6, r6, #3
 8000818:	4231      	tst	r1, r6
 800081a:	d10a      	bne.n	8000832 <__aeabi_fmul+0xee>
 800081c:	2690      	movs	r6, #144	; 0x90
 800081e:	00b6      	lsls	r6, r6, #2
 8000820:	4231      	tst	r1, r6
 8000822:	d116      	bne.n	8000852 <__aeabi_fmul+0x10e>
 8000824:	3eb9      	subs	r6, #185	; 0xb9
 8000826:	3eff      	subs	r6, #255	; 0xff
 8000828:	420e      	tst	r6, r1
 800082a:	d01a      	beq.n	8000862 <__aeabi_fmul+0x11e>
 800082c:	46a1      	mov	r9, r4
 800082e:	4682      	mov	sl, r0
 8000830:	e000      	b.n	8000834 <__aeabi_fmul+0xf0>
 8000832:	0017      	movs	r7, r2
 8000834:	4653      	mov	r3, sl
 8000836:	003a      	movs	r2, r7
 8000838:	2b02      	cmp	r3, #2
 800083a:	d00f      	beq.n	800085c <__aeabi_fmul+0x118>
 800083c:	464c      	mov	r4, r9
 800083e:	4650      	mov	r0, sl
 8000840:	2803      	cmp	r0, #3
 8000842:	d1cd      	bne.n	80007e0 <__aeabi_fmul+0x9c>
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	03c9      	lsls	r1, r1, #15
 8000848:	4321      	orrs	r1, r4
 800084a:	0249      	lsls	r1, r1, #9
 800084c:	20ff      	movs	r0, #255	; 0xff
 800084e:	0a49      	lsrs	r1, r1, #9
 8000850:	e7ca      	b.n	80007e8 <__aeabi_fmul+0xa4>
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	2200      	movs	r2, #0
 8000856:	20ff      	movs	r0, #255	; 0xff
 8000858:	03c9      	lsls	r1, r1, #15
 800085a:	e7c5      	b.n	80007e8 <__aeabi_fmul+0xa4>
 800085c:	20ff      	movs	r0, #255	; 0xff
 800085e:	2100      	movs	r1, #0
 8000860:	e7c2      	b.n	80007e8 <__aeabi_fmul+0xa4>
 8000862:	0c20      	lsrs	r0, r4, #16
 8000864:	4649      	mov	r1, r9
 8000866:	0424      	lsls	r4, r4, #16
 8000868:	0c24      	lsrs	r4, r4, #16
 800086a:	0027      	movs	r7, r4
 800086c:	0c0e      	lsrs	r6, r1, #16
 800086e:	0409      	lsls	r1, r1, #16
 8000870:	0c09      	lsrs	r1, r1, #16
 8000872:	4374      	muls	r4, r6
 8000874:	434f      	muls	r7, r1
 8000876:	4346      	muls	r6, r0
 8000878:	4348      	muls	r0, r1
 800087a:	0c39      	lsrs	r1, r7, #16
 800087c:	1900      	adds	r0, r0, r4
 800087e:	1809      	adds	r1, r1, r0
 8000880:	428c      	cmp	r4, r1
 8000882:	d903      	bls.n	800088c <__aeabi_fmul+0x148>
 8000884:	2080      	movs	r0, #128	; 0x80
 8000886:	0240      	lsls	r0, r0, #9
 8000888:	4684      	mov	ip, r0
 800088a:	4466      	add	r6, ip
 800088c:	043f      	lsls	r7, r7, #16
 800088e:	0408      	lsls	r0, r1, #16
 8000890:	0c3f      	lsrs	r7, r7, #16
 8000892:	19c0      	adds	r0, r0, r7
 8000894:	0184      	lsls	r4, r0, #6
 8000896:	1e67      	subs	r7, r4, #1
 8000898:	41bc      	sbcs	r4, r7
 800089a:	0c09      	lsrs	r1, r1, #16
 800089c:	0e80      	lsrs	r0, r0, #26
 800089e:	1989      	adds	r1, r1, r6
 80008a0:	4304      	orrs	r4, r0
 80008a2:	0189      	lsls	r1, r1, #6
 80008a4:	430c      	orrs	r4, r1
 80008a6:	0109      	lsls	r1, r1, #4
 80008a8:	d571      	bpl.n	800098e <__aeabi_fmul+0x24a>
 80008aa:	2301      	movs	r3, #1
 80008ac:	0861      	lsrs	r1, r4, #1
 80008ae:	401c      	ands	r4, r3
 80008b0:	430c      	orrs	r4, r1
 80008b2:	002b      	movs	r3, r5
 80008b4:	337f      	adds	r3, #127	; 0x7f
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	dd51      	ble.n	800095e <__aeabi_fmul+0x21a>
 80008ba:	0761      	lsls	r1, r4, #29
 80008bc:	d004      	beq.n	80008c8 <__aeabi_fmul+0x184>
 80008be:	210f      	movs	r1, #15
 80008c0:	4021      	ands	r1, r4
 80008c2:	2904      	cmp	r1, #4
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fmul+0x184>
 80008c6:	3404      	adds	r4, #4
 80008c8:	0121      	lsls	r1, r4, #4
 80008ca:	d503      	bpl.n	80008d4 <__aeabi_fmul+0x190>
 80008cc:	4b43      	ldr	r3, [pc, #268]	; (80009dc <__aeabi_fmul+0x298>)
 80008ce:	401c      	ands	r4, r3
 80008d0:	002b      	movs	r3, r5
 80008d2:	3380      	adds	r3, #128	; 0x80
 80008d4:	2bfe      	cmp	r3, #254	; 0xfe
 80008d6:	dcc1      	bgt.n	800085c <__aeabi_fmul+0x118>
 80008d8:	01a1      	lsls	r1, r4, #6
 80008da:	0a49      	lsrs	r1, r1, #9
 80008dc:	b2d8      	uxtb	r0, r3
 80008de:	e783      	b.n	80007e8 <__aeabi_fmul+0xa4>
 80008e0:	2c00      	cmp	r4, #0
 80008e2:	d12c      	bne.n	800093e <__aeabi_fmul+0x1fa>
 80008e4:	2301      	movs	r3, #1
 80008e6:	4642      	mov	r2, r8
 80008e8:	431e      	orrs	r6, r3
 80008ea:	002b      	movs	r3, r5
 80008ec:	407a      	eors	r2, r7
 80008ee:	2001      	movs	r0, #1
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	1c5d      	adds	r5, r3, #1
 80008f4:	2e0a      	cmp	r6, #10
 80008f6:	dd00      	ble.n	80008fa <__aeabi_fmul+0x1b6>
 80008f8:	e757      	b.n	80007aa <__aeabi_fmul+0x66>
 80008fa:	e76a      	b.n	80007d2 <__aeabi_fmul+0x8e>
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d110      	bne.n	8000922 <__aeabi_fmul+0x1de>
 8000900:	2301      	movs	r3, #1
 8000902:	2604      	movs	r6, #4
 8000904:	2500      	movs	r5, #0
 8000906:	469a      	mov	sl, r3
 8000908:	e738      	b.n	800077c <__aeabi_fmul+0x38>
 800090a:	2b00      	cmp	r3, #0
 800090c:	d104      	bne.n	8000918 <__aeabi_fmul+0x1d4>
 800090e:	2302      	movs	r3, #2
 8000910:	2608      	movs	r6, #8
 8000912:	25ff      	movs	r5, #255	; 0xff
 8000914:	469a      	mov	sl, r3
 8000916:	e731      	b.n	800077c <__aeabi_fmul+0x38>
 8000918:	2303      	movs	r3, #3
 800091a:	260c      	movs	r6, #12
 800091c:	25ff      	movs	r5, #255	; 0xff
 800091e:	469a      	mov	sl, r3
 8000920:	e72c      	b.n	800077c <__aeabi_fmul+0x38>
 8000922:	4648      	mov	r0, r9
 8000924:	f000 fa6e 	bl	8000e04 <__clzsi2>
 8000928:	464a      	mov	r2, r9
 800092a:	1f43      	subs	r3, r0, #5
 800092c:	2576      	movs	r5, #118	; 0x76
 800092e:	409a      	lsls	r2, r3
 8000930:	2300      	movs	r3, #0
 8000932:	426d      	negs	r5, r5
 8000934:	4691      	mov	r9, r2
 8000936:	2600      	movs	r6, #0
 8000938:	469a      	mov	sl, r3
 800093a:	1a2d      	subs	r5, r5, r0
 800093c:	e71e      	b.n	800077c <__aeabi_fmul+0x38>
 800093e:	0020      	movs	r0, r4
 8000940:	f000 fa60 	bl	8000e04 <__clzsi2>
 8000944:	4642      	mov	r2, r8
 8000946:	1f43      	subs	r3, r0, #5
 8000948:	409c      	lsls	r4, r3
 800094a:	1a2b      	subs	r3, r5, r0
 800094c:	3b76      	subs	r3, #118	; 0x76
 800094e:	407a      	eors	r2, r7
 8000950:	2000      	movs	r0, #0
 8000952:	b2d2      	uxtb	r2, r2
 8000954:	1c5d      	adds	r5, r3, #1
 8000956:	2e0a      	cmp	r6, #10
 8000958:	dd00      	ble.n	800095c <__aeabi_fmul+0x218>
 800095a:	e726      	b.n	80007aa <__aeabi_fmul+0x66>
 800095c:	e739      	b.n	80007d2 <__aeabi_fmul+0x8e>
 800095e:	2101      	movs	r1, #1
 8000960:	1acb      	subs	r3, r1, r3
 8000962:	2b1b      	cmp	r3, #27
 8000964:	dd00      	ble.n	8000968 <__aeabi_fmul+0x224>
 8000966:	e73d      	b.n	80007e4 <__aeabi_fmul+0xa0>
 8000968:	359e      	adds	r5, #158	; 0x9e
 800096a:	0021      	movs	r1, r4
 800096c:	40ac      	lsls	r4, r5
 800096e:	40d9      	lsrs	r1, r3
 8000970:	1e63      	subs	r3, r4, #1
 8000972:	419c      	sbcs	r4, r3
 8000974:	4321      	orrs	r1, r4
 8000976:	074b      	lsls	r3, r1, #29
 8000978:	d004      	beq.n	8000984 <__aeabi_fmul+0x240>
 800097a:	230f      	movs	r3, #15
 800097c:	400b      	ands	r3, r1
 800097e:	2b04      	cmp	r3, #4
 8000980:	d000      	beq.n	8000984 <__aeabi_fmul+0x240>
 8000982:	3104      	adds	r1, #4
 8000984:	014b      	lsls	r3, r1, #5
 8000986:	d504      	bpl.n	8000992 <__aeabi_fmul+0x24e>
 8000988:	2001      	movs	r0, #1
 800098a:	2100      	movs	r1, #0
 800098c:	e72c      	b.n	80007e8 <__aeabi_fmul+0xa4>
 800098e:	001d      	movs	r5, r3
 8000990:	e78f      	b.n	80008b2 <__aeabi_fmul+0x16e>
 8000992:	0189      	lsls	r1, r1, #6
 8000994:	2000      	movs	r0, #0
 8000996:	0a49      	lsrs	r1, r1, #9
 8000998:	e726      	b.n	80007e8 <__aeabi_fmul+0xa4>
 800099a:	2302      	movs	r3, #2
 800099c:	2e0f      	cmp	r6, #15
 800099e:	d10c      	bne.n	80009ba <__aeabi_fmul+0x276>
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	464b      	mov	r3, r9
 80009a4:	03c9      	lsls	r1, r1, #15
 80009a6:	420b      	tst	r3, r1
 80009a8:	d00d      	beq.n	80009c6 <__aeabi_fmul+0x282>
 80009aa:	420c      	tst	r4, r1
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_fmul+0x282>
 80009ae:	4321      	orrs	r1, r4
 80009b0:	0249      	lsls	r1, r1, #9
 80009b2:	003a      	movs	r2, r7
 80009b4:	20ff      	movs	r0, #255	; 0xff
 80009b6:	0a49      	lsrs	r1, r1, #9
 80009b8:	e716      	b.n	80007e8 <__aeabi_fmul+0xa4>
 80009ba:	2e0b      	cmp	r6, #11
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fmul+0x27c>
 80009be:	e6f7      	b.n	80007b0 <__aeabi_fmul+0x6c>
 80009c0:	46a1      	mov	r9, r4
 80009c2:	469a      	mov	sl, r3
 80009c4:	e736      	b.n	8000834 <__aeabi_fmul+0xf0>
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	464b      	mov	r3, r9
 80009ca:	03c9      	lsls	r1, r1, #15
 80009cc:	4319      	orrs	r1, r3
 80009ce:	0249      	lsls	r1, r1, #9
 80009d0:	4642      	mov	r2, r8
 80009d2:	20ff      	movs	r0, #255	; 0xff
 80009d4:	0a49      	lsrs	r1, r1, #9
 80009d6:	e707      	b.n	80007e8 <__aeabi_fmul+0xa4>
 80009d8:	2303      	movs	r3, #3
 80009da:	e7df      	b.n	800099c <__aeabi_fmul+0x258>
 80009dc:	f7ffffff 	.word	0xf7ffffff

080009e0 <__aeabi_fsub>:
 80009e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e2:	46c6      	mov	lr, r8
 80009e4:	0243      	lsls	r3, r0, #9
 80009e6:	0a5b      	lsrs	r3, r3, #9
 80009e8:	0045      	lsls	r5, r0, #1
 80009ea:	00da      	lsls	r2, r3, #3
 80009ec:	0fc4      	lsrs	r4, r0, #31
 80009ee:	0248      	lsls	r0, r1, #9
 80009f0:	004f      	lsls	r7, r1, #1
 80009f2:	4694      	mov	ip, r2
 80009f4:	0a42      	lsrs	r2, r0, #9
 80009f6:	001e      	movs	r6, r3
 80009f8:	4690      	mov	r8, r2
 80009fa:	b500      	push	{lr}
 80009fc:	0e2d      	lsrs	r5, r5, #24
 80009fe:	0e3f      	lsrs	r7, r7, #24
 8000a00:	0fc9      	lsrs	r1, r1, #31
 8000a02:	0980      	lsrs	r0, r0, #6
 8000a04:	2fff      	cmp	r7, #255	; 0xff
 8000a06:	d059      	beq.n	8000abc <__aeabi_fsub+0xdc>
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4051      	eors	r1, r2
 8000a0c:	428c      	cmp	r4, r1
 8000a0e:	d039      	beq.n	8000a84 <__aeabi_fsub+0xa4>
 8000a10:	1bea      	subs	r2, r5, r7
 8000a12:	2a00      	cmp	r2, #0
 8000a14:	dd58      	ble.n	8000ac8 <__aeabi_fsub+0xe8>
 8000a16:	2f00      	cmp	r7, #0
 8000a18:	d068      	beq.n	8000aec <__aeabi_fsub+0x10c>
 8000a1a:	2dff      	cmp	r5, #255	; 0xff
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fsub+0x40>
 8000a1e:	e0d1      	b.n	8000bc4 <__aeabi_fsub+0x1e4>
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	04db      	lsls	r3, r3, #19
 8000a24:	4318      	orrs	r0, r3
 8000a26:	2a1b      	cmp	r2, #27
 8000a28:	dc00      	bgt.n	8000a2c <__aeabi_fsub+0x4c>
 8000a2a:	e0e3      	b.n	8000bf4 <__aeabi_fsub+0x214>
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	4662      	mov	r2, ip
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	015a      	lsls	r2, r3, #5
 8000a34:	d400      	bmi.n	8000a38 <__aeabi_fsub+0x58>
 8000a36:	e0ac      	b.n	8000b92 <__aeabi_fsub+0x1b2>
 8000a38:	019b      	lsls	r3, r3, #6
 8000a3a:	099e      	lsrs	r6, r3, #6
 8000a3c:	0030      	movs	r0, r6
 8000a3e:	f000 f9e1 	bl	8000e04 <__clzsi2>
 8000a42:	0033      	movs	r3, r6
 8000a44:	3805      	subs	r0, #5
 8000a46:	4083      	lsls	r3, r0
 8000a48:	4285      	cmp	r5, r0
 8000a4a:	dc00      	bgt.n	8000a4e <__aeabi_fsub+0x6e>
 8000a4c:	e0c6      	b.n	8000bdc <__aeabi_fsub+0x1fc>
 8000a4e:	4ab2      	ldr	r2, [pc, #712]	; (8000d18 <__aeabi_fsub+0x338>)
 8000a50:	1a2d      	subs	r5, r5, r0
 8000a52:	4013      	ands	r3, r2
 8000a54:	075a      	lsls	r2, r3, #29
 8000a56:	d004      	beq.n	8000a62 <__aeabi_fsub+0x82>
 8000a58:	220f      	movs	r2, #15
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	2a04      	cmp	r2, #4
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fsub+0x82>
 8000a60:	3304      	adds	r3, #4
 8000a62:	015a      	lsls	r2, r3, #5
 8000a64:	d400      	bmi.n	8000a68 <__aeabi_fsub+0x88>
 8000a66:	e097      	b.n	8000b98 <__aeabi_fsub+0x1b8>
 8000a68:	1c6a      	adds	r2, r5, #1
 8000a6a:	2dfe      	cmp	r5, #254	; 0xfe
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_fsub+0x90>
 8000a6e:	e084      	b.n	8000b7a <__aeabi_fsub+0x19a>
 8000a70:	019b      	lsls	r3, r3, #6
 8000a72:	0a5e      	lsrs	r6, r3, #9
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	05d0      	lsls	r0, r2, #23
 8000a78:	4330      	orrs	r0, r6
 8000a7a:	07e4      	lsls	r4, r4, #31
 8000a7c:	4320      	orrs	r0, r4
 8000a7e:	bc80      	pop	{r7}
 8000a80:	46b8      	mov	r8, r7
 8000a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a84:	1bea      	subs	r2, r5, r7
 8000a86:	2a00      	cmp	r2, #0
 8000a88:	dd41      	ble.n	8000b0e <__aeabi_fsub+0x12e>
 8000a8a:	2f00      	cmp	r7, #0
 8000a8c:	d06b      	beq.n	8000b66 <__aeabi_fsub+0x186>
 8000a8e:	2dff      	cmp	r5, #255	; 0xff
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fsub+0xb4>
 8000a92:	e097      	b.n	8000bc4 <__aeabi_fsub+0x1e4>
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	04db      	lsls	r3, r3, #19
 8000a98:	4318      	orrs	r0, r3
 8000a9a:	2a1b      	cmp	r2, #27
 8000a9c:	dc00      	bgt.n	8000aa0 <__aeabi_fsub+0xc0>
 8000a9e:	e0cc      	b.n	8000c3a <__aeabi_fsub+0x25a>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	4463      	add	r3, ip
 8000aa4:	015a      	lsls	r2, r3, #5
 8000aa6:	d574      	bpl.n	8000b92 <__aeabi_fsub+0x1b2>
 8000aa8:	3501      	adds	r5, #1
 8000aaa:	2dff      	cmp	r5, #255	; 0xff
 8000aac:	d065      	beq.n	8000b7a <__aeabi_fsub+0x19a>
 8000aae:	2201      	movs	r2, #1
 8000ab0:	499a      	ldr	r1, [pc, #616]	; (8000d1c <__aeabi_fsub+0x33c>)
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	085b      	lsrs	r3, r3, #1
 8000ab6:	400b      	ands	r3, r1
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	e7cb      	b.n	8000a54 <__aeabi_fsub+0x74>
 8000abc:	2800      	cmp	r0, #0
 8000abe:	d01f      	beq.n	8000b00 <__aeabi_fsub+0x120>
 8000ac0:	428c      	cmp	r4, r1
 8000ac2:	d022      	beq.n	8000b0a <__aeabi_fsub+0x12a>
 8000ac4:	002a      	movs	r2, r5
 8000ac6:	3aff      	subs	r2, #255	; 0xff
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	d035      	beq.n	8000b38 <__aeabi_fsub+0x158>
 8000acc:	1b7a      	subs	r2, r7, r5
 8000ace:	2d00      	cmp	r5, #0
 8000ad0:	d000      	beq.n	8000ad4 <__aeabi_fsub+0xf4>
 8000ad2:	e099      	b.n	8000c08 <__aeabi_fsub+0x228>
 8000ad4:	4663      	mov	r3, ip
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fsub+0xfc>
 8000ada:	e0dd      	b.n	8000c98 <__aeabi_fsub+0x2b8>
 8000adc:	1e53      	subs	r3, r2, #1
 8000ade:	2a01      	cmp	r2, #1
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_fsub+0x104>
 8000ae2:	e105      	b.n	8000cf0 <__aeabi_fsub+0x310>
 8000ae4:	2aff      	cmp	r2, #255	; 0xff
 8000ae6:	d06b      	beq.n	8000bc0 <__aeabi_fsub+0x1e0>
 8000ae8:	001a      	movs	r2, r3
 8000aea:	e094      	b.n	8000c16 <__aeabi_fsub+0x236>
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d073      	beq.n	8000bd8 <__aeabi_fsub+0x1f8>
 8000af0:	1e51      	subs	r1, r2, #1
 8000af2:	2a01      	cmp	r2, #1
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fsub+0x118>
 8000af6:	e0df      	b.n	8000cb8 <__aeabi_fsub+0x2d8>
 8000af8:	2aff      	cmp	r2, #255	; 0xff
 8000afa:	d063      	beq.n	8000bc4 <__aeabi_fsub+0x1e4>
 8000afc:	000a      	movs	r2, r1
 8000afe:	e792      	b.n	8000a26 <__aeabi_fsub+0x46>
 8000b00:	2201      	movs	r2, #1
 8000b02:	4051      	eors	r1, r2
 8000b04:	42a1      	cmp	r1, r4
 8000b06:	d000      	beq.n	8000b0a <__aeabi_fsub+0x12a>
 8000b08:	e782      	b.n	8000a10 <__aeabi_fsub+0x30>
 8000b0a:	002a      	movs	r2, r5
 8000b0c:	3aff      	subs	r2, #255	; 0xff
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d036      	beq.n	8000b80 <__aeabi_fsub+0x1a0>
 8000b12:	1b7a      	subs	r2, r7, r5
 8000b14:	2d00      	cmp	r5, #0
 8000b16:	d100      	bne.n	8000b1a <__aeabi_fsub+0x13a>
 8000b18:	e0aa      	b.n	8000c70 <__aeabi_fsub+0x290>
 8000b1a:	2fff      	cmp	r7, #255	; 0xff
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x140>
 8000b1e:	e0da      	b.n	8000cd6 <__aeabi_fsub+0x2f6>
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	4661      	mov	r1, ip
 8000b24:	04db      	lsls	r3, r3, #19
 8000b26:	4319      	orrs	r1, r3
 8000b28:	468c      	mov	ip, r1
 8000b2a:	2a1b      	cmp	r2, #27
 8000b2c:	dc00      	bgt.n	8000b30 <__aeabi_fsub+0x150>
 8000b2e:	e0d4      	b.n	8000cda <__aeabi_fsub+0x2fa>
 8000b30:	2301      	movs	r3, #1
 8000b32:	003d      	movs	r5, r7
 8000b34:	181b      	adds	r3, r3, r0
 8000b36:	e7b5      	b.n	8000aa4 <__aeabi_fsub+0xc4>
 8000b38:	27fe      	movs	r7, #254	; 0xfe
 8000b3a:	1c6a      	adds	r2, r5, #1
 8000b3c:	4217      	tst	r7, r2
 8000b3e:	d171      	bne.n	8000c24 <__aeabi_fsub+0x244>
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d000      	beq.n	8000b46 <__aeabi_fsub+0x166>
 8000b44:	e09e      	b.n	8000c84 <__aeabi_fsub+0x2a4>
 8000b46:	4663      	mov	r3, ip
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_fsub+0x16e>
 8000b4c:	e0d5      	b.n	8000cfa <__aeabi_fsub+0x31a>
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_fsub+0x176>
 8000b54:	e78f      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000b56:	1a1b      	subs	r3, r3, r0
 8000b58:	015e      	lsls	r6, r3, #5
 8000b5a:	d400      	bmi.n	8000b5e <__aeabi_fsub+0x17e>
 8000b5c:	e0d6      	b.n	8000d0c <__aeabi_fsub+0x32c>
 8000b5e:	4663      	mov	r3, ip
 8000b60:	000c      	movs	r4, r1
 8000b62:	1ac3      	subs	r3, r0, r3
 8000b64:	e776      	b.n	8000a54 <__aeabi_fsub+0x74>
 8000b66:	2800      	cmp	r0, #0
 8000b68:	d036      	beq.n	8000bd8 <__aeabi_fsub+0x1f8>
 8000b6a:	1e51      	subs	r1, r2, #1
 8000b6c:	2a01      	cmp	r2, #1
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_fsub+0x192>
 8000b70:	e09a      	b.n	8000ca8 <__aeabi_fsub+0x2c8>
 8000b72:	2aff      	cmp	r2, #255	; 0xff
 8000b74:	d026      	beq.n	8000bc4 <__aeabi_fsub+0x1e4>
 8000b76:	000a      	movs	r2, r1
 8000b78:	e78f      	b.n	8000a9a <__aeabi_fsub+0xba>
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	e77a      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000b80:	27fe      	movs	r7, #254	; 0xfe
 8000b82:	1c6a      	adds	r2, r5, #1
 8000b84:	4217      	tst	r7, r2
 8000b86:	d062      	beq.n	8000c4e <__aeabi_fsub+0x26e>
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d0f6      	beq.n	8000b7a <__aeabi_fsub+0x19a>
 8000b8c:	0015      	movs	r5, r2
 8000b8e:	4460      	add	r0, ip
 8000b90:	0843      	lsrs	r3, r0, #1
 8000b92:	075a      	lsls	r2, r3, #29
 8000b94:	d000      	beq.n	8000b98 <__aeabi_fsub+0x1b8>
 8000b96:	e75f      	b.n	8000a58 <__aeabi_fsub+0x78>
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	2dff      	cmp	r5, #255	; 0xff
 8000b9c:	d012      	beq.n	8000bc4 <__aeabi_fsub+0x1e4>
 8000b9e:	025b      	lsls	r3, r3, #9
 8000ba0:	0a5e      	lsrs	r6, r3, #9
 8000ba2:	b2ea      	uxtb	r2, r5
 8000ba4:	e767      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000ba6:	4662      	mov	r2, ip
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x1ce>
 8000bac:	e093      	b.n	8000cd6 <__aeabi_fsub+0x2f6>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	d008      	beq.n	8000bc4 <__aeabi_fsub+0x1e4>
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	03d2      	lsls	r2, r2, #15
 8000bb6:	4213      	tst	r3, r2
 8000bb8:	d004      	beq.n	8000bc4 <__aeabi_fsub+0x1e4>
 8000bba:	4640      	mov	r0, r8
 8000bbc:	4210      	tst	r0, r2
 8000bbe:	d101      	bne.n	8000bc4 <__aeabi_fsub+0x1e4>
 8000bc0:	000c      	movs	r4, r1
 8000bc2:	4643      	mov	r3, r8
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0d8      	beq.n	8000b7a <__aeabi_fsub+0x19a>
 8000bc8:	2680      	movs	r6, #128	; 0x80
 8000bca:	03f6      	lsls	r6, r6, #15
 8000bcc:	431e      	orrs	r6, r3
 8000bce:	0276      	lsls	r6, r6, #9
 8000bd0:	22ff      	movs	r2, #255	; 0xff
 8000bd2:	0a76      	lsrs	r6, r6, #9
 8000bd4:	e74f      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	0015      	movs	r5, r2
 8000bda:	e7de      	b.n	8000b9a <__aeabi_fsub+0x1ba>
 8000bdc:	2220      	movs	r2, #32
 8000bde:	1b40      	subs	r0, r0, r5
 8000be0:	3001      	adds	r0, #1
 8000be2:	1a12      	subs	r2, r2, r0
 8000be4:	0019      	movs	r1, r3
 8000be6:	4093      	lsls	r3, r2
 8000be8:	40c1      	lsrs	r1, r0
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	4193      	sbcs	r3, r2
 8000bee:	2500      	movs	r5, #0
 8000bf0:	430b      	orrs	r3, r1
 8000bf2:	e72f      	b.n	8000a54 <__aeabi_fsub+0x74>
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	1a9b      	subs	r3, r3, r2
 8000bf8:	0001      	movs	r1, r0
 8000bfa:	4098      	lsls	r0, r3
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	40d1      	lsrs	r1, r2
 8000c00:	1e5a      	subs	r2, r3, #1
 8000c02:	4193      	sbcs	r3, r2
 8000c04:	430b      	orrs	r3, r1
 8000c06:	e712      	b.n	8000a2e <__aeabi_fsub+0x4e>
 8000c08:	2fff      	cmp	r7, #255	; 0xff
 8000c0a:	d0d9      	beq.n	8000bc0 <__aeabi_fsub+0x1e0>
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	4664      	mov	r4, ip
 8000c10:	04db      	lsls	r3, r3, #19
 8000c12:	431c      	orrs	r4, r3
 8000c14:	46a4      	mov	ip, r4
 8000c16:	2a1b      	cmp	r2, #27
 8000c18:	dd52      	ble.n	8000cc0 <__aeabi_fsub+0x2e0>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	000c      	movs	r4, r1
 8000c1e:	003d      	movs	r5, r7
 8000c20:	1ac3      	subs	r3, r0, r3
 8000c22:	e706      	b.n	8000a32 <__aeabi_fsub+0x52>
 8000c24:	4663      	mov	r3, ip
 8000c26:	1a1e      	subs	r6, r3, r0
 8000c28:	0173      	lsls	r3, r6, #5
 8000c2a:	d439      	bmi.n	8000ca0 <__aeabi_fsub+0x2c0>
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_fsub+0x252>
 8000c30:	e704      	b.n	8000a3c <__aeabi_fsub+0x5c>
 8000c32:	2400      	movs	r4, #0
 8000c34:	2200      	movs	r2, #0
 8000c36:	2600      	movs	r6, #0
 8000c38:	e71d      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000c3a:	2320      	movs	r3, #32
 8000c3c:	1a9b      	subs	r3, r3, r2
 8000c3e:	0001      	movs	r1, r0
 8000c40:	4098      	lsls	r0, r3
 8000c42:	0003      	movs	r3, r0
 8000c44:	40d1      	lsrs	r1, r2
 8000c46:	1e5a      	subs	r2, r3, #1
 8000c48:	4193      	sbcs	r3, r2
 8000c4a:	430b      	orrs	r3, r1
 8000c4c:	e729      	b.n	8000aa2 <__aeabi_fsub+0xc2>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d1a9      	bne.n	8000ba6 <__aeabi_fsub+0x1c6>
 8000c52:	4663      	mov	r3, ip
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d056      	beq.n	8000d06 <__aeabi_fsub+0x326>
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_fsub+0x280>
 8000c5e:	e70a      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000c60:	0003      	movs	r3, r0
 8000c62:	4463      	add	r3, ip
 8000c64:	015a      	lsls	r2, r3, #5
 8000c66:	d594      	bpl.n	8000b92 <__aeabi_fsub+0x1b2>
 8000c68:	4a2b      	ldr	r2, [pc, #172]	; (8000d18 <__aeabi_fsub+0x338>)
 8000c6a:	3501      	adds	r5, #1
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	e790      	b.n	8000b92 <__aeabi_fsub+0x1b2>
 8000c70:	4663      	mov	r3, ip
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0af      	beq.n	8000bd6 <__aeabi_fsub+0x1f6>
 8000c76:	1e53      	subs	r3, r2, #1
 8000c78:	2a01      	cmp	r2, #1
 8000c7a:	d015      	beq.n	8000ca8 <__aeabi_fsub+0x2c8>
 8000c7c:	2aff      	cmp	r2, #255	; 0xff
 8000c7e:	d02a      	beq.n	8000cd6 <__aeabi_fsub+0x2f6>
 8000c80:	001a      	movs	r2, r3
 8000c82:	e752      	b.n	8000b2a <__aeabi_fsub+0x14a>
 8000c84:	4662      	mov	r2, ip
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d191      	bne.n	8000bae <__aeabi_fsub+0x1ce>
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	d198      	bne.n	8000bc0 <__aeabi_fsub+0x1e0>
 8000c8e:	2680      	movs	r6, #128	; 0x80
 8000c90:	2400      	movs	r4, #0
 8000c92:	22ff      	movs	r2, #255	; 0xff
 8000c94:	03f6      	lsls	r6, r6, #15
 8000c96:	e6ee      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000c98:	000c      	movs	r4, r1
 8000c9a:	4643      	mov	r3, r8
 8000c9c:	0015      	movs	r5, r2
 8000c9e:	e77c      	b.n	8000b9a <__aeabi_fsub+0x1ba>
 8000ca0:	4663      	mov	r3, ip
 8000ca2:	000c      	movs	r4, r1
 8000ca4:	1ac6      	subs	r6, r0, r3
 8000ca6:	e6c9      	b.n	8000a3c <__aeabi_fsub+0x5c>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	4463      	add	r3, ip
 8000cac:	2501      	movs	r5, #1
 8000cae:	015a      	lsls	r2, r3, #5
 8000cb0:	d400      	bmi.n	8000cb4 <__aeabi_fsub+0x2d4>
 8000cb2:	e76e      	b.n	8000b92 <__aeabi_fsub+0x1b2>
 8000cb4:	2502      	movs	r5, #2
 8000cb6:	e6fa      	b.n	8000aae <__aeabi_fsub+0xce>
 8000cb8:	4663      	mov	r3, ip
 8000cba:	2501      	movs	r5, #1
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	e6b8      	b.n	8000a32 <__aeabi_fsub+0x52>
 8000cc0:	4664      	mov	r4, ip
 8000cc2:	2320      	movs	r3, #32
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	1a9b      	subs	r3, r3, r2
 8000cc8:	4662      	mov	r2, ip
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	1e5a      	subs	r2, r3, #1
 8000cd0:	4193      	sbcs	r3, r2
 8000cd2:	4323      	orrs	r3, r4
 8000cd4:	e7a2      	b.n	8000c1c <__aeabi_fsub+0x23c>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	e774      	b.n	8000bc4 <__aeabi_fsub+0x1e4>
 8000cda:	4661      	mov	r1, ip
 8000cdc:	2320      	movs	r3, #32
 8000cde:	40d1      	lsrs	r1, r2
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	4662      	mov	r2, ip
 8000ce4:	409a      	lsls	r2, r3
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	1e5a      	subs	r2, r3, #1
 8000cea:	4193      	sbcs	r3, r2
 8000cec:	430b      	orrs	r3, r1
 8000cee:	e720      	b.n	8000b32 <__aeabi_fsub+0x152>
 8000cf0:	4663      	mov	r3, ip
 8000cf2:	000c      	movs	r4, r1
 8000cf4:	2501      	movs	r5, #1
 8000cf6:	1ac3      	subs	r3, r0, r3
 8000cf8:	e69b      	b.n	8000a32 <__aeabi_fsub+0x52>
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d099      	beq.n	8000c32 <__aeabi_fsub+0x252>
 8000cfe:	000c      	movs	r4, r1
 8000d00:	4646      	mov	r6, r8
 8000d02:	2200      	movs	r2, #0
 8000d04:	e6b7      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000d06:	4646      	mov	r6, r8
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e6b4      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_fsub+0x332>
 8000d10:	e73f      	b.n	8000b92 <__aeabi_fsub+0x1b2>
 8000d12:	2400      	movs	r4, #0
 8000d14:	2600      	movs	r6, #0
 8000d16:	e6ae      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000d18:	fbffffff 	.word	0xfbffffff
 8000d1c:	7dffffff 	.word	0x7dffffff

08000d20 <__aeabi_f2iz>:
 8000d20:	0241      	lsls	r1, r0, #9
 8000d22:	0042      	lsls	r2, r0, #1
 8000d24:	0fc3      	lsrs	r3, r0, #31
 8000d26:	0a49      	lsrs	r1, r1, #9
 8000d28:	2000      	movs	r0, #0
 8000d2a:	0e12      	lsrs	r2, r2, #24
 8000d2c:	2a7e      	cmp	r2, #126	; 0x7e
 8000d2e:	dd03      	ble.n	8000d38 <__aeabi_f2iz+0x18>
 8000d30:	2a9d      	cmp	r2, #157	; 0x9d
 8000d32:	dd02      	ble.n	8000d3a <__aeabi_f2iz+0x1a>
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <__aeabi_f2iz+0x3c>)
 8000d36:	1898      	adds	r0, r3, r2
 8000d38:	4770      	bx	lr
 8000d3a:	2080      	movs	r0, #128	; 0x80
 8000d3c:	0400      	lsls	r0, r0, #16
 8000d3e:	4301      	orrs	r1, r0
 8000d40:	2a95      	cmp	r2, #149	; 0x95
 8000d42:	dc07      	bgt.n	8000d54 <__aeabi_f2iz+0x34>
 8000d44:	2096      	movs	r0, #150	; 0x96
 8000d46:	1a82      	subs	r2, r0, r2
 8000d48:	40d1      	lsrs	r1, r2
 8000d4a:	4248      	negs	r0, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f3      	bne.n	8000d38 <__aeabi_f2iz+0x18>
 8000d50:	0008      	movs	r0, r1
 8000d52:	e7f1      	b.n	8000d38 <__aeabi_f2iz+0x18>
 8000d54:	3a96      	subs	r2, #150	; 0x96
 8000d56:	4091      	lsls	r1, r2
 8000d58:	e7f7      	b.n	8000d4a <__aeabi_f2iz+0x2a>
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	7fffffff 	.word	0x7fffffff

08000d60 <__aeabi_i2f>:
 8000d60:	b570      	push	{r4, r5, r6, lr}
 8000d62:	2800      	cmp	r0, #0
 8000d64:	d013      	beq.n	8000d8e <__aeabi_i2f+0x2e>
 8000d66:	17c3      	asrs	r3, r0, #31
 8000d68:	18c5      	adds	r5, r0, r3
 8000d6a:	405d      	eors	r5, r3
 8000d6c:	0fc4      	lsrs	r4, r0, #31
 8000d6e:	0028      	movs	r0, r5
 8000d70:	f000 f848 	bl	8000e04 <__clzsi2>
 8000d74:	239e      	movs	r3, #158	; 0x9e
 8000d76:	0001      	movs	r1, r0
 8000d78:	1a1b      	subs	r3, r3, r0
 8000d7a:	2b96      	cmp	r3, #150	; 0x96
 8000d7c:	dc0f      	bgt.n	8000d9e <__aeabi_i2f+0x3e>
 8000d7e:	2808      	cmp	r0, #8
 8000d80:	d031      	beq.n	8000de6 <__aeabi_i2f+0x86>
 8000d82:	3908      	subs	r1, #8
 8000d84:	408d      	lsls	r5, r1
 8000d86:	026d      	lsls	r5, r5, #9
 8000d88:	0a6d      	lsrs	r5, r5, #9
 8000d8a:	b2d8      	uxtb	r0, r3
 8000d8c:	e002      	b.n	8000d94 <__aeabi_i2f+0x34>
 8000d8e:	2400      	movs	r4, #0
 8000d90:	2000      	movs	r0, #0
 8000d92:	2500      	movs	r5, #0
 8000d94:	05c0      	lsls	r0, r0, #23
 8000d96:	4328      	orrs	r0, r5
 8000d98:	07e4      	lsls	r4, r4, #31
 8000d9a:	4320      	orrs	r0, r4
 8000d9c:	bd70      	pop	{r4, r5, r6, pc}
 8000d9e:	2b99      	cmp	r3, #153	; 0x99
 8000da0:	dd0c      	ble.n	8000dbc <__aeabi_i2f+0x5c>
 8000da2:	2205      	movs	r2, #5
 8000da4:	1a12      	subs	r2, r2, r0
 8000da6:	0028      	movs	r0, r5
 8000da8:	40d0      	lsrs	r0, r2
 8000daa:	0002      	movs	r2, r0
 8000dac:	0008      	movs	r0, r1
 8000dae:	301b      	adds	r0, #27
 8000db0:	4085      	lsls	r5, r0
 8000db2:	0028      	movs	r0, r5
 8000db4:	1e45      	subs	r5, r0, #1
 8000db6:	41a8      	sbcs	r0, r5
 8000db8:	4302      	orrs	r2, r0
 8000dba:	0015      	movs	r5, r2
 8000dbc:	2905      	cmp	r1, #5
 8000dbe:	dc16      	bgt.n	8000dee <__aeabi_i2f+0x8e>
 8000dc0:	002a      	movs	r2, r5
 8000dc2:	480f      	ldr	r0, [pc, #60]	; (8000e00 <__aeabi_i2f+0xa0>)
 8000dc4:	4002      	ands	r2, r0
 8000dc6:	076e      	lsls	r6, r5, #29
 8000dc8:	d009      	beq.n	8000dde <__aeabi_i2f+0x7e>
 8000dca:	260f      	movs	r6, #15
 8000dcc:	4035      	ands	r5, r6
 8000dce:	2d04      	cmp	r5, #4
 8000dd0:	d005      	beq.n	8000dde <__aeabi_i2f+0x7e>
 8000dd2:	3204      	adds	r2, #4
 8000dd4:	0155      	lsls	r5, r2, #5
 8000dd6:	d502      	bpl.n	8000dde <__aeabi_i2f+0x7e>
 8000dd8:	239f      	movs	r3, #159	; 0x9f
 8000dda:	4002      	ands	r2, r0
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	0192      	lsls	r2, r2, #6
 8000de0:	0a55      	lsrs	r5, r2, #9
 8000de2:	b2d8      	uxtb	r0, r3
 8000de4:	e7d6      	b.n	8000d94 <__aeabi_i2f+0x34>
 8000de6:	026d      	lsls	r5, r5, #9
 8000de8:	2096      	movs	r0, #150	; 0x96
 8000dea:	0a6d      	lsrs	r5, r5, #9
 8000dec:	e7d2      	b.n	8000d94 <__aeabi_i2f+0x34>
 8000dee:	1f4a      	subs	r2, r1, #5
 8000df0:	4095      	lsls	r5, r2
 8000df2:	002a      	movs	r2, r5
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <__aeabi_i2f+0xa0>)
 8000df6:	4002      	ands	r2, r0
 8000df8:	076e      	lsls	r6, r5, #29
 8000dfa:	d0f0      	beq.n	8000dde <__aeabi_i2f+0x7e>
 8000dfc:	e7e5      	b.n	8000dca <__aeabi_i2f+0x6a>
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	fbffffff 	.word	0xfbffffff

08000e04 <__clzsi2>:
 8000e04:	211c      	movs	r1, #28
 8000e06:	2301      	movs	r3, #1
 8000e08:	041b      	lsls	r3, r3, #16
 8000e0a:	4298      	cmp	r0, r3
 8000e0c:	d301      	bcc.n	8000e12 <__clzsi2+0xe>
 8000e0e:	0c00      	lsrs	r0, r0, #16
 8000e10:	3910      	subs	r1, #16
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	4298      	cmp	r0, r3
 8000e16:	d301      	bcc.n	8000e1c <__clzsi2+0x18>
 8000e18:	0a00      	lsrs	r0, r0, #8
 8000e1a:	3908      	subs	r1, #8
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d301      	bcc.n	8000e26 <__clzsi2+0x22>
 8000e22:	0900      	lsrs	r0, r0, #4
 8000e24:	3904      	subs	r1, #4
 8000e26:	a202      	add	r2, pc, #8	; (adr r2, 8000e30 <__clzsi2+0x2c>)
 8000e28:	5c10      	ldrb	r0, [r2, r0]
 8000e2a:	1840      	adds	r0, r0, r1
 8000e2c:	4770      	bx	lr
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	02020304 	.word	0x02020304
 8000e34:	01010101 	.word	0x01010101
	...

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b510      	push	{r4, lr}
 8000e42:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e44:	222c      	movs	r2, #44	; 0x2c
 8000e46:	2100      	movs	r1, #0
 8000e48:	a809      	add	r0, sp, #36	; 0x24
 8000e4a:	f001 faab 	bl	80023a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4e:	2210      	movs	r2, #16
 8000e50:	2100      	movs	r1, #0
 8000e52:	4668      	mov	r0, sp
 8000e54:	f001 faa6 	bl	80023a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	2210      	movs	r2, #16
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	a804      	add	r0, sp, #16
 8000e5e:	f001 faa1 	bl	80023a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e62:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e66:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	330e      	adds	r3, #14
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6c:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e70:	f000 fb32 	bl	80014d8 <HAL_RCC_OscConfig>
 8000e74:	2800      	cmp	r0, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	2300      	movs	r3, #0
 8000e80:	9200      	str	r2, [sp, #0]
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	9202      	str	r2, [sp, #8]
 8000e8e:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e90:	f000 fd7c 	bl	800198c <HAL_RCC_ClockConfig>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x5c>
 8000e98:	b672      	cpsid	i
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <SystemClock_Config+0x5a>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e9c:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9e:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ea0:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea2:	f000 fe5d 	bl	8001b60 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x6e>
 8000eaa:	b672      	cpsid	i
  while (1)
 8000eac:	e7fe      	b.n	8000eac <SystemClock_Config+0x6c>
}
 8000eae:	b014      	add	sp, #80	; 0x50
 8000eb0:	bd10      	pop	{r4, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)

08000eb4 <main>:
{
 8000eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb6:	46de      	mov	lr, fp
 8000eb8:	4657      	mov	r7, sl
 8000eba:	464e      	mov	r6, r9
 8000ebc:	4645      	mov	r5, r8
 8000ebe:	b5e0      	push	{r5, r6, r7, lr}
 8000ec0:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000ec2:	f000 f97d 	bl	80011c0 <HAL_Init>
  SystemClock_Config();
 8000ec6:	f7ff ffbb 	bl	8000e40 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	4b62      	ldr	r3, [pc, #392]	; (8001058 <main+0x1a4>)
 8000ece:	0289      	lsls	r1, r1, #10
 8000ed0:	695a      	ldr	r2, [r3, #20]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	615a      	str	r2, [r3, #20]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	400b      	ands	r3, r1
 8000eda:	9304      	str	r3, [sp, #16]
 8000edc:	9b04      	ldr	r3, [sp, #16]
  huart1.Instance = USART1;
 8000ede:	4b5f      	ldr	r3, [pc, #380]	; (800105c <main+0x1a8>)
 8000ee0:	469a      	mov	sl, r3
 8000ee2:	4652      	mov	r2, sl
 8000ee4:	4b5e      	ldr	r3, [pc, #376]	; (8001060 <main+0x1ac>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee6:	4651      	mov	r1, sl
  huart1.Instance = USART1;
 8000ee8:	6013      	str	r3, [r2, #0]
  huart1.Init.BaudRate = 9600;
 8000eea:	2396      	movs	r3, #150	; 0x96
 8000eec:	019b      	lsls	r3, r3, #6
 8000eee:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	6093      	str	r3, [r2, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	60d3      	str	r3, [r2, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ef6:	6113      	str	r3, [r2, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000efa:	4650      	mov	r0, sl
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000efc:	614a      	str	r2, [r1, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	618b      	str	r3, [r1, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	61cb      	str	r3, [r1, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f02:	620b      	str	r3, [r1, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f04:	624b      	str	r3, [r1, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f06:	f001 f991 	bl	800222c <HAL_UART_Init>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d001      	beq.n	8000f12 <main+0x5e>
 8000f0e:	b672      	cpsid	i
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <main+0x5c>
  uint8_t next_line[2] = "\n"; // next line
 8000f12:	ab03      	add	r3, sp, #12
 8000f14:	4698      	mov	r8, r3
 8000f16:	230a      	movs	r3, #10
 8000f18:	4642      	mov	r2, r8
 8000f1a:	8013      	strh	r3, [r2, #0]
  float Fvalue = 245.54821;     // Init float value
 8000f1c:	4b51      	ldr	r3, [pc, #324]	; (8001064 <main+0x1b0>)
 8000f1e:	9301      	str	r3, [sp, #4]
	  Fvalue++;
 8000f20:	21fe      	movs	r1, #254	; 0xfe
 8000f22:	9801      	ldr	r0, [sp, #4]
 8000f24:	0589      	lsls	r1, r1, #22
 8000f26:	f7ff fa6d 	bl	8000404 <__aeabi_fadd>
 8000f2a:	1c04      	adds	r4, r0, #0
 8000f2c:	9001      	str	r0, [sp, #4]

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
    // Extract integer part
    int ipart = (int)n;
 8000f2e:	f7ff fef7 	bl	8000d20 <__aeabi_f2iz>
 8000f32:	0005      	movs	r5, r0

    // Extract floating part
    float fpart = n - (float)ipart;
 8000f34:	f7ff ff14 	bl	8000d60 <__aeabi_i2f>
 8000f38:	1c01      	adds	r1, r0, #0
 8000f3a:	1c20      	adds	r0, r4, #0
 8000f3c:	f7ff fd50 	bl	80009e0 <__aeabi_fsub>
 8000f40:	4681      	mov	r9, r0
    while (x) {
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	d100      	bne.n	8000f48 <main+0x94>
 8000f46:	e083      	b.n	8001050 <main+0x19c>
    int i = 0;
 8000f48:	2700      	movs	r7, #0
        str[i++] = (x % 10) + '0';
 8000f4a:	aa02      	add	r2, sp, #8
 8000f4c:	4694      	mov	ip, r2
 8000f4e:	230b      	movs	r3, #11
 8000f50:	0028      	movs	r0, r5
 8000f52:	4463      	add	r3, ip
 8000f54:	003e      	movs	r6, r7
 8000f56:	210a      	movs	r1, #10
 8000f58:	3701      	adds	r7, #1
 8000f5a:	19dc      	adds	r4, r3, r7
 8000f5c:	f7ff fa4c 	bl	80003f8 <__aeabi_idivmod>
 8000f60:	3130      	adds	r1, #48	; 0x30
        x = x / 10;
 8000f62:	0028      	movs	r0, r5
        str[i++] = (x % 10) + '0';
 8000f64:	7021      	strb	r1, [r4, #0]
        x = x / 10;
 8000f66:	210a      	movs	r1, #10
 8000f68:	f7ff f960 	bl	800022c <__divsi3>
 8000f6c:	1e05      	subs	r5, r0, #0
    while (x) {
 8000f6e:	d1ec      	bne.n	8000f4a <main+0x96>
    while (i < j) {
 8000f70:	a905      	add	r1, sp, #20
 8000f72:	0033      	movs	r3, r6
 8000f74:	198a      	adds	r2, r1, r6
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d061      	beq.n	800103e <main+0x18a>
        temp = str[i];
 8000f7a:	7808      	ldrb	r0, [r1, #0]
        str[i] = str[j];
 8000f7c:	7815      	ldrb	r5, [r2, #0]
        j--;
 8000f7e:	3b01      	subs	r3, #1
        str[i] = str[j];
 8000f80:	700d      	strb	r5, [r1, #0]
    while (i < j) {
 8000f82:	3a01      	subs	r2, #1
        str[j] = temp;
 8000f84:	7050      	strb	r0, [r2, #1]
    while (i < j) {
 8000f86:	3101      	adds	r1, #1
 8000f88:	1af0      	subs	r0, r6, r3
 8000f8a:	4283      	cmp	r3, r0
 8000f8c:	dcf5      	bgt.n	8000f7a <main+0xc6>
    str[i] = '\0';
 8000f8e:	ab05      	add	r3, sp, #20
        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);

        intToStr((int)fpart, res + i + 1, afterpoint);
 8000f90:	3602      	adds	r6, #2
    str[i] = '\0';
 8000f92:	19db      	adds	r3, r3, r7
        res[i] = '.'; // add dot
 8000f94:	222e      	movs	r2, #46	; 0x2e
        intToStr((int)fpart, res + i + 1, afterpoint);
 8000f96:	4934      	ldr	r1, [pc, #208]	; (8001068 <main+0x1b4>)
        res[i] = '.'; // add dot
 8000f98:	701a      	strb	r2, [r3, #0]
        intToStr((int)fpart, res + i + 1, afterpoint);
 8000f9a:	4648      	mov	r0, r9
 8000f9c:	f7ff fbd2 	bl	8000744 <__aeabi_fmul>
 8000fa0:	f7ff febe 	bl	8000d20 <__aeabi_f2iz>
 8000fa4:	ab05      	add	r3, sp, #20
 8000fa6:	469c      	mov	ip, r3
 8000fa8:	0004      	movs	r4, r0
 8000faa:	4466      	add	r6, ip
    while (x) {
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d049      	beq.n	8001044 <main+0x190>
 8000fb0:	1e73      	subs	r3, r6, #1
    int i = 0;
 8000fb2:	2700      	movs	r7, #0
 8000fb4:	469b      	mov	fp, r3
        str[i++] = (x % 10) + '0';
 8000fb6:	0020      	movs	r0, r4
 8000fb8:	210a      	movs	r1, #10
 8000fba:	f7ff fa1d 	bl	80003f8 <__aeabi_idivmod>
 8000fbe:	465b      	mov	r3, fp
 8000fc0:	3130      	adds	r1, #48	; 0x30
 8000fc2:	003d      	movs	r5, r7
 8000fc4:	3701      	adds	r7, #1
        x = x / 10;
 8000fc6:	0020      	movs	r0, r4
        str[i++] = (x % 10) + '0';
 8000fc8:	55d9      	strb	r1, [r3, r7]
        x = x / 10;
 8000fca:	210a      	movs	r1, #10
 8000fcc:	f7ff f92e 	bl	800022c <__divsi3>
 8000fd0:	1e04      	subs	r4, r0, #0
    while (x) {
 8000fd2:	d1f0      	bne.n	8000fb6 <main+0x102>
    while (i < d)
 8000fd4:	2f01      	cmp	r7, #1
 8000fd6:	d121      	bne.n	800101c <main+0x168>
        str[i++] = '0';
 8000fd8:	2330      	movs	r3, #48	; 0x30
 8000fda:	7073      	strb	r3, [r6, #1]
        str[j] = temp;
 8000fdc:	2702      	movs	r7, #2
        temp = str[i];
 8000fde:	7833      	ldrb	r3, [r6, #0]
        str[i] = str[j];
 8000fe0:	7872      	ldrb	r2, [r6, #1]
        str[j] = temp;
 8000fe2:	7073      	strb	r3, [r6, #1]
        str[i] = str[j];
 8000fe4:	7032      	strb	r2, [r6, #0]
    str[i] = '\0';
 8000fe6:	2300      	movs	r3, #0
	  HAL_UART_Transmit(&huart1, float_buff ,strlen(float_buff), 1000);
 8000fe8:	a805      	add	r0, sp, #20
 8000fea:	55f3      	strb	r3, [r6, r7]
 8000fec:	f7ff f88c 	bl	8000108 <strlen>
 8000ff0:	23fa      	movs	r3, #250	; 0xfa
 8000ff2:	b282      	uxth	r2, r0
 8000ff4:	a905      	add	r1, sp, #20
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4650      	mov	r0, sl
 8000ffa:	f000 fe4f 	bl	8001c9c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, next_line,strlen(next_line), 1000);
 8000ffe:	4640      	mov	r0, r8
 8001000:	f7ff f882 	bl	8000108 <strlen>
 8001004:	23fa      	movs	r3, #250	; 0xfa
 8001006:	b282      	uxth	r2, r0
 8001008:	4641      	mov	r1, r8
 800100a:	4650      	mov	r0, sl
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	f000 fe45 	bl	8001c9c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001012:	20fa      	movs	r0, #250	; 0xfa
 8001014:	0080      	lsls	r0, r0, #2
 8001016:	f000 f8f5 	bl	8001204 <HAL_Delay>
  while (1)
 800101a:	e781      	b.n	8000f20 <main+0x6c>
        temp = str[i];
 800101c:	5d33      	ldrb	r3, [r6, r4]
        str[i] = str[j];
 800101e:	5d72      	ldrb	r2, [r6, r5]
 8001020:	5532      	strb	r2, [r6, r4]
        str[j] = temp;
 8001022:	5573      	strb	r3, [r6, r5]
        i++;
 8001024:	3401      	adds	r4, #1
        j--;
 8001026:	3d01      	subs	r5, #1
    while (i < j) {
 8001028:	42ac      	cmp	r4, r5
 800102a:	dadc      	bge.n	8000fe6 <main+0x132>
        temp = str[i];
 800102c:	5d33      	ldrb	r3, [r6, r4]
        str[i] = str[j];
 800102e:	5d72      	ldrb	r2, [r6, r5]
 8001030:	5532      	strb	r2, [r6, r4]
        str[j] = temp;
 8001032:	5573      	strb	r3, [r6, r5]
        i++;
 8001034:	3401      	adds	r4, #1
        j--;
 8001036:	3d01      	subs	r5, #1
    while (i < j) {
 8001038:	42ac      	cmp	r4, r5
 800103a:	dbef      	blt.n	800101c <main+0x168>
 800103c:	e7d3      	b.n	8000fe6 <main+0x132>
        intToStr((int)fpart, res + i + 1, afterpoint);
 800103e:	3602      	adds	r6, #2
    str[i] = '\0';
 8001040:	19cb      	adds	r3, r1, r7
 8001042:	e7a7      	b.n	8000f94 <main+0xe0>
        str[i++] = '0';
 8001044:	2202      	movs	r2, #2
 8001046:	2130      	movs	r1, #48	; 0x30
 8001048:	0030      	movs	r0, r6
 800104a:	f001 f9ab 	bl	80023a4 <memset>
 800104e:	e7c5      	b.n	8000fdc <main+0x128>
    while (x) {
 8001050:	2601      	movs	r6, #1
 8001052:	ab05      	add	r3, sp, #20
 8001054:	e79e      	b.n	8000f94 <main+0xe0>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40021000 	.word	0x40021000
 800105c:	20000028 	.word	0x20000028
 8001060:	40013800 	.word	0x40013800
 8001064:	43758c57 	.word	0x43758c57
 8001068:	42c80000 	.word	0x42c80000

0800106c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106c:	2201      	movs	r2, #1
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_MspInit+0x2c>)
{
 8001070:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	6999      	ldr	r1, [r3, #24]
 8001074:	4311      	orrs	r1, r2
 8001076:	6199      	str	r1, [r3, #24]
 8001078:	6999      	ldr	r1, [r3, #24]
 800107a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	9200      	str	r2, [sp, #0]
 8001080:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	69da      	ldr	r2, [r3, #28]
 8001084:	0549      	lsls	r1, r1, #21
 8001086:	430a      	orrs	r2, r1
 8001088:	61da      	str	r2, [r3, #28]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	400b      	ands	r3, r1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	b002      	add	sp, #8
 8001094:	4770      	bx	lr
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800109c:	b510      	push	{r4, lr}
 800109e:	0004      	movs	r4, r0
 80010a0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	2214      	movs	r2, #20
 80010a4:	2100      	movs	r1, #0
 80010a6:	a802      	add	r0, sp, #8
 80010a8:	f001 f97c 	bl	80023a4 <memset>
  if(huart->Instance==USART1)
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_UART_MspInit+0x60>)
 80010ae:	6822      	ldr	r2, [r4, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d001      	beq.n	80010b8 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010b4:	b008      	add	sp, #32
 80010b6:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_UART_MspInit+0x64>)
 80010bc:	01c9      	lsls	r1, r1, #7
 80010be:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c2:	430a      	orrs	r2, r1
 80010c4:	619a      	str	r2, [r3, #24]
 80010c6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ca:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ce:	9200      	str	r2, [sp, #0]
 80010d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	0289      	lsls	r1, r1, #10
 80010d6:	430a      	orrs	r2, r1
 80010d8:	615a      	str	r2, [r3, #20]
 80010da:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010dc:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	400b      	ands	r3, r1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010e4:	2302      	movs	r3, #2
 80010e6:	9202      	str	r2, [sp, #8]
 80010e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ea:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010f0:	3b02      	subs	r3, #2
 80010f2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f000 f8e4 	bl	80012c0 <HAL_GPIO_Init>
}
 80010f8:	e7dc      	b.n	80010b4 <HAL_UART_MspInit+0x18>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	40013800 	.word	0x40013800
 8001100:	40021000 	.word	0x40021000

08001104 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001104:	e7fe      	b.n	8001104 <NMI_Handler>
 8001106:	46c0      	nop			; (mov r8, r8)

08001108 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <HardFault_Handler>
 800110a:	46c0      	nop			; (mov r8, r8)

0800110c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800110c:	4770      	bx	lr
 800110e:	46c0      	nop			; (mov r8, r8)

08001110 <PendSV_Handler>:
 8001110:	4770      	bx	lr
 8001112:	46c0      	nop			; (mov r8, r8)

08001114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001114:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001116:	f000 f863 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111a:	bd10      	pop	{r4, pc}

0800111c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800111c:	4770      	bx	lr
 800111e:	46c0      	nop			; (mov r8, r8)

08001120 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001122:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001124:	f7ff fffa 	bl	800111c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <LoopForever+0x6>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	; (8001160 <LoopForever+0xa>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <LoopForever+0xe>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	; (800116c <LoopForever+0x16>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800114e:	f001 f931 	bl	80023b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001152:	f7ff feaf 	bl	8000eb4 <main>

08001156 <LoopForever>:

LoopForever:
    b LoopForever
 8001156:	e7fe      	b.n	8001156 <LoopForever>
  ldr   r0, =_estack
 8001158:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001164:	08002458 	.word	0x08002458
  ldr r2, =_sbss
 8001168:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800116c:	200000b4 	.word	0x200000b4

08001170 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_IRQHandler>
	...

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	20fa      	movs	r0, #250	; 0xfa
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_InitTick+0x40>)
 800117c:	0080      	lsls	r0, r0, #2
 800117e:	7819      	ldrb	r1, [r3, #0]
 8001180:	f7fe ffca 	bl	8000118 <__udivsi3>
 8001184:	4d0c      	ldr	r5, [pc, #48]	; (80011b8 <HAL_InitTick+0x44>)
 8001186:	0001      	movs	r1, r0
 8001188:	6828      	ldr	r0, [r5, #0]
 800118a:	f7fe ffc5 	bl	8000118 <__udivsi3>
 800118e:	f000 f87d 	bl	800128c <HAL_SYSTICK_Config>
 8001192:	2800      	cmp	r0, #0
 8001194:	d10c      	bne.n	80011b0 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8001196:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001198:	2c03      	cmp	r4, #3
 800119a:	d900      	bls.n	800119e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800119c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119e:	3802      	subs	r0, #2
 80011a0:	2200      	movs	r2, #0
 80011a2:	0021      	movs	r1, r4
 80011a4:	f000 f840 	bl	8001228 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <HAL_InitTick+0x48>)
 80011aa:	2000      	movs	r0, #0
 80011ac:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80011ae:	e7f5      	b.n	800119c <HAL_InitTick+0x28>
    return HAL_ERROR;
 80011b0:	2001      	movs	r0, #1
 80011b2:	e7f3      	b.n	800119c <HAL_InitTick+0x28>
 80011b4:	20000004 	.word	0x20000004
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000008 	.word	0x20000008

080011c0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	2110      	movs	r1, #16
 80011c2:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_Init+0x1c>)
{
 80011c4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c6:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ca:	430b      	orrs	r3, r1
 80011cc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	f7ff ffd1 	bl	8001174 <HAL_InitTick>
  HAL_MspInit();
 80011d2:	f7ff ff4b 	bl	800106c <HAL_MspInit>
}
 80011d6:	2000      	movs	r0, #0
 80011d8:	bd10      	pop	{r4, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	40022000 	.word	0x40022000

080011e0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <HAL_IncTick+0x10>)
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_IncTick+0x14>)
 80011e4:	6811      	ldr	r1, [r2, #0]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	185b      	adds	r3, r3, r1
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	4770      	bx	lr
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	200000b0 	.word	0x200000b0
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011f8:	4b01      	ldr	r3, [pc, #4]	; (8001200 <HAL_GetTick+0x8>)
 80011fa:	6818      	ldr	r0, [r3, #0]
}
 80011fc:	4770      	bx	lr
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	200000b0 	.word	0x200000b0

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b570      	push	{r4, r5, r6, lr}
 8001206:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff fff6 	bl	80011f8 <HAL_GetTick>
 800120c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120e:	1c63      	adds	r3, r4, #1
 8001210:	d002      	beq.n	8001218 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <HAL_Delay+0x20>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	1b40      	subs	r0, r0, r5
 800121e:	42a0      	cmp	r0, r4
 8001220:	d3fa      	bcc.n	8001218 <HAL_Delay+0x14>
  {
  }
}
 8001222:	bd70      	pop	{r4, r5, r6, pc}
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001228:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800122a:	2800      	cmp	r0, #0
 800122c:	db14      	blt.n	8001258 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_NVIC_SetPriority+0x5c>)
 8001230:	2203      	movs	r2, #3
 8001232:	469c      	mov	ip, r3
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	0884      	lsrs	r4, r0, #2
 8001238:	4002      	ands	r2, r0
 800123a:	0018      	movs	r0, r3
 800123c:	26c0      	movs	r6, #192	; 0xc0
 800123e:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001240:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001242:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001244:	400b      	ands	r3, r1
 8001246:	4093      	lsls	r3, r2
 8001248:	00a4      	lsls	r4, r4, #2
 800124a:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124c:	00b6      	lsls	r6, r6, #2
 800124e:	59a5      	ldr	r5, [r4, r6]
 8001250:	4385      	bics	r5, r0
 8001252:	432b      	orrs	r3, r5
 8001254:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001256:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_NVIC_SetPriority+0x60>)
 800125a:	230f      	movs	r3, #15
 800125c:	4694      	mov	ip, r2
 800125e:	2203      	movs	r2, #3
 8001260:	4003      	ands	r3, r0
 8001262:	4010      	ands	r0, r2
 8001264:	32fc      	adds	r2, #252	; 0xfc
 8001266:	0015      	movs	r5, r2
 8001268:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800126a:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800126e:	400a      	ands	r2, r1
 8001270:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001272:	3b08      	subs	r3, #8
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4463      	add	r3, ip
 800127a:	69dc      	ldr	r4, [r3, #28]
 800127c:	43ac      	bics	r4, r5
 800127e:	4322      	orrs	r2, r4
 8001280:	61da      	str	r2, [r3, #28]
 8001282:	e7e8      	b.n	8001256 <HAL_NVIC_SetPriority+0x2e>
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	1e43      	subs	r3, r0, #1
 8001290:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	4293      	cmp	r3, r2
 8001296:	d20e      	bcs.n	80012b6 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001298:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a0:	6a03      	ldr	r3, [r0, #32]
 80012a2:	0609      	lsls	r1, r1, #24
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	430b      	orrs	r3, r1
 80012aa:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ae:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	3307      	adds	r3, #7
 80012b4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012b6:	4770      	bx	lr
 80012b8:	e000e010 	.word	0xe000e010
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c2:	46de      	mov	lr, fp
 80012c4:	4657      	mov	r7, sl
 80012c6:	464e      	mov	r6, r9
 80012c8:	4645      	mov	r5, r8
 80012ca:	b5e0      	push	{r5, r6, r7, lr}
 80012cc:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ce:	6809      	ldr	r1, [r1, #0]
 80012d0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80012d2:	2300      	movs	r3, #0
{
 80012d4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d6:	2900      	cmp	r1, #0
 80012d8:	d07c      	beq.n	80013d4 <HAL_GPIO_Init+0x114>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	4c79      	ldr	r4, [pc, #484]	; (80014c0 <HAL_GPIO_Init+0x200>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012dc:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	46a3      	mov	fp, r4
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e0:	2601      	movs	r6, #1
 80012e2:	000c      	movs	r4, r1
 80012e4:	409e      	lsls	r6, r3
 80012e6:	4034      	ands	r4, r6
 80012e8:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 80012ea:	4231      	tst	r1, r6
 80012ec:	d06c      	beq.n	80013c8 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012ee:	4654      	mov	r4, sl
 80012f0:	2503      	movs	r5, #3
 80012f2:	6864      	ldr	r4, [r4, #4]
 80012f4:	4025      	ands	r5, r4
 80012f6:	46ac      	mov	ip, r5
 80012f8:	3d01      	subs	r5, #1
 80012fa:	2d01      	cmp	r5, #1
 80012fc:	d800      	bhi.n	8001300 <HAL_GPIO_Init+0x40>
 80012fe:	e070      	b.n	80013e2 <HAL_GPIO_Init+0x122>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001300:	4665      	mov	r5, ip
 8001302:	2d03      	cmp	r5, #3
 8001304:	d000      	beq.n	8001308 <HAL_GPIO_Init+0x48>
 8001306:	e0b3      	b.n	8001470 <HAL_GPIO_Init+0x1b0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001308:	4666      	mov	r6, ip
 800130a:	4096      	lsls	r6, r2
 800130c:	43f5      	mvns	r5, r6
 800130e:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8001310:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001312:	9d02      	ldr	r5, [sp, #8]
 8001314:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001316:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001318:	25c0      	movs	r5, #192	; 0xc0
 800131a:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 800131c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800131e:	422c      	tst	r4, r5
 8001320:	d052      	beq.n	80013c8 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	465d      	mov	r5, fp
 8001324:	2601      	movs	r6, #1
 8001326:	465f      	mov	r7, fp
 8001328:	69ad      	ldr	r5, [r5, #24]
 800132a:	4335      	orrs	r5, r6
 800132c:	61bd      	str	r5, [r7, #24]
 800132e:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001330:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	4035      	ands	r5, r6
 8001334:	4e63      	ldr	r6, [pc, #396]	; (80014c4 <HAL_GPIO_Init+0x204>)
 8001336:	9505      	str	r5, [sp, #20]
 8001338:	46b4      	mov	ip, r6
 800133a:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800133c:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 800133e:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001340:	00bf      	lsls	r7, r7, #2
 8001342:	00ad      	lsls	r5, r5, #2
 8001344:	4465      	add	r5, ip
 8001346:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8001348:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800134a:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 800134c:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800134e:	4666      	mov	r6, ip
 8001350:	40b7      	lsls	r7, r6
 8001352:	003e      	movs	r6, r7
 8001354:	464f      	mov	r7, r9
 8001356:	43b7      	bics	r7, r6
 8001358:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800135a:	2790      	movs	r7, #144	; 0x90
 800135c:	05ff      	lsls	r7, r7, #23
 800135e:	42b8      	cmp	r0, r7
 8001360:	d012      	beq.n	8001388 <HAL_GPIO_Init+0xc8>
 8001362:	4f59      	ldr	r7, [pc, #356]	; (80014c8 <HAL_GPIO_Init+0x208>)
 8001364:	42b8      	cmp	r0, r7
 8001366:	d100      	bne.n	800136a <HAL_GPIO_Init+0xaa>
 8001368:	e09b      	b.n	80014a2 <HAL_GPIO_Init+0x1e2>
 800136a:	4f58      	ldr	r7, [pc, #352]	; (80014cc <HAL_GPIO_Init+0x20c>)
 800136c:	42b8      	cmp	r0, r7
 800136e:	d100      	bne.n	8001372 <HAL_GPIO_Init+0xb2>
 8001370:	e09f      	b.n	80014b2 <HAL_GPIO_Init+0x1f2>
 8001372:	4f57      	ldr	r7, [pc, #348]	; (80014d0 <HAL_GPIO_Init+0x210>)
 8001374:	42b8      	cmp	r0, r7
 8001376:	d100      	bne.n	800137a <HAL_GPIO_Init+0xba>
 8001378:	e08c      	b.n	8001494 <HAL_GPIO_Init+0x1d4>
 800137a:	4666      	mov	r6, ip
 800137c:	2705      	movs	r7, #5
 800137e:	40b7      	lsls	r7, r6
 8001380:	003e      	movs	r6, r7
 8001382:	464f      	mov	r7, r9
 8001384:	4337      	orrs	r7, r6
 8001386:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001388:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800138a:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 800138c:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 800138e:	4d51      	ldr	r5, [pc, #324]	; (80014d4 <HAL_GPIO_Init+0x214>)
        temp &= ~(iocurrent);
 8001390:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001392:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8001394:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 8001396:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001398:	423c      	tst	r4, r7
 800139a:	d000      	beq.n	800139e <HAL_GPIO_Init+0xde>
 800139c:	e077      	b.n	800148e <HAL_GPIO_Init+0x1ce>
        temp &= ~(iocurrent);
 800139e:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80013a0:	4f4c      	ldr	r7, [pc, #304]	; (80014d4 <HAL_GPIO_Init+0x214>)
 80013a2:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 80013a4:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a6:	02a7      	lsls	r7, r4, #10
 80013a8:	d46e      	bmi.n	8001488 <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 80013aa:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80013ac:	4f49      	ldr	r7, [pc, #292]	; (80014d4 <HAL_GPIO_Init+0x214>)
 80013ae:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80013b0:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b2:	03a7      	lsls	r7, r4, #14
 80013b4:	d465      	bmi.n	8001482 <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 80013b6:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80013b8:	4f46      	ldr	r7, [pc, #280]	; (80014d4 <HAL_GPIO_Init+0x214>)
 80013ba:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 80013bc:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013be:	03e4      	lsls	r4, r4, #15
 80013c0:	d45b      	bmi.n	800147a <HAL_GPIO_Init+0x1ba>
        temp &= ~(iocurrent);
 80013c2:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80013c4:	4c43      	ldr	r4, [pc, #268]	; (80014d4 <HAL_GPIO_Init+0x214>)
 80013c6:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c8:	000c      	movs	r4, r1
      }
    }

    position++;
 80013ca:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013cc:	40dc      	lsrs	r4, r3
 80013ce:	3202      	adds	r2, #2
 80013d0:	2c00      	cmp	r4, #0
 80013d2:	d185      	bne.n	80012e0 <HAL_GPIO_Init+0x20>
  } 
}
 80013d4:	b007      	add	sp, #28
 80013d6:	bcf0      	pop	{r4, r5, r6, r7}
 80013d8:	46bb      	mov	fp, r7
 80013da:	46b2      	mov	sl, r6
 80013dc:	46a9      	mov	r9, r5
 80013de:	46a0      	mov	r8, r4
 80013e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80013e2:	6885      	ldr	r5, [r0, #8]
 80013e4:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013e6:	2503      	movs	r5, #3
 80013e8:	4095      	lsls	r5, r2
 80013ea:	46a8      	mov	r8, r5
 80013ec:	43ed      	mvns	r5, r5
 80013ee:	464f      	mov	r7, r9
 80013f0:	9502      	str	r5, [sp, #8]
 80013f2:	4645      	mov	r5, r8
 80013f4:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f6:	4655      	mov	r5, sl
 80013f8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013fa:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013fc:	002f      	movs	r7, r5
 80013fe:	4097      	lsls	r7, r2
 8001400:	46b8      	mov	r8, r7
 8001402:	464f      	mov	r7, r9
 8001404:	4645      	mov	r5, r8
 8001406:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8001408:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800140a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800140c:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140e:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001410:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001412:	0926      	lsrs	r6, r4, #4
 8001414:	402e      	ands	r6, r5
 8001416:	409e      	lsls	r6, r3
 8001418:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800141a:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800141c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800141e:	9d02      	ldr	r5, [sp, #8]
 8001420:	402e      	ands	r6, r5
 8001422:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001424:	4656      	mov	r6, sl
 8001426:	68b6      	ldr	r6, [r6, #8]
 8001428:	4647      	mov	r7, r8
 800142a:	4096      	lsls	r6, r2
 800142c:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 800142e:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001430:	4667      	mov	r7, ip
 8001432:	4666      	mov	r6, ip
 8001434:	4096      	lsls	r6, r2
 8001436:	2f02      	cmp	r7, #2
 8001438:	d000      	beq.n	800143c <HAL_GPIO_Init+0x17c>
 800143a:	e769      	b.n	8001310 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 800143c:	08dd      	lsrs	r5, r3, #3
 800143e:	00ad      	lsls	r5, r5, #2
 8001440:	46ac      	mov	ip, r5
 8001442:	4484      	add	ip, r0
 8001444:	4665      	mov	r5, ip
 8001446:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001448:	2507      	movs	r5, #7
 800144a:	401d      	ands	r5, r3
 800144c:	00ad      	lsls	r5, r5, #2
 800144e:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8001450:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001452:	250f      	movs	r5, #15
 8001454:	4647      	mov	r7, r8
 8001456:	40bd      	lsls	r5, r7
 8001458:	9f03      	ldr	r7, [sp, #12]
 800145a:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800145c:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800145e:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001460:	4647      	mov	r7, r8
 8001462:	692d      	ldr	r5, [r5, #16]
 8001464:	40bd      	lsls	r5, r7
 8001466:	9f03      	ldr	r7, [sp, #12]
 8001468:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 800146a:	4665      	mov	r5, ip
 800146c:	622f      	str	r7, [r5, #32]
 800146e:	e74f      	b.n	8001310 <HAL_GPIO_Init+0x50>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001470:	2503      	movs	r5, #3
 8001472:	4095      	lsls	r5, r2
 8001474:	43ed      	mvns	r5, r5
 8001476:	9502      	str	r5, [sp, #8]
 8001478:	e7d0      	b.n	800141c <HAL_GPIO_Init+0x15c>
          temp |= iocurrent;
 800147a:	9c01      	ldr	r4, [sp, #4]
 800147c:	432c      	orrs	r4, r5
 800147e:	0025      	movs	r5, r4
 8001480:	e7a0      	b.n	80013c4 <HAL_GPIO_Init+0x104>
          temp |= iocurrent;
 8001482:	9f01      	ldr	r7, [sp, #4]
 8001484:	433d      	orrs	r5, r7
 8001486:	e797      	b.n	80013b8 <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 8001488:	9f01      	ldr	r7, [sp, #4]
 800148a:	433d      	orrs	r5, r7
 800148c:	e78e      	b.n	80013ac <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 800148e:	9f01      	ldr	r7, [sp, #4]
 8001490:	433d      	orrs	r5, r7
 8001492:	e785      	b.n	80013a0 <HAL_GPIO_Init+0xe0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001494:	4667      	mov	r7, ip
 8001496:	2603      	movs	r6, #3
 8001498:	40be      	lsls	r6, r7
 800149a:	464f      	mov	r7, r9
 800149c:	4337      	orrs	r7, r6
 800149e:	46b9      	mov	r9, r7
 80014a0:	e772      	b.n	8001388 <HAL_GPIO_Init+0xc8>
 80014a2:	4666      	mov	r6, ip
 80014a4:	2701      	movs	r7, #1
 80014a6:	40b7      	lsls	r7, r6
 80014a8:	003e      	movs	r6, r7
 80014aa:	464f      	mov	r7, r9
 80014ac:	4337      	orrs	r7, r6
 80014ae:	46b9      	mov	r9, r7
 80014b0:	e76a      	b.n	8001388 <HAL_GPIO_Init+0xc8>
 80014b2:	4667      	mov	r7, ip
 80014b4:	2602      	movs	r6, #2
 80014b6:	40be      	lsls	r6, r7
 80014b8:	464f      	mov	r7, r9
 80014ba:	4337      	orrs	r7, r6
 80014bc:	46b9      	mov	r9, r7
 80014be:	e763      	b.n	8001388 <HAL_GPIO_Init+0xc8>
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000800 	.word	0x48000800
 80014d0:	48000c00 	.word	0x48000c00
 80014d4:	40010400 	.word	0x40010400

080014d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	46ce      	mov	lr, r9
 80014dc:	4647      	mov	r7, r8
 80014de:	b580      	push	{r7, lr}
 80014e0:	0004      	movs	r4, r0
 80014e2:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d100      	bne.n	80014ea <HAL_RCC_OscConfig+0x12>
 80014e8:	e0ee      	b.n	80016c8 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ea:	6803      	ldr	r3, [r0, #0]
 80014ec:	07da      	lsls	r2, r3, #31
 80014ee:	d535      	bpl.n	800155c <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014f0:	210c      	movs	r1, #12
 80014f2:	48c3      	ldr	r0, [pc, #780]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 80014f4:	6842      	ldr	r2, [r0, #4]
 80014f6:	400a      	ands	r2, r1
 80014f8:	2a04      	cmp	r2, #4
 80014fa:	d100      	bne.n	80014fe <HAL_RCC_OscConfig+0x26>
 80014fc:	e101      	b.n	8001702 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014fe:	6842      	ldr	r2, [r0, #4]
 8001500:	4011      	ands	r1, r2
 8001502:	2908      	cmp	r1, #8
 8001504:	d100      	bne.n	8001508 <HAL_RCC_OscConfig+0x30>
 8001506:	e0f8      	b.n	80016fa <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001508:	6863      	ldr	r3, [r4, #4]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d00f      	beq.n	800152e <HAL_RCC_OscConfig+0x56>
 800150e:	2b00      	cmp	r3, #0
 8001510:	d100      	bne.n	8001514 <HAL_RCC_OscConfig+0x3c>
 8001512:	e11e      	b.n	8001752 <HAL_RCC_OscConfig+0x27a>
 8001514:	2b05      	cmp	r3, #5
 8001516:	d100      	bne.n	800151a <HAL_RCC_OscConfig+0x42>
 8001518:	e1a7      	b.n	800186a <HAL_RCC_OscConfig+0x392>
 800151a:	4bb9      	ldr	r3, [pc, #740]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 800151c:	49b9      	ldr	r1, [pc, #740]	; (8001804 <HAL_RCC_OscConfig+0x32c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	400a      	ands	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	49b8      	ldr	r1, [pc, #736]	; (8001808 <HAL_RCC_OscConfig+0x330>)
 8001528:	400a      	ands	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e005      	b.n	800153a <HAL_RCC_OscConfig+0x62>
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	4ab3      	ldr	r2, [pc, #716]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 8001532:	025b      	lsls	r3, r3, #9
 8001534:	6811      	ldr	r1, [r2, #0]
 8001536:	430b      	orrs	r3, r1
 8001538:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff fe5d 	bl	80011f8 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001540:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4faf      	ldr	r7, [pc, #700]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 8001544:	02b6      	lsls	r6, r6, #10
 8001546:	e005      	b.n	8001554 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fe56 	bl	80011f8 <HAL_GetTick>
 800154c:	1b40      	subs	r0, r0, r5
 800154e:	2864      	cmp	r0, #100	; 0x64
 8001550:	d900      	bls.n	8001554 <HAL_RCC_OscConfig+0x7c>
 8001552:	e0fc      	b.n	800174e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4233      	tst	r3, r6
 8001558:	d0f6      	beq.n	8001548 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	079a      	lsls	r2, r3, #30
 800155e:	d529      	bpl.n	80015b4 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001560:	220c      	movs	r2, #12
 8001562:	49a7      	ldr	r1, [pc, #668]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 8001564:	6848      	ldr	r0, [r1, #4]
 8001566:	4202      	tst	r2, r0
 8001568:	d100      	bne.n	800156c <HAL_RCC_OscConfig+0x94>
 800156a:	e0a6      	b.n	80016ba <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800156c:	6848      	ldr	r0, [r1, #4]
 800156e:	4002      	ands	r2, r0
 8001570:	2a08      	cmp	r2, #8
 8001572:	d100      	bne.n	8001576 <HAL_RCC_OscConfig+0x9e>
 8001574:	e09d      	b.n	80016b2 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001576:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001578:	4da1      	ldr	r5, [pc, #644]	; (8001800 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157a:	2b00      	cmp	r3, #0
 800157c:	d100      	bne.n	8001580 <HAL_RCC_OscConfig+0xa8>
 800157e:	e11f      	b.n	80017c0 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8001580:	2201      	movs	r2, #1
 8001582:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001586:	4313      	orrs	r3, r2
 8001588:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800158a:	f7ff fe35 	bl	80011f8 <HAL_GetTick>
 800158e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	e005      	b.n	800159e <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff fe31 	bl	80011f8 <HAL_GetTick>
 8001596:	1b80      	subs	r0, r0, r6
 8001598:	2802      	cmp	r0, #2
 800159a:	d900      	bls.n	800159e <HAL_RCC_OscConfig+0xc6>
 800159c:	e0d7      	b.n	800174e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159e:	682b      	ldr	r3, [r5, #0]
 80015a0:	421f      	tst	r7, r3
 80015a2:	d0f6      	beq.n	8001592 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	21f8      	movs	r1, #248	; 0xf8
 80015a6:	682a      	ldr	r2, [r5, #0]
 80015a8:	6923      	ldr	r3, [r4, #16]
 80015aa:	438a      	bics	r2, r1
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	071a      	lsls	r2, r3, #28
 80015b6:	d42d      	bmi.n	8001614 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b8:	075a      	lsls	r2, r3, #29
 80015ba:	d544      	bpl.n	8001646 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015bc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80015be:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c0:	4b8f      	ldr	r3, [pc, #572]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 80015c2:	0552      	lsls	r2, r2, #21
 80015c4:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c8:	4211      	tst	r1, r2
 80015ca:	d108      	bne.n	80015de <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	69d9      	ldr	r1, [r3, #28]
 80015ce:	4311      	orrs	r1, r2
 80015d0:	61d9      	str	r1, [r3, #28]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	4013      	ands	r3, r2
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015da:	2301      	movs	r3, #1
 80015dc:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015de:	2780      	movs	r7, #128	; 0x80
 80015e0:	4e8a      	ldr	r6, [pc, #552]	; (800180c <HAL_RCC_OscConfig+0x334>)
 80015e2:	007f      	lsls	r7, r7, #1
 80015e4:	6833      	ldr	r3, [r6, #0]
 80015e6:	423b      	tst	r3, r7
 80015e8:	d100      	bne.n	80015ec <HAL_RCC_OscConfig+0x114>
 80015ea:	e094      	b.n	8001716 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ec:	68a3      	ldr	r3, [r4, #8]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d100      	bne.n	80015f4 <HAL_RCC_OscConfig+0x11c>
 80015f2:	e0f8      	b.n	80017e6 <HAL_RCC_OscConfig+0x30e>
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d100      	bne.n	80015fa <HAL_RCC_OscConfig+0x122>
 80015f8:	e0c4      	b.n	8001784 <HAL_RCC_OscConfig+0x2ac>
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d100      	bne.n	8001600 <HAL_RCC_OscConfig+0x128>
 80015fe:	e140      	b.n	8001882 <HAL_RCC_OscConfig+0x3aa>
 8001600:	2101      	movs	r1, #1
 8001602:	4b7f      	ldr	r3, [pc, #508]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 8001604:	6a1a      	ldr	r2, [r3, #32]
 8001606:	438a      	bics	r2, r1
 8001608:	621a      	str	r2, [r3, #32]
 800160a:	6a1a      	ldr	r2, [r3, #32]
 800160c:	3103      	adds	r1, #3
 800160e:	438a      	bics	r2, r1
 8001610:	621a      	str	r2, [r3, #32]
 8001612:	e0ec      	b.n	80017ee <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001614:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8001616:	4d7a      	ldr	r5, [pc, #488]	; (8001800 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001618:	2b00      	cmp	r3, #0
 800161a:	d05b      	beq.n	80016d4 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 800161c:	2201      	movs	r2, #1
 800161e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001620:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001622:	4313      	orrs	r3, r2
 8001624:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001626:	f7ff fde7 	bl	80011f8 <HAL_GetTick>
 800162a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162c:	e005      	b.n	800163a <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162e:	f7ff fde3 	bl	80011f8 <HAL_GetTick>
 8001632:	1b80      	subs	r0, r0, r6
 8001634:	2802      	cmp	r0, #2
 8001636:	d900      	bls.n	800163a <HAL_RCC_OscConfig+0x162>
 8001638:	e089      	b.n	800174e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800163c:	421f      	tst	r7, r3
 800163e:	d0f6      	beq.n	800162e <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	075a      	lsls	r2, r3, #29
 8001644:	d4ba      	bmi.n	80015bc <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001646:	06db      	lsls	r3, r3, #27
 8001648:	d512      	bpl.n	8001670 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800164a:	6963      	ldr	r3, [r4, #20]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d100      	bne.n	8001652 <HAL_RCC_OscConfig+0x17a>
 8001650:	e13d      	b.n	80018ce <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001652:	3305      	adds	r3, #5
 8001654:	d000      	beq.n	8001658 <HAL_RCC_OscConfig+0x180>
 8001656:	e0e9      	b.n	800182c <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001658:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800165a:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 800165c:	4a68      	ldr	r2, [pc, #416]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 800165e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001660:	438b      	bics	r3, r1
 8001662:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001664:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001666:	69a3      	ldr	r3, [r4, #24]
 8001668:	4381      	bics	r1, r0
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	430b      	orrs	r3, r1
 800166e:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001670:	6a23      	ldr	r3, [r4, #32]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d01b      	beq.n	80016ae <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001676:	220c      	movs	r2, #12
 8001678:	4d61      	ldr	r5, [pc, #388]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 800167a:	6869      	ldr	r1, [r5, #4]
 800167c:	400a      	ands	r2, r1
 800167e:	2a08      	cmp	r2, #8
 8001680:	d100      	bne.n	8001684 <HAL_RCC_OscConfig+0x1ac>
 8001682:	e108      	b.n	8001896 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001684:	2b02      	cmp	r3, #2
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0x1b2>
 8001688:	e13f      	b.n	800190a <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	682b      	ldr	r3, [r5, #0]
 800168c:	4a60      	ldr	r2, [pc, #384]	; (8001810 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001690:	4013      	ands	r3, r2
 8001692:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001694:	f7ff fdb0 	bl	80011f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001698:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800169a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169c:	e004      	b.n	80016a8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff fdab 	bl	80011f8 <HAL_GetTick>
 80016a2:	1b00      	subs	r0, r0, r4
 80016a4:	2802      	cmp	r0, #2
 80016a6:	d852      	bhi.n	800174e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	4233      	tst	r3, r6
 80016ac:	d1f7      	bne.n	800169e <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 80016ae:	2000      	movs	r0, #0
 80016b0:	e00b      	b.n	80016ca <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016b2:	684a      	ldr	r2, [r1, #4]
 80016b4:	03d2      	lsls	r2, r2, #15
 80016b6:	d500      	bpl.n	80016ba <HAL_RCC_OscConfig+0x1e2>
 80016b8:	e75d      	b.n	8001576 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	4a51      	ldr	r2, [pc, #324]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	0792      	lsls	r2, r2, #30
 80016c0:	d539      	bpl.n	8001736 <HAL_RCC_OscConfig+0x25e>
 80016c2:	68e2      	ldr	r2, [r4, #12]
 80016c4:	2a01      	cmp	r2, #1
 80016c6:	d036      	beq.n	8001736 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 80016c8:	2001      	movs	r0, #1
}
 80016ca:	b003      	add	sp, #12
 80016cc:	bcc0      	pop	{r6, r7}
 80016ce:	46b9      	mov	r9, r7
 80016d0:	46b0      	mov	r8, r6
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80016d4:	2201      	movs	r2, #1
 80016d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d8:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80016da:	4393      	bics	r3, r2
 80016dc:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80016de:	f7ff fd8b 	bl	80011f8 <HAL_GetTick>
 80016e2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	e004      	b.n	80016f0 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e6:	f7ff fd87 	bl	80011f8 <HAL_GetTick>
 80016ea:	1b80      	subs	r0, r0, r6
 80016ec:	2802      	cmp	r0, #2
 80016ee:	d82e      	bhi.n	800174e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80016f2:	421f      	tst	r7, r3
 80016f4:	d1f7      	bne.n	80016e6 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	e7a3      	b.n	8001642 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016fa:	6842      	ldr	r2, [r0, #4]
 80016fc:	03d2      	lsls	r2, r2, #15
 80016fe:	d400      	bmi.n	8001702 <HAL_RCC_OscConfig+0x22a>
 8001700:	e702      	b.n	8001508 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001702:	4a3f      	ldr	r2, [pc, #252]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	0392      	lsls	r2, r2, #14
 8001708:	d400      	bmi.n	800170c <HAL_RCC_OscConfig+0x234>
 800170a:	e727      	b.n	800155c <HAL_RCC_OscConfig+0x84>
 800170c:	6862      	ldr	r2, [r4, #4]
 800170e:	2a00      	cmp	r2, #0
 8001710:	d000      	beq.n	8001714 <HAL_RCC_OscConfig+0x23c>
 8001712:	e723      	b.n	800155c <HAL_RCC_OscConfig+0x84>
 8001714:	e7d8      	b.n	80016c8 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001716:	6833      	ldr	r3, [r6, #0]
 8001718:	433b      	orrs	r3, r7
 800171a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800171c:	f7ff fd6c 	bl	80011f8 <HAL_GetTick>
 8001720:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001722:	e004      	b.n	800172e <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001724:	f7ff fd68 	bl	80011f8 <HAL_GetTick>
 8001728:	1b40      	subs	r0, r0, r5
 800172a:	2864      	cmp	r0, #100	; 0x64
 800172c:	d80f      	bhi.n	800174e <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	6833      	ldr	r3, [r6, #0]
 8001730:	423b      	tst	r3, r7
 8001732:	d0f7      	beq.n	8001724 <HAL_RCC_OscConfig+0x24c>
 8001734:	e75a      	b.n	80015ec <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001736:	25f8      	movs	r5, #248	; 0xf8
 8001738:	4831      	ldr	r0, [pc, #196]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 800173a:	6922      	ldr	r2, [r4, #16]
 800173c:	6801      	ldr	r1, [r0, #0]
 800173e:	00d2      	lsls	r2, r2, #3
 8001740:	43a9      	bics	r1, r5
 8001742:	430a      	orrs	r2, r1
 8001744:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001746:	071a      	lsls	r2, r3, #28
 8001748:	d400      	bmi.n	800174c <HAL_RCC_OscConfig+0x274>
 800174a:	e735      	b.n	80015b8 <HAL_RCC_OscConfig+0xe0>
 800174c:	e762      	b.n	8001614 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 800174e:	2003      	movs	r0, #3
 8001750:	e7bb      	b.n	80016ca <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001752:	4d2b      	ldr	r5, [pc, #172]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 8001754:	4a2b      	ldr	r2, [pc, #172]	; (8001804 <HAL_RCC_OscConfig+0x32c>)
 8001756:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001758:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	4013      	ands	r3, r2
 800175c:	602b      	str	r3, [r5, #0]
 800175e:	682b      	ldr	r3, [r5, #0]
 8001760:	4a29      	ldr	r2, [pc, #164]	; (8001808 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	4013      	ands	r3, r2
 8001766:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001768:	f7ff fd46 	bl	80011f8 <HAL_GetTick>
 800176c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176e:	e004      	b.n	800177a <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff fd42 	bl	80011f8 <HAL_GetTick>
 8001774:	1b80      	subs	r0, r0, r6
 8001776:	2864      	cmp	r0, #100	; 0x64
 8001778:	d8e9      	bhi.n	800174e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	682b      	ldr	r3, [r5, #0]
 800177c:	423b      	tst	r3, r7
 800177e:	d1f7      	bne.n	8001770 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	e6eb      	b.n	800155c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001784:	2201      	movs	r2, #1
 8001786:	4e1e      	ldr	r6, [pc, #120]	; (8001800 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	4d22      	ldr	r5, [pc, #136]	; (8001814 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178a:	6a33      	ldr	r3, [r6, #32]
 800178c:	4393      	bics	r3, r2
 800178e:	6233      	str	r3, [r6, #32]
 8001790:	6a33      	ldr	r3, [r6, #32]
 8001792:	3203      	adds	r2, #3
 8001794:	4393      	bics	r3, r2
 8001796:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001798:	f7ff fd2e 	bl	80011f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800179e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a0:	4698      	mov	r8, r3
 80017a2:	e004      	b.n	80017ae <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff fd28 	bl	80011f8 <HAL_GetTick>
 80017a8:	1bc0      	subs	r0, r0, r7
 80017aa:	42a8      	cmp	r0, r5
 80017ac:	d8cf      	bhi.n	800174e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ae:	4642      	mov	r2, r8
 80017b0:	6a33      	ldr	r3, [r6, #32]
 80017b2:	421a      	tst	r2, r3
 80017b4:	d1f6      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 80017b6:	464b      	mov	r3, r9
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d04f      	beq.n	800185c <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	e742      	b.n	8001646 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 80017c0:	2201      	movs	r2, #1
 80017c2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c4:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4393      	bics	r3, r2
 80017c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017ca:	f7ff fd15 	bl	80011f8 <HAL_GetTick>
 80017ce:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d0:	e004      	b.n	80017dc <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff fd11 	bl	80011f8 <HAL_GetTick>
 80017d6:	1b80      	subs	r0, r0, r6
 80017d8:	2802      	cmp	r0, #2
 80017da:	d8b8      	bhi.n	800174e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017dc:	682b      	ldr	r3, [r5, #0]
 80017de:	421f      	tst	r7, r3
 80017e0:	d1f7      	bne.n	80017d2 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	e6e6      	b.n	80015b4 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e6:	4906      	ldr	r1, [pc, #24]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 80017e8:	6a0a      	ldr	r2, [r1, #32]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80017ee:	f7ff fd03 	bl	80011f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f2:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80017f4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f6:	4698      	mov	r8, r3
 80017f8:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	4d06      	ldr	r5, [pc, #24]	; (8001814 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	e011      	b.n	8001822 <HAL_RCC_OscConfig+0x34a>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40021000 	.word	0x40021000
 8001804:	fffeffff 	.word	0xfffeffff
 8001808:	fffbffff 	.word	0xfffbffff
 800180c:	40007000 	.word	0x40007000
 8001810:	feffffff 	.word	0xfeffffff
 8001814:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001818:	f7ff fcee 	bl	80011f8 <HAL_GetTick>
 800181c:	1b80      	subs	r0, r0, r6
 800181e:	42a8      	cmp	r0, r5
 8001820:	d895      	bhi.n	800174e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001822:	4643      	mov	r3, r8
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	421f      	tst	r7, r3
 8001828:	d0f6      	beq.n	8001818 <HAL_RCC_OscConfig+0x340>
 800182a:	e7c4      	b.n	80017b6 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 800182c:	2204      	movs	r2, #4
 800182e:	4d53      	ldr	r5, [pc, #332]	; (800197c <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001830:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001832:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001834:	4313      	orrs	r3, r2
 8001836:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001838:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800183a:	3a03      	subs	r2, #3
 800183c:	4393      	bics	r3, r2
 800183e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001840:	f7ff fcda 	bl	80011f8 <HAL_GetTick>
 8001844:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001846:	e005      	b.n	8001854 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001848:	f7ff fcd6 	bl	80011f8 <HAL_GetTick>
 800184c:	1b80      	subs	r0, r0, r6
 800184e:	2802      	cmp	r0, #2
 8001850:	d900      	bls.n	8001854 <HAL_RCC_OscConfig+0x37c>
 8001852:	e77c      	b.n	800174e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001854:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001856:	421f      	tst	r7, r3
 8001858:	d1f6      	bne.n	8001848 <HAL_RCC_OscConfig+0x370>
 800185a:	e709      	b.n	8001670 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 800185c:	4a47      	ldr	r2, [pc, #284]	; (800197c <HAL_RCC_OscConfig+0x4a4>)
 800185e:	4948      	ldr	r1, [pc, #288]	; (8001980 <HAL_RCC_OscConfig+0x4a8>)
 8001860:	69d3      	ldr	r3, [r2, #28]
 8001862:	400b      	ands	r3, r1
 8001864:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	e6ed      	b.n	8001646 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	4b43      	ldr	r3, [pc, #268]	; (800197c <HAL_RCC_OscConfig+0x4a4>)
 800186e:	02d2      	lsls	r2, r2, #11
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	2280      	movs	r2, #128	; 0x80
 8001878:	6819      	ldr	r1, [r3, #0]
 800187a:	0252      	lsls	r2, r2, #9
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e65b      	b.n	800153a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001882:	2104      	movs	r1, #4
 8001884:	4b3d      	ldr	r3, [pc, #244]	; (800197c <HAL_RCC_OscConfig+0x4a4>)
 8001886:	6a1a      	ldr	r2, [r3, #32]
 8001888:	430a      	orrs	r2, r1
 800188a:	621a      	str	r2, [r3, #32]
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	3903      	subs	r1, #3
 8001890:	430a      	orrs	r2, r1
 8001892:	621a      	str	r2, [r3, #32]
 8001894:	e7ab      	b.n	80017ee <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001896:	2b01      	cmp	r3, #1
 8001898:	d100      	bne.n	800189c <HAL_RCC_OscConfig+0x3c4>
 800189a:	e715      	b.n	80016c8 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800189c:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 800189e:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018a2:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 80018a4:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 80018a6:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a8:	4013      	ands	r3, r2
 80018aa:	428b      	cmp	r3, r1
 80018ac:	d000      	beq.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
 80018ae:	e70c      	b.n	80016ca <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018b0:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018b4:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	428b      	cmp	r3, r1
 80018b8:	d000      	beq.n	80018bc <HAL_RCC_OscConfig+0x3e4>
 80018ba:	e706      	b.n	80016ca <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018bc:	23f0      	movs	r3, #240	; 0xf0
 80018be:	039b      	lsls	r3, r3, #14
 80018c0:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018c4:	1ad2      	subs	r2, r2, r3
 80018c6:	1e53      	subs	r3, r2, #1
 80018c8:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 80018ca:	b2d0      	uxtb	r0, r2
 80018cc:	e6fd      	b.n	80016ca <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 80018ce:	2104      	movs	r1, #4
 80018d0:	4d2a      	ldr	r5, [pc, #168]	; (800197c <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018d2:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80018d4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80018d6:	430a      	orrs	r2, r1
 80018d8:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80018da:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80018dc:	4313      	orrs	r3, r2
 80018de:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80018e0:	f7ff fc8a 	bl	80011f8 <HAL_GetTick>
 80018e4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018e6:	e005      	b.n	80018f4 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018e8:	f7ff fc86 	bl	80011f8 <HAL_GetTick>
 80018ec:	1b80      	subs	r0, r0, r6
 80018ee:	2802      	cmp	r0, #2
 80018f0:	d900      	bls.n	80018f4 <HAL_RCC_OscConfig+0x41c>
 80018f2:	e72c      	b.n	800174e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80018f6:	421f      	tst	r7, r3
 80018f8:	d0f6      	beq.n	80018e8 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018fa:	21f8      	movs	r1, #248	; 0xf8
 80018fc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80018fe:	69a3      	ldr	r3, [r4, #24]
 8001900:	438a      	bics	r2, r1
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4313      	orrs	r3, r2
 8001906:	636b      	str	r3, [r5, #52]	; 0x34
 8001908:	e6b2      	b.n	8001670 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 800190a:	682b      	ldr	r3, [r5, #0]
 800190c:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001910:	4013      	ands	r3, r2
 8001912:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001914:	f7ff fc70 	bl	80011f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001918:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 800191a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191c:	e005      	b.n	800192a <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff fc6b 	bl	80011f8 <HAL_GetTick>
 8001922:	1b80      	subs	r0, r0, r6
 8001924:	2802      	cmp	r0, #2
 8001926:	d900      	bls.n	800192a <HAL_RCC_OscConfig+0x452>
 8001928:	e711      	b.n	800174e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192a:	682b      	ldr	r3, [r5, #0]
 800192c:	423b      	tst	r3, r7
 800192e:	d1f6      	bne.n	800191e <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001930:	220f      	movs	r2, #15
 8001932:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001934:	4e11      	ldr	r6, [pc, #68]	; (800197c <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001936:	4393      	bics	r3, r2
 8001938:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800193a:	4313      	orrs	r3, r2
 800193c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800193e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001940:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001942:	686a      	ldr	r2, [r5, #4]
 8001944:	430b      	orrs	r3, r1
 8001946:	4910      	ldr	r1, [pc, #64]	; (8001988 <HAL_RCC_OscConfig+0x4b0>)
 8001948:	400a      	ands	r2, r1
 800194a:	4313      	orrs	r3, r2
 800194c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	682a      	ldr	r2, [r5, #0]
 8001952:	045b      	lsls	r3, r3, #17
 8001954:	4313      	orrs	r3, r2
 8001956:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001958:	f7ff fc4e 	bl	80011f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800195c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800195e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001960:	04ad      	lsls	r5, r5, #18
 8001962:	e005      	b.n	8001970 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff fc48 	bl	80011f8 <HAL_GetTick>
 8001968:	1b00      	subs	r0, r0, r4
 800196a:	2802      	cmp	r0, #2
 800196c:	d900      	bls.n	8001970 <HAL_RCC_OscConfig+0x498>
 800196e:	e6ee      	b.n	800174e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001970:	6833      	ldr	r3, [r6, #0]
 8001972:	422b      	tst	r3, r5
 8001974:	d0f6      	beq.n	8001964 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8001976:	2000      	movs	r0, #0
 8001978:	e6a7      	b.n	80016ca <HAL_RCC_OscConfig+0x1f2>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	40021000 	.word	0x40021000
 8001980:	efffffff 	.word	0xefffffff
 8001984:	feffffff 	.word	0xfeffffff
 8001988:	ffc2ffff 	.word	0xffc2ffff

0800198c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198e:	46ce      	mov	lr, r9
 8001990:	4647      	mov	r7, r8
 8001992:	0004      	movs	r4, r0
 8001994:	000d      	movs	r5, r1
 8001996:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001998:	2800      	cmp	r0, #0
 800199a:	d00d      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800199c:	2301      	movs	r3, #1
 800199e:	494a      	ldr	r1, [pc, #296]	; (8001ac8 <HAL_RCC_ClockConfig+0x13c>)
 80019a0:	680a      	ldr	r2, [r1, #0]
 80019a2:	401a      	ands	r2, r3
 80019a4:	42aa      	cmp	r2, r5
 80019a6:	d20c      	bcs.n	80019c2 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a8:	680a      	ldr	r2, [r1, #0]
 80019aa:	439a      	bics	r2, r3
 80019ac:	432a      	orrs	r2, r5
 80019ae:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b0:	680a      	ldr	r2, [r1, #0]
 80019b2:	4013      	ands	r3, r2
 80019b4:	42ab      	cmp	r3, r5
 80019b6:	d004      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 80019b8:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80019ba:	bcc0      	pop	{r6, r7}
 80019bc:	46b9      	mov	r9, r7
 80019be:	46b0      	mov	r8, r6
 80019c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	079a      	lsls	r2, r3, #30
 80019c6:	d50e      	bpl.n	80019e6 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	075a      	lsls	r2, r3, #29
 80019ca:	d505      	bpl.n	80019d8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019cc:	22e0      	movs	r2, #224	; 0xe0
 80019ce:	493f      	ldr	r1, [pc, #252]	; (8001acc <HAL_RCC_ClockConfig+0x140>)
 80019d0:	00d2      	lsls	r2, r2, #3
 80019d2:	6848      	ldr	r0, [r1, #4]
 80019d4:	4302      	orrs	r2, r0
 80019d6:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	20f0      	movs	r0, #240	; 0xf0
 80019da:	493c      	ldr	r1, [pc, #240]	; (8001acc <HAL_RCC_ClockConfig+0x140>)
 80019dc:	684a      	ldr	r2, [r1, #4]
 80019de:	4382      	bics	r2, r0
 80019e0:	68a0      	ldr	r0, [r4, #8]
 80019e2:	4302      	orrs	r2, r0
 80019e4:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e6:	07db      	lsls	r3, r3, #31
 80019e8:	d522      	bpl.n	8001a30 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ec:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f0:	2a01      	cmp	r2, #1
 80019f2:	d05b      	beq.n	8001aac <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f4:	2a02      	cmp	r2, #2
 80019f6:	d056      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	079b      	lsls	r3, r3, #30
 80019fa:	d5dd      	bpl.n	80019b8 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fc:	2103      	movs	r1, #3
 80019fe:	4e33      	ldr	r6, [pc, #204]	; (8001acc <HAL_RCC_ClockConfig+0x140>)
 8001a00:	6873      	ldr	r3, [r6, #4]
 8001a02:	438b      	bics	r3, r1
 8001a04:	4313      	orrs	r3, r2
 8001a06:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001a08:	f7ff fbf6 	bl	80011f8 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 8001a12:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	e004      	b.n	8001a22 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a18:	f7ff fbee 	bl	80011f8 <HAL_GetTick>
 8001a1c:	1bc0      	subs	r0, r0, r7
 8001a1e:	4548      	cmp	r0, r9
 8001a20:	d847      	bhi.n	8001ab2 <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	4643      	mov	r3, r8
 8001a24:	6872      	ldr	r2, [r6, #4]
 8001a26:	401a      	ands	r2, r3
 8001a28:	6863      	ldr	r3, [r4, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d1f3      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a30:	2101      	movs	r1, #1
 8001a32:	4a25      	ldr	r2, [pc, #148]	; (8001ac8 <HAL_RCC_ClockConfig+0x13c>)
 8001a34:	6813      	ldr	r3, [r2, #0]
 8001a36:	400b      	ands	r3, r1
 8001a38:	42ab      	cmp	r3, r5
 8001a3a:	d905      	bls.n	8001a48 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3c:	6813      	ldr	r3, [r2, #0]
 8001a3e:	438b      	bics	r3, r1
 8001a40:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	6813      	ldr	r3, [r2, #0]
 8001a44:	4219      	tst	r1, r3
 8001a46:	d1b7      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	075b      	lsls	r3, r3, #29
 8001a4c:	d506      	bpl.n	8001a5c <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a4e:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <HAL_RCC_ClockConfig+0x140>)
 8001a50:	4920      	ldr	r1, [pc, #128]	; (8001ad4 <HAL_RCC_ClockConfig+0x148>)
 8001a52:	6853      	ldr	r3, [r2, #4]
 8001a54:	400b      	ands	r3, r1
 8001a56:	68e1      	ldr	r1, [r4, #12]
 8001a58:	430b      	orrs	r3, r1
 8001a5a:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a5c:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001a5e:	491b      	ldr	r1, [pc, #108]	; (8001acc <HAL_RCC_ClockConfig+0x140>)
 8001a60:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d00e      	beq.n	8001a86 <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a68:	481b      	ldr	r0, [pc, #108]	; (8001ad8 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_RCC_ClockConfig+0x140>)
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <HAL_RCC_ClockConfig+0x150>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	491b      	ldr	r1, [pc, #108]	; (8001ae0 <HAL_RCC_ClockConfig+0x154>)
 8001a72:	061b      	lsls	r3, r3, #24
 8001a74:	0f1b      	lsrs	r3, r3, #28
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	40d8      	lsrs	r0, r3
 8001a7a:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f7ff fb79 	bl	8001174 <HAL_InitTick>
  return HAL_OK;
 8001a82:	2000      	movs	r0, #0
 8001a84:	e799      	b.n	80019ba <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a86:	250f      	movs	r5, #15
 8001a88:	4816      	ldr	r0, [pc, #88]	; (8001ae4 <HAL_RCC_ClockConfig+0x158>)
 8001a8a:	0c93      	lsrs	r3, r2, #18
 8001a8c:	402b      	ands	r3, r5
 8001a8e:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a90:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a92:	03d2      	lsls	r2, r2, #15
 8001a94:	d50f      	bpl.n	8001ab6 <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_RCC_ClockConfig+0x15c>)
 8001a98:	400d      	ands	r5, r1
 8001a9a:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a9c:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <HAL_RCC_ClockConfig+0x14c>)
 8001a9e:	f7fe fb3b 	bl	8000118 <__udivsi3>
 8001aa2:	4360      	muls	r0, r4
 8001aa4:	e7e1      	b.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	019b      	lsls	r3, r3, #6
 8001aa8:	d4a8      	bmi.n	80019fc <HAL_RCC_ClockConfig+0x70>
 8001aaa:	e785      	b.n	80019b8 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aac:	039b      	lsls	r3, r3, #14
 8001aae:	d4a5      	bmi.n	80019fc <HAL_RCC_ClockConfig+0x70>
 8001ab0:	e782      	b.n	80019b8 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	e781      	b.n	80019ba <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ab6:	0163      	lsls	r3, r4, #5
 8001ab8:	1b1b      	subs	r3, r3, r4
 8001aba:	0198      	lsls	r0, r3, #6
 8001abc:	1ac0      	subs	r0, r0, r3
 8001abe:	00c0      	lsls	r0, r0, #3
 8001ac0:	1900      	adds	r0, r0, r4
 8001ac2:	0200      	lsls	r0, r0, #8
 8001ac4:	e7d1      	b.n	8001a6a <HAL_RCC_ClockConfig+0xde>
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	00001388 	.word	0x00001388
 8001ad4:	fffff8ff 	.word	0xfffff8ff
 8001ad8:	007a1200 	.word	0x007a1200
 8001adc:	08002414 	.word	0x08002414
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	0800242c 	.word	0x0800242c
 8001ae8:	0800243c 	.word	0x0800243c

08001aec <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8001aec:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001aee:	4910      	ldr	r1, [pc, #64]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8001af0:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001af2:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0x12>
      sysclockfreq = HSE_VALUE;
 8001afa:	480e      	ldr	r0, [pc, #56]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001afc:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001afe:	250f      	movs	r5, #15
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001b02:	0c93      	lsrs	r3, r2, #18
 8001b04:	402b      	ands	r3, r5
 8001b06:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b08:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b0a:	03d2      	lsls	r2, r2, #15
 8001b0c:	d507      	bpl.n	8001b1e <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x50>)
 8001b10:	400d      	ands	r5, r1
 8001b12:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b14:	4807      	ldr	r0, [pc, #28]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x48>)
 8001b16:	f7fe faff 	bl	8000118 <__udivsi3>
 8001b1a:	4360      	muls	r0, r4
 8001b1c:	e7ee      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b1e:	0162      	lsls	r2, r4, #5
 8001b20:	1b12      	subs	r2, r2, r4
 8001b22:	0193      	lsls	r3, r2, #6
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	191b      	adds	r3, r3, r4
 8001b2a:	0218      	lsls	r0, r3, #8
 8001b2c:	e7e6      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x10>
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40021000 	.word	0x40021000
 8001b34:	007a1200 	.word	0x007a1200
 8001b38:	0800242c 	.word	0x0800242c
 8001b3c:	0800243c 	.word	0x0800243c

08001b40 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4905      	ldr	r1, [pc, #20]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b48:	055b      	lsls	r3, r3, #21
 8001b4a:	0f5b      	lsrs	r3, r3, #29
 8001b4c:	5ccb      	ldrb	r3, [r1, r3]
 8001b4e:	6810      	ldr	r0, [r2, #0]
 8001b50:	40d8      	lsrs	r0, r3
}    
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	08002424 	.word	0x08002424

08001b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b62:	46ce      	mov	lr, r9
 8001b64:	4647      	mov	r7, r8
 8001b66:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b68:	6803      	ldr	r3, [r0, #0]
{
 8001b6a:	0004      	movs	r4, r0
 8001b6c:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b6e:	03da      	lsls	r2, r3, #15
 8001b70:	d530      	bpl.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b72:	2280      	movs	r2, #128	; 0x80
 8001b74:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001b76:	0552      	lsls	r2, r2, #21
 8001b78:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001b7a:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7c:	4211      	tst	r1, r2
 8001b7e:	d041      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	2680      	movs	r6, #128	; 0x80
 8001b82:	4d41      	ldr	r5, [pc, #260]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001b84:	0076      	lsls	r6, r6, #1
 8001b86:	682b      	ldr	r3, [r5, #0]
 8001b88:	4233      	tst	r3, r6
 8001b8a:	d049      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b8c:	4d3d      	ldr	r5, [pc, #244]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001b8e:	23c0      	movs	r3, #192	; 0xc0
 8001b90:	6a2a      	ldr	r2, [r5, #32]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	0010      	movs	r0, r2
 8001b96:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b98:	421a      	tst	r2, r3
 8001b9a:	d063      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001b9c:	6861      	ldr	r1, [r4, #4]
 8001b9e:	400b      	ands	r3, r1
 8001ba0:	4283      	cmp	r3, r0
 8001ba2:	d00e      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ba4:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ba6:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ba8:	6a2e      	ldr	r6, [r5, #32]
 8001baa:	0240      	lsls	r0, r0, #9
 8001bac:	4330      	orrs	r0, r6
 8001bae:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bb0:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bb2:	4a36      	ldr	r2, [pc, #216]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bb4:	4e36      	ldr	r6, [pc, #216]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bb6:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bb8:	4030      	ands	r0, r6
 8001bba:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001bbc:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bbe:	07db      	lsls	r3, r3, #31
 8001bc0:	d43f      	bmi.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc2:	4a30      	ldr	r2, [pc, #192]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001bc4:	4831      	ldr	r0, [pc, #196]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001bc6:	6a13      	ldr	r3, [r2, #32]
 8001bc8:	4003      	ands	r3, r0
 8001bca:	430b      	orrs	r3, r1
 8001bcc:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bce:	2f01      	cmp	r7, #1
 8001bd0:	d051      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	07da      	lsls	r2, r3, #31
 8001bd6:	d506      	bpl.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	492a      	ldr	r1, [pc, #168]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001bdc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001bde:	4382      	bics	r2, r0
 8001be0:	68a0      	ldr	r0, [r4, #8]
 8001be2:	4302      	orrs	r2, r0
 8001be4:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001be6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001be8:	069b      	lsls	r3, r3, #26
 8001bea:	d506      	bpl.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bec:	2110      	movs	r1, #16
 8001bee:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001bf0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bf2:	438b      	bics	r3, r1
 8001bf4:	68e1      	ldr	r1, [r4, #12]
 8001bf6:	430b      	orrs	r3, r1
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001bfa:	b003      	add	sp, #12
 8001bfc:	bcc0      	pop	{r6, r7}
 8001bfe:	46b9      	mov	r9, r7
 8001c00:	46b0      	mov	r8, r6
 8001c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	4d1f      	ldr	r5, [pc, #124]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4311      	orrs	r1, r2
 8001c0c:	61d9      	str	r1, [r3, #28]
 8001c0e:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4013      	ands	r3, r2
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8001c1a:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	4233      	tst	r3, r6
 8001c1e:	d1b5      	bne.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c20:	682b      	ldr	r3, [r5, #0]
 8001c22:	4333      	orrs	r3, r6
 8001c24:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001c26:	f7ff fae7 	bl	80011f8 <HAL_GetTick>
 8001c2a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	682b      	ldr	r3, [r5, #0]
 8001c2e:	4233      	tst	r3, r6
 8001c30:	d1ac      	bne.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c32:	f7ff fae1 	bl	80011f8 <HAL_GetTick>
 8001c36:	4643      	mov	r3, r8
 8001c38:	1ac0      	subs	r0, r0, r3
 8001c3a:	2864      	cmp	r0, #100	; 0x64
 8001c3c:	d9f6      	bls.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 8001c3e:	2003      	movs	r0, #3
 8001c40:	e7db      	b.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8001c42:	f7ff fad9 	bl	80011f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c46:	2302      	movs	r3, #2
 8001c48:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 8001c4c:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c50:	e004      	b.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7ff fad1 	bl	80011f8 <HAL_GetTick>
 8001c56:	1b80      	subs	r0, r0, r6
 8001c58:	4548      	cmp	r0, r9
 8001c5a:	d8f0      	bhi.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	6a2b      	ldr	r3, [r5, #32]
 8001c60:	421a      	tst	r2, r3
 8001c62:	d0f6      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001c66:	4809      	ldr	r0, [pc, #36]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001c68:	6a13      	ldr	r3, [r2, #32]
 8001c6a:	6861      	ldr	r1, [r4, #4]
 8001c6c:	4003      	ands	r3, r0
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 8001c72:	2f01      	cmp	r7, #1
 8001c74:	d1ad      	bne.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c76:	69d3      	ldr	r3, [r2, #28]
 8001c78:	4907      	ldr	r1, [pc, #28]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	e7a8      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	fffffcff 	.word	0xfffffcff
 8001c90:	fffeffff 	.word	0xfffeffff
 8001c94:	00001388 	.word	0x00001388
 8001c98:	efffffff 	.word	0xefffffff

08001c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9e:	4657      	mov	r7, sl
 8001ca0:	464e      	mov	r6, r9
 8001ca2:	4645      	mov	r5, r8
 8001ca4:	46de      	mov	lr, fp
 8001ca6:	b5e0      	push	{r5, r6, r7, lr}
 8001ca8:	001e      	movs	r6, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001caa:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8001cac:	0005      	movs	r5, r0
 8001cae:	000f      	movs	r7, r1
 8001cb0:	0014      	movs	r4, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d000      	beq.n	8001cb8 <HAL_UART_Transmit+0x1c>
 8001cb6:	e0a8      	b.n	8001e0a <HAL_UART_Transmit+0x16e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cb8:	2900      	cmp	r1, #0
 8001cba:	d04a      	beq.n	8001d52 <HAL_UART_Transmit+0xb6>
 8001cbc:	2a00      	cmp	r2, #0
 8001cbe:	d048      	beq.n	8001d52 <HAL_UART_Transmit+0xb6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	6882      	ldr	r2, [r0, #8]
 8001cc4:	015b      	lsls	r3, r3, #5
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d104      	bne.n	8001cd4 <HAL_UART_Transmit+0x38>
 8001cca:	6903      	ldr	r3, [r0, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_UART_Transmit+0x38>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001cd0:	07cb      	lsls	r3, r1, #31
 8001cd2:	d43e      	bmi.n	8001d52 <HAL_UART_Transmit+0xb6>
      {
        return  HAL_ERROR;
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2384      	movs	r3, #132	; 0x84
 8001cd8:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cda:	3b63      	subs	r3, #99	; 0x63
 8001cdc:	67eb      	str	r3, [r5, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cde:	f7ff fa8b 	bl	80011f8 <HAL_GetTick>

    huart->TxXferSize  = Size;
 8001ce2:	2350      	movs	r3, #80	; 0x50
 8001ce4:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 8001ce6:	3302      	adds	r3, #2
      pdata16bits = (const uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 8001ce8:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 8001cea:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 8001cf0:	4680      	mov	r8, r0
      pdata16bits = NULL;
 8001cf2:	468a      	mov	sl, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf4:	015b      	lsls	r3, r3, #5
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d100      	bne.n	8001cfc <HAL_UART_Transmit+0x60>
 8001cfa:	e0a3      	b.n	8001e44 <HAL_UART_Transmit+0x1a8>
    }

    while (huart->TxXferCount > 0U)
 8001cfc:	2352      	movs	r3, #82	; 0x52
 8001cfe:	5aeb      	ldrh	r3, [r5, r3]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d100      	bne.n	8001d06 <HAL_UART_Transmit+0x6a>
 8001d04:	e0d6      	b.n	8001eb4 <HAL_UART_Transmit+0x218>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d06:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d08:	2480      	movs	r4, #128	; 0x80
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d0a:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d0c:	682b      	ldr	r3, [r5, #0]
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d0e:	2208      	movs	r2, #8
 8001d10:	4693      	mov	fp, r2
 8001d12:	1c72      	adds	r2, r6, #1
 8001d14:	d124      	bne.n	8001d60 <HAL_UART_Transmit+0xc4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d16:	69da      	ldr	r2, [r3, #28]
 8001d18:	4214      	tst	r4, r2
 8001d1a:	d0fc      	beq.n	8001d16 <HAL_UART_Transmit+0x7a>
      if (pdata8bits == NULL)
 8001d1c:	2f00      	cmp	r7, #0
 8001d1e:	d06b      	beq.n	8001df8 <HAL_UART_Transmit+0x15c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d20:	783a      	ldrb	r2, [r7, #0]
        pdata8bits++;
 8001d22:	3701      	adds	r7, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d24:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8001d26:	2152      	movs	r1, #82	; 0x52
 8001d28:	5a6a      	ldrh	r2, [r5, r1]
 8001d2a:	3a01      	subs	r2, #1
 8001d2c:	b292      	uxth	r2, r2
 8001d2e:	526a      	strh	r2, [r5, r1]
    while (huart->TxXferCount > 0U)
 8001d30:	5a6a      	ldrh	r2, [r5, r1]
 8001d32:	2a00      	cmp	r2, #0
 8001d34:	d1eb      	bne.n	8001d0e <HAL_UART_Transmit+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d36:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d38:	2440      	movs	r4, #64	; 0x40
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d3a:	4691      	mov	r9, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d3c:	2708      	movs	r7, #8
 8001d3e:	1c72      	adds	r2, r6, #1
 8001d40:	d165      	bne.n	8001e0e <HAL_UART_Transmit+0x172>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d42:	2140      	movs	r1, #64	; 0x40
 8001d44:	69da      	ldr	r2, [r3, #28]
 8001d46:	4211      	tst	r1, r2
 8001d48:	d0fc      	beq.n	8001d44 <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 8001d4a:	2320      	movs	r3, #32
    return HAL_OK;
 8001d4c:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8001d4e:	67eb      	str	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 8001d50:	e000      	b.n	8001d54 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8001d52:	2001      	movs	r0, #1
}
 8001d54:	bcf0      	pop	{r4, r5, r6, r7}
 8001d56:	46bb      	mov	fp, r7
 8001d58:	46b2      	mov	sl, r6
 8001d5a:	46a9      	mov	r9, r5
 8001d5c:	46a0      	mov	r8, r4
 8001d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	4214      	tst	r4, r2
 8001d64:	d1da      	bne.n	8001d1c <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d66:	f7ff fa47 	bl	80011f8 <HAL_GetTick>
 8001d6a:	4643      	mov	r3, r8
 8001d6c:	1ac0      	subs	r0, r0, r3
 8001d6e:	4286      	cmp	r6, r0
 8001d70:	d33e      	bcc.n	8001df0 <HAL_UART_Transmit+0x154>
 8001d72:	2e00      	cmp	r6, #0
 8001d74:	d03c      	beq.n	8001df0 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d76:	4649      	mov	r1, r9
 8001d78:	682b      	ldr	r3, [r5, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4211      	tst	r1, r2
 8001d7e:	d0c8      	beq.n	8001d12 <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d80:	4659      	mov	r1, fp
 8001d82:	69da      	ldr	r2, [r3, #28]
 8001d84:	4211      	tst	r1, r2
 8001d86:	d164      	bne.n	8001e52 <HAL_UART_Transmit+0x1b6>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d88:	2280      	movs	r2, #128	; 0x80
 8001d8a:	69d9      	ldr	r1, [r3, #28]
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	4211      	tst	r1, r2
 8001d90:	d0bf      	beq.n	8001d12 <HAL_UART_Transmit+0x76>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d92:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d94:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d9e:	6829      	ldr	r1, [r5, #0]
 8001da0:	4c46      	ldr	r4, [pc, #280]	; (8001ebc <HAL_UART_Transmit+0x220>)
 8001da2:	680b      	ldr	r3, [r1, #0]
 8001da4:	4023      	ands	r3, r4
 8001da6:	600b      	str	r3, [r1, #0]
 8001da8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dac:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001db0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001db4:	6829      	ldr	r1, [r5, #0]
 8001db6:	688b      	ldr	r3, [r1, #8]
 8001db8:	4393      	bics	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]
 8001dbc:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dc0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d10a      	bne.n	8001ddc <HAL_UART_Transmit+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dc6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dca:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dce:	2010      	movs	r0, #16
 8001dd0:	682a      	ldr	r2, [r5, #0]
 8001dd2:	6813      	ldr	r3, [r2, #0]
 8001dd4:	4383      	bics	r3, r0
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ddc:	2220      	movs	r2, #32
 8001dde:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001de0:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8001de2:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001de4:	2300      	movs	r3, #0
 8001de6:	662b      	str	r3, [r5, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001de8:	66ab      	str	r3, [r5, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001dea:	506a      	str	r2, [r5, r1]
          __HAL_UNLOCK(huart);
 8001dec:	3258      	adds	r2, #88	; 0x58
 8001dee:	54ab      	strb	r3, [r5, r2]
      huart->gState = HAL_UART_STATE_READY;
 8001df0:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8001df2:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8001df4:	67eb      	str	r3, [r5, #124]	; 0x7c
      return HAL_TIMEOUT;
 8001df6:	e7ad      	b.n	8001d54 <HAL_UART_Transmit+0xb8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001df8:	4652      	mov	r2, sl
 8001dfa:	8812      	ldrh	r2, [r2, #0]
 8001dfc:	05d2      	lsls	r2, r2, #23
 8001dfe:	0dd2      	lsrs	r2, r2, #23
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e02:	2202      	movs	r2, #2
 8001e04:	4694      	mov	ip, r2
 8001e06:	44e2      	add	sl, ip
      huart->TxXferCount--;
 8001e08:	e78d      	b.n	8001d26 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 8001e0a:	2002      	movs	r0, #2
 8001e0c:	e7a2      	b.n	8001d54 <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	421c      	tst	r4, r3
 8001e12:	d19a      	bne.n	8001d4a <HAL_UART_Transmit+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e14:	f7ff f9f0 	bl	80011f8 <HAL_GetTick>
 8001e18:	4643      	mov	r3, r8
 8001e1a:	1ac0      	subs	r0, r0, r3
 8001e1c:	4286      	cmp	r6, r0
 8001e1e:	d3e7      	bcc.n	8001df0 <HAL_UART_Transmit+0x154>
 8001e20:	2e00      	cmp	r6, #0
 8001e22:	d0e5      	beq.n	8001df0 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001e24:	4649      	mov	r1, r9
 8001e26:	682b      	ldr	r3, [r5, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4211      	tst	r1, r2
 8001e2c:	d100      	bne.n	8001e30 <HAL_UART_Transmit+0x194>
 8001e2e:	e786      	b.n	8001d3e <HAL_UART_Transmit+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e30:	69da      	ldr	r2, [r3, #28]
 8001e32:	4217      	tst	r7, r2
 8001e34:	d140      	bne.n	8001eb8 <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	69d9      	ldr	r1, [r3, #28]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	4211      	tst	r1, r2
 8001e3e:	d100      	bne.n	8001e42 <HAL_UART_Transmit+0x1a6>
 8001e40:	e77d      	b.n	8001d3e <HAL_UART_Transmit+0xa2>
 8001e42:	e7a6      	b.n	8001d92 <HAL_UART_Transmit+0xf6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e44:	692b      	ldr	r3, [r5, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d000      	beq.n	8001e4c <HAL_UART_Transmit+0x1b0>
 8001e4a:	e757      	b.n	8001cfc <HAL_UART_Transmit+0x60>
 8001e4c:	46ba      	mov	sl, r7
      pdata8bits  = NULL;
 8001e4e:	2700      	movs	r7, #0
 8001e50:	e754      	b.n	8001cfc <HAL_UART_Transmit+0x60>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001e52:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e54:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e5e:	6829      	ldr	r1, [r5, #0]
 8001e60:	4c16      	ldr	r4, [pc, #88]	; (8001ebc <HAL_UART_Transmit+0x220>)
 8001e62:	680b      	ldr	r3, [r1, #0]
 8001e64:	4023      	ands	r3, r4
 8001e66:	600b      	str	r3, [r1, #0]
 8001e68:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e6c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e70:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e74:	6829      	ldr	r1, [r5, #0]
 8001e76:	688b      	ldr	r3, [r1, #8]
 8001e78:	4393      	bics	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]
 8001e7c:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e80:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10a      	bne.n	8001e9c <HAL_UART_Transmit+0x200>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e86:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e8a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e8e:	2010      	movs	r0, #16
 8001e90:	682a      	ldr	r2, [r5, #0]
 8001e92:	6813      	ldr	r3, [r2, #0]
 8001e94:	4383      	bics	r3, r0
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ea0:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8001ea2:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ea4:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ea6:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ea8:	662b      	str	r3, [r5, #96]	; 0x60
  huart->RxISR = NULL;
 8001eaa:	66ab      	str	r3, [r5, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001eac:	50a9      	str	r1, [r5, r2]
           __HAL_UNLOCK(huart);
 8001eae:	3a0c      	subs	r2, #12
 8001eb0:	54ab      	strb	r3, [r5, r2]
           return HAL_ERROR;
 8001eb2:	e79d      	b.n	8001df0 <HAL_UART_Transmit+0x154>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eb4:	682b      	ldr	r3, [r5, #0]
 8001eb6:	e73e      	b.n	8001d36 <HAL_UART_Transmit+0x9a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001eb8:	621f      	str	r7, [r3, #32]
 8001eba:	e7cb      	b.n	8001e54 <HAL_UART_Transmit+0x1b8>
 8001ebc:	fffffedf 	.word	0xfffffedf

08001ec0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ec0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001ec2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ec4:	07da      	lsls	r2, r3, #31
 8001ec6:	d506      	bpl.n	8001ed6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ec8:	6801      	ldr	r1, [r0, #0]
 8001eca:	4c28      	ldr	r4, [pc, #160]	; (8001f6c <UART_AdvFeatureConfig+0xac>)
 8001ecc:	684a      	ldr	r2, [r1, #4]
 8001ece:	4022      	ands	r2, r4
 8001ed0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ed2:	4322      	orrs	r2, r4
 8001ed4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ed6:	079a      	lsls	r2, r3, #30
 8001ed8:	d506      	bpl.n	8001ee8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001eda:	6801      	ldr	r1, [r0, #0]
 8001edc:	4c24      	ldr	r4, [pc, #144]	; (8001f70 <UART_AdvFeatureConfig+0xb0>)
 8001ede:	684a      	ldr	r2, [r1, #4]
 8001ee0:	4022      	ands	r2, r4
 8001ee2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001ee4:	4322      	orrs	r2, r4
 8001ee6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ee8:	075a      	lsls	r2, r3, #29
 8001eea:	d506      	bpl.n	8001efa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001eec:	6801      	ldr	r1, [r0, #0]
 8001eee:	4c21      	ldr	r4, [pc, #132]	; (8001f74 <UART_AdvFeatureConfig+0xb4>)
 8001ef0:	684a      	ldr	r2, [r1, #4]
 8001ef2:	4022      	ands	r2, r4
 8001ef4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001ef6:	4322      	orrs	r2, r4
 8001ef8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001efa:	071a      	lsls	r2, r3, #28
 8001efc:	d506      	bpl.n	8001f0c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001efe:	6801      	ldr	r1, [r0, #0]
 8001f00:	4c1d      	ldr	r4, [pc, #116]	; (8001f78 <UART_AdvFeatureConfig+0xb8>)
 8001f02:	684a      	ldr	r2, [r1, #4]
 8001f04:	4022      	ands	r2, r4
 8001f06:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001f08:	4322      	orrs	r2, r4
 8001f0a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f0c:	06da      	lsls	r2, r3, #27
 8001f0e:	d506      	bpl.n	8001f1e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f10:	6801      	ldr	r1, [r0, #0]
 8001f12:	4c1a      	ldr	r4, [pc, #104]	; (8001f7c <UART_AdvFeatureConfig+0xbc>)
 8001f14:	688a      	ldr	r2, [r1, #8]
 8001f16:	4022      	ands	r2, r4
 8001f18:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001f1a:	4322      	orrs	r2, r4
 8001f1c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f1e:	069a      	lsls	r2, r3, #26
 8001f20:	d506      	bpl.n	8001f30 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f22:	6801      	ldr	r1, [r0, #0]
 8001f24:	4c16      	ldr	r4, [pc, #88]	; (8001f80 <UART_AdvFeatureConfig+0xc0>)
 8001f26:	688a      	ldr	r2, [r1, #8]
 8001f28:	4022      	ands	r2, r4
 8001f2a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001f2c:	4322      	orrs	r2, r4
 8001f2e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f30:	065a      	lsls	r2, r3, #25
 8001f32:	d50a      	bpl.n	8001f4a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f34:	6801      	ldr	r1, [r0, #0]
 8001f36:	4d13      	ldr	r5, [pc, #76]	; (8001f84 <UART_AdvFeatureConfig+0xc4>)
 8001f38:	684a      	ldr	r2, [r1, #4]
 8001f3a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001f3c:	402a      	ands	r2, r5
 8001f3e:	4322      	orrs	r2, r4
 8001f40:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f42:	2280      	movs	r2, #128	; 0x80
 8001f44:	0352      	lsls	r2, r2, #13
 8001f46:	4294      	cmp	r4, r2
 8001f48:	d009      	beq.n	8001f5e <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f4a:	061b      	lsls	r3, r3, #24
 8001f4c:	d506      	bpl.n	8001f5c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f4e:	6802      	ldr	r2, [r0, #0]
 8001f50:	490d      	ldr	r1, [pc, #52]	; (8001f88 <UART_AdvFeatureConfig+0xc8>)
 8001f52:	6853      	ldr	r3, [r2, #4]
 8001f54:	400b      	ands	r3, r1
 8001f56:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	6053      	str	r3, [r2, #4]
}
 8001f5c:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f5e:	684a      	ldr	r2, [r1, #4]
 8001f60:	4c0a      	ldr	r4, [pc, #40]	; (8001f8c <UART_AdvFeatureConfig+0xcc>)
 8001f62:	4022      	ands	r2, r4
 8001f64:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f66:	4322      	orrs	r2, r4
 8001f68:	604a      	str	r2, [r1, #4]
 8001f6a:	e7ee      	b.n	8001f4a <UART_AdvFeatureConfig+0x8a>
 8001f6c:	fffdffff 	.word	0xfffdffff
 8001f70:	fffeffff 	.word	0xfffeffff
 8001f74:	fffbffff 	.word	0xfffbffff
 8001f78:	ffff7fff 	.word	0xffff7fff
 8001f7c:	ffffefff 	.word	0xffffefff
 8001f80:	ffffdfff 	.word	0xffffdfff
 8001f84:	ffefffff 	.word	0xffefffff
 8001f88:	fff7ffff 	.word	0xfff7ffff
 8001f8c:	ff9fffff 	.word	0xff9fffff

08001f90 <UART_CheckIdleState>:
{
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f92:	2384      	movs	r3, #132	; 0x84
 8001f94:	2200      	movs	r2, #0
{
 8001f96:	46c6      	mov	lr, r8
 8001f98:	0004      	movs	r4, r0
 8001f9a:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9c:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001f9e:	f7ff f92b 	bl	80011f8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fa2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001fa4:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	0712      	lsls	r2, r2, #28
 8001faa:	d410      	bmi.n	8001fce <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	0752      	lsls	r2, r2, #29
 8001fb0:	d43c      	bmi.n	800202c <UART_CheckIdleState+0x9c>
  huart->gState = HAL_UART_STATE_READY;
 8001fb2:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8001fb4:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8001fb6:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001fb8:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fba:	2300      	movs	r3, #0
  return HAL_OK;
 8001fbc:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fbe:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fc0:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8001fc2:	2378      	movs	r3, #120	; 0x78
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	54e2      	strb	r2, [r4, r3]
}
 8001fc8:	bc80      	pop	{r7}
 8001fca:	46b8      	mov	r8, r7
 8001fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fce:	69da      	ldr	r2, [r3, #28]
 8001fd0:	0292      	lsls	r2, r2, #10
 8001fd2:	d4eb      	bmi.n	8001fac <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd4:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fd6:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001fd8:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fda:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fdc:	04b6      	lsls	r6, r6, #18
 8001fde:	e010      	b.n	8002002 <UART_CheckIdleState+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4217      	tst	r7, r2
 8001fe6:	d009      	beq.n	8001ffc <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fe8:	4641      	mov	r1, r8
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	4211      	tst	r1, r2
 8001fee:	d158      	bne.n	80020a2 <UART_CheckIdleState+0x112>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001ff0:	2280      	movs	r2, #128	; 0x80
 8001ff2:	69d9      	ldr	r1, [r3, #28]
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	4211      	tst	r1, r2
 8001ff8:	d000      	beq.n	8001ffc <UART_CheckIdleState+0x6c>
 8001ffa:	e083      	b.n	8002104 <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	0292      	lsls	r2, r2, #10
 8002000:	d4d4      	bmi.n	8001fac <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002002:	f7ff f8f9 	bl	80011f8 <HAL_GetTick>
 8002006:	1b40      	subs	r0, r0, r5
 8002008:	42b0      	cmp	r0, r6
 800200a:	d3e9      	bcc.n	8001fe0 <UART_CheckIdleState+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800200c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002010:	2301      	movs	r3, #1
 8002012:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002016:	2080      	movs	r0, #128	; 0x80
 8002018:	6822      	ldr	r2, [r4, #0]
 800201a:	6813      	ldr	r3, [r2, #0]
 800201c:	4383      	bics	r3, r0
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002024:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8002026:	387d      	subs	r0, #125	; 0x7d
      huart->gState = HAL_UART_STATE_READY;
 8002028:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 800202a:	e7ca      	b.n	8001fc2 <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	025b      	lsls	r3, r3, #9
 8002030:	d4bf      	bmi.n	8001fb2 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002032:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002034:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002036:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002038:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203a:	04b6      	lsls	r6, r6, #18
 800203c:	e011      	b.n	8002062 <UART_CheckIdleState+0xd2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4217      	tst	r7, r2
 8002044:	d00a      	beq.n	800205c <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002046:	4641      	mov	r1, r8
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	4211      	tst	r1, r2
 800204c:	d000      	beq.n	8002050 <UART_CheckIdleState+0xc0>
 800204e:	e089      	b.n	8002164 <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	69d9      	ldr	r1, [r3, #28]
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	4211      	tst	r1, r2
 8002058:	d000      	beq.n	800205c <UART_CheckIdleState+0xcc>
 800205a:	e0b4      	b.n	80021c6 <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	025b      	lsls	r3, r3, #9
 8002060:	d4a7      	bmi.n	8001fb2 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002062:	f7ff f8c9 	bl	80011f8 <HAL_GetTick>
 8002066:	1b40      	subs	r0, r0, r5
 8002068:	42b0      	cmp	r0, r6
 800206a:	d3e8      	bcc.n	800203e <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800206c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002070:	2201      	movs	r2, #1
 8002072:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002076:	6821      	ldr	r1, [r4, #0]
 8002078:	4d6b      	ldr	r5, [pc, #428]	; (8002228 <UART_CheckIdleState+0x298>)
 800207a:	680b      	ldr	r3, [r1, #0]
 800207c:	402b      	ands	r3, r5
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002084:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002088:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800208c:	6821      	ldr	r1, [r4, #0]
 800208e:	688b      	ldr	r3, [r1, #8]
 8002090:	4393      	bics	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
 8002094:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 800209c:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 800209e:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80020a0:	e78f      	b.n	8001fc2 <UART_CheckIdleState+0x32>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80020a2:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a8:	2201      	movs	r2, #1
 80020aa:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020ae:	6821      	ldr	r1, [r4, #0]
 80020b0:	4d5d      	ldr	r5, [pc, #372]	; (8002228 <UART_CheckIdleState+0x298>)
 80020b2:	680b      	ldr	r3, [r1, #0]
 80020b4:	402b      	ands	r3, r5
 80020b6:	600b      	str	r3, [r1, #0]
 80020b8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020bc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c4:	6821      	ldr	r1, [r4, #0]
 80020c6:	688b      	ldr	r3, [r1, #8]
 80020c8:	4393      	bics	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
 80020cc:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10a      	bne.n	80020ec <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020da:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020de:	2010      	movs	r0, #16
 80020e0:	6822      	ldr	r2, [r4, #0]
 80020e2:	6813      	ldr	r3, [r2, #0]
 80020e4:	4383      	bics	r3, r0
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020f0:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80020f2:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020f4:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020f6:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020f8:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 80020fa:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020fc:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 80020fe:	3a0c      	subs	r2, #12
 8002100:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8002102:	e783      	b.n	800200c <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002104:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002106:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800210a:	2201      	movs	r2, #1
 800210c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002110:	6821      	ldr	r1, [r4, #0]
 8002112:	4d45      	ldr	r5, [pc, #276]	; (8002228 <UART_CheckIdleState+0x298>)
 8002114:	680b      	ldr	r3, [r1, #0]
 8002116:	402b      	ands	r3, r5
 8002118:	600b      	str	r3, [r1, #0]
 800211a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800211e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002122:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002126:	6821      	ldr	r1, [r4, #0]
 8002128:	688b      	ldr	r3, [r1, #8]
 800212a:	4393      	bics	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
 800212e:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002132:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10a      	bne.n	800214e <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002138:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800213c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002140:	2010      	movs	r0, #16
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	6813      	ldr	r3, [r2, #0]
 8002146:	4383      	bics	r3, r0
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800214e:	2220      	movs	r2, #32
 8002150:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002152:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002154:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002156:	2300      	movs	r3, #0
 8002158:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 800215a:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800215c:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 800215e:	3258      	adds	r2, #88	; 0x58
 8002160:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8002162:	e753      	b.n	800200c <UART_CheckIdleState+0x7c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002164:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002166:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800216a:	2201      	movs	r2, #1
 800216c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002170:	6821      	ldr	r1, [r4, #0]
 8002172:	4d2d      	ldr	r5, [pc, #180]	; (8002228 <UART_CheckIdleState+0x298>)
 8002174:	680b      	ldr	r3, [r1, #0]
 8002176:	402b      	ands	r3, r5
 8002178:	600b      	str	r3, [r1, #0]
 800217a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800217e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002182:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002186:	6821      	ldr	r1, [r4, #0]
 8002188:	688b      	ldr	r3, [r1, #8]
 800218a:	4393      	bics	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
 800218e:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002192:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002194:	2b01      	cmp	r3, #1
 8002196:	d10a      	bne.n	80021ae <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002198:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021a0:	2010      	movs	r0, #16
 80021a2:	6822      	ldr	r2, [r4, #0]
 80021a4:	6813      	ldr	r3, [r2, #0]
 80021a6:	4383      	bics	r3, r0
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021b2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80021b4:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021b6:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021b8:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ba:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 80021bc:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021be:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 80021c0:	3a0c      	subs	r2, #12
 80021c2:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 80021c4:	e752      	b.n	800206c <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021c6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021c8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021cc:	2201      	movs	r2, #1
 80021ce:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021d2:	6821      	ldr	r1, [r4, #0]
 80021d4:	4d14      	ldr	r5, [pc, #80]	; (8002228 <UART_CheckIdleState+0x298>)
 80021d6:	680b      	ldr	r3, [r1, #0]
 80021d8:	402b      	ands	r3, r5
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021e0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e8:	6821      	ldr	r1, [r4, #0]
 80021ea:	688b      	ldr	r3, [r1, #8]
 80021ec:	4393      	bics	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]
 80021f0:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10a      	bne.n	8002210 <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021fa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021fe:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002202:	2010      	movs	r0, #16
 8002204:	6822      	ldr	r2, [r4, #0]
 8002206:	6813      	ldr	r3, [r2, #0]
 8002208:	4383      	bics	r3, r0
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002210:	2220      	movs	r2, #32
 8002212:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002214:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002216:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002218:	2300      	movs	r3, #0
 800221a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 800221c:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800221e:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8002220:	3258      	adds	r2, #88	; 0x58
 8002222:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8002224:	e722      	b.n	800206c <UART_CheckIdleState+0xdc>
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	fffffedf 	.word	0xfffffedf

0800222c <HAL_UART_Init>:
{
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002230:	d100      	bne.n	8002234 <HAL_UART_Init+0x8>
 8002232:	e076      	b.n	8002322 <HAL_UART_Init+0xf6>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002234:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d067      	beq.n	800230a <HAL_UART_Init+0xde>
  huart->gState = HAL_UART_STATE_BUSY;
 800223a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800223c:	2101      	movs	r1, #1
 800223e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002240:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002242:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002244:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8002246:	438b      	bics	r3, r1
 8002248:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800224a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800224c:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800224e:	432b      	orrs	r3, r5
 8002250:	6965      	ldr	r5, [r4, #20]
 8002252:	69e1      	ldr	r1, [r4, #28]
 8002254:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002256:	4d49      	ldr	r5, [pc, #292]	; (800237c <HAL_UART_Init+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002258:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800225a:	4028      	ands	r0, r5
 800225c:	4303      	orrs	r3, r0
 800225e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002260:	6853      	ldr	r3, [r2, #4]
 8002262:	4847      	ldr	r0, [pc, #284]	; (8002380 <HAL_UART_Init+0x154>)
  tmpreg |= huart->Init.OneBitSampling;
 8002264:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002266:	4003      	ands	r3, r0
 8002268:	68e0      	ldr	r0, [r4, #12]
 800226a:	4303      	orrs	r3, r0
 800226c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800226e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002270:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002272:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002274:	4d43      	ldr	r5, [pc, #268]	; (8002384 <HAL_UART_Init+0x158>)
 8002276:	4028      	ands	r0, r5
 8002278:	4303      	orrs	r3, r0
 800227a:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800227c:	4b42      	ldr	r3, [pc, #264]	; (8002388 <HAL_UART_Init+0x15c>)
 800227e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002280:	2303      	movs	r3, #3
 8002282:	4013      	ands	r3, r2
 8002284:	3b01      	subs	r3, #1
 8002286:	2b02      	cmp	r3, #2
 8002288:	d91f      	bls.n	80022ca <HAL_UART_Init+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	4299      	cmp	r1, r3
 8002290:	d100      	bne.n	8002294 <HAL_UART_Init+0x68>
 8002292:	e070      	b.n	8002376 <HAL_UART_Init+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002294:	f7ff fc54 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002298:	2800      	cmp	r0, #0
 800229a:	d124      	bne.n	80022e6 <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 800229c:	2300      	movs	r3, #0
 800229e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80022a0:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d135      	bne.n	8002314 <HAL_UART_Init+0xe8>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	4938      	ldr	r1, [pc, #224]	; (800238c <HAL_UART_Init+0x160>)
 80022ac:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80022ae:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80022b0:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80022b2:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80022b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	438a      	bics	r2, r1
 80022ba:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	3907      	subs	r1, #7
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80022c4:	f7ff fe64 	bl	8001f90 <UART_CheckIdleState>
 80022c8:	e01b      	b.n	8002302 <HAL_UART_Init+0xd6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ca:	2080      	movs	r0, #128	; 0x80
 80022cc:	4a30      	ldr	r2, [pc, #192]	; (8002390 <HAL_UART_Init+0x164>)
 80022ce:	0200      	lsls	r0, r0, #8
 80022d0:	5cd3      	ldrb	r3, [r2, r3]
 80022d2:	4281      	cmp	r1, r0
 80022d4:	d027      	beq.n	8002326 <HAL_UART_Init+0xfa>
    switch (clocksource)
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d044      	beq.n	8002364 <HAL_UART_Init+0x138>
 80022da:	d813      	bhi.n	8002304 <HAL_UART_Init+0xd8>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0d9      	beq.n	8002294 <HAL_UART_Init+0x68>
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d10a      	bne.n	80022fa <HAL_UART_Init+0xce>
        pclk = (uint32_t) HSI_VALUE;
 80022e4:	482b      	ldr	r0, [pc, #172]	; (8002394 <HAL_UART_Init+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022e6:	6861      	ldr	r1, [r4, #4]
 80022e8:	084b      	lsrs	r3, r1, #1
 80022ea:	1818      	adds	r0, r3, r0
 80022ec:	f7fd ff14 	bl	8000118 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022f0:	0002      	movs	r2, r0
 80022f2:	4b29      	ldr	r3, [pc, #164]	; (8002398 <HAL_UART_Init+0x16c>)
 80022f4:	3a10      	subs	r2, #16
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d910      	bls.n	800231c <HAL_UART_Init+0xf0>
  huart->RxISR = NULL;
 80022fa:	2300      	movs	r3, #0
    return HAL_ERROR;
 80022fc:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80022fe:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8002300:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8002302:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8002304:	2b08      	cmp	r3, #8
 8002306:	d0ee      	beq.n	80022e6 <HAL_UART_Init+0xba>
 8002308:	e7f7      	b.n	80022fa <HAL_UART_Init+0xce>
    huart->Lock = HAL_UNLOCKED;
 800230a:	2278      	movs	r2, #120	; 0x78
 800230c:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800230e:	f7fe fec5 	bl	800109c <HAL_UART_MspInit>
 8002312:	e792      	b.n	800223a <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8002314:	0020      	movs	r0, r4
 8002316:	f7ff fdd3 	bl	8001ec0 <UART_AdvFeatureConfig>
 800231a:	e7c5      	b.n	80022a8 <HAL_UART_Init+0x7c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	60d8      	str	r0, [r3, #12]
  return ret;
 8002320:	e7bc      	b.n	800229c <HAL_UART_Init+0x70>
    return HAL_ERROR;
 8002322:	2001      	movs	r0, #1
 8002324:	e7ed      	b.n	8002302 <HAL_UART_Init+0xd6>
    switch (clocksource)
 8002326:	2b04      	cmp	r3, #4
 8002328:	d01f      	beq.n	800236a <HAL_UART_Init+0x13e>
 800232a:	d816      	bhi.n	800235a <HAL_UART_Init+0x12e>
 800232c:	2b00      	cmp	r3, #0
 800232e:	d022      	beq.n	8002376 <HAL_UART_Init+0x14a>
 8002330:	2b02      	cmp	r3, #2
 8002332:	d1e2      	bne.n	80022fa <HAL_UART_Init+0xce>
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_UART_Init+0x170>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002336:	6861      	ldr	r1, [r4, #4]
 8002338:	0848      	lsrs	r0, r1, #1
 800233a:	18c0      	adds	r0, r0, r3
 800233c:	f7fd feec 	bl	8000118 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002340:	0002      	movs	r2, r0
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_UART_Init+0x16c>)
 8002344:	3a10      	subs	r2, #16
 8002346:	429a      	cmp	r2, r3
 8002348:	d8d7      	bhi.n	80022fa <HAL_UART_Init+0xce>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_UART_Init+0x174>)
        huart->Instance->BRR = brrtemp;
 800234c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800234e:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002350:	0700      	lsls	r0, r0, #28
 8002352:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002354:	4303      	orrs	r3, r0
 8002356:	60d3      	str	r3, [r2, #12]
  return ret;
 8002358:	e7a0      	b.n	800229c <HAL_UART_Init+0x70>
    switch (clocksource)
 800235a:	2b08      	cmp	r3, #8
 800235c:	d1cd      	bne.n	80022fa <HAL_UART_Init+0xce>
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	025b      	lsls	r3, r3, #9
 8002362:	e7e8      	b.n	8002336 <HAL_UART_Init+0x10a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002364:	f7ff fbc2 	bl	8001aec <HAL_RCC_GetSysClockFreq>
        break;
 8002368:	e796      	b.n	8002298 <HAL_UART_Init+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 800236a:	f7ff fbbf 	bl	8001aec <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800236e:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8002370:	2800      	cmp	r0, #0
 8002372:	d1e0      	bne.n	8002336 <HAL_UART_Init+0x10a>
 8002374:	e792      	b.n	800229c <HAL_UART_Init+0x70>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002376:	f7ff fbe3 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
        break;
 800237a:	e7f8      	b.n	800236e <HAL_UART_Init+0x142>
 800237c:	ffff69f3 	.word	0xffff69f3
 8002380:	ffffcfff 	.word	0xffffcfff
 8002384:	fffff4ff 	.word	0xfffff4ff
 8002388:	40021000 	.word	0x40021000
 800238c:	fffff7ff 	.word	0xfffff7ff
 8002390:	0800244c 	.word	0x0800244c
 8002394:	007a1200 	.word	0x007a1200
 8002398:	0000ffef 	.word	0x0000ffef
 800239c:	00f42400 	.word	0x00f42400
 80023a0:	0000fff0 	.word	0x0000fff0

080023a4 <memset>:
 80023a4:	0003      	movs	r3, r0
 80023a6:	1882      	adds	r2, r0, r2
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d100      	bne.n	80023ae <memset+0xa>
 80023ac:	4770      	bx	lr
 80023ae:	7019      	strb	r1, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	e7f9      	b.n	80023a8 <memset+0x4>

080023b4 <__libc_init_array>:
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	2600      	movs	r6, #0
 80023b8:	4c0c      	ldr	r4, [pc, #48]	; (80023ec <__libc_init_array+0x38>)
 80023ba:	4d0d      	ldr	r5, [pc, #52]	; (80023f0 <__libc_init_array+0x3c>)
 80023bc:	1b64      	subs	r4, r4, r5
 80023be:	10a4      	asrs	r4, r4, #2
 80023c0:	42a6      	cmp	r6, r4
 80023c2:	d109      	bne.n	80023d8 <__libc_init_array+0x24>
 80023c4:	2600      	movs	r6, #0
 80023c6:	f000 f819 	bl	80023fc <_init>
 80023ca:	4c0a      	ldr	r4, [pc, #40]	; (80023f4 <__libc_init_array+0x40>)
 80023cc:	4d0a      	ldr	r5, [pc, #40]	; (80023f8 <__libc_init_array+0x44>)
 80023ce:	1b64      	subs	r4, r4, r5
 80023d0:	10a4      	asrs	r4, r4, #2
 80023d2:	42a6      	cmp	r6, r4
 80023d4:	d105      	bne.n	80023e2 <__libc_init_array+0x2e>
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	00b3      	lsls	r3, r6, #2
 80023da:	58eb      	ldr	r3, [r5, r3]
 80023dc:	4798      	blx	r3
 80023de:	3601      	adds	r6, #1
 80023e0:	e7ee      	b.n	80023c0 <__libc_init_array+0xc>
 80023e2:	00b3      	lsls	r3, r6, #2
 80023e4:	58eb      	ldr	r3, [r5, r3]
 80023e6:	4798      	blx	r3
 80023e8:	3601      	adds	r6, #1
 80023ea:	e7f2      	b.n	80023d2 <__libc_init_array+0x1e>
 80023ec:	08002450 	.word	0x08002450
 80023f0:	08002450 	.word	0x08002450
 80023f4:	08002454 	.word	0x08002454
 80023f8:	08002450 	.word	0x08002450

080023fc <_init>:
 80023fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002402:	bc08      	pop	{r3}
 8002404:	469e      	mov	lr, r3
 8002406:	4770      	bx	lr

08002408 <_fini>:
 8002408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240e:	bc08      	pop	{r3}
 8002410:	469e      	mov	lr, r3
 8002412:	4770      	bx	lr
