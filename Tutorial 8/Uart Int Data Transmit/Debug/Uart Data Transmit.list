
Uart Data Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080017a8  080017a8  000117a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017e4  080017e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080017e4  080017e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017e4  080017e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017e4  080017e4  000117e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017e8  080017e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080017f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080017f8  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a95b  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000173d  00000000  00000000  0002a9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00004116  00000000  00000000  0002c10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000004f8  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000760  00000000  00000000  00030720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000e84a  00000000  00000000  00030e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bca0  00000000  00000000  0003f6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00057a08  00000000  00000000  0004b36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d34  00000000  00000000  000a2d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  000a3aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001790 	.word	0x08001790

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001790 	.word	0x08001790

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000224:	222c      	movs	r2, #44	; 0x2c
 8000226:	2100      	movs	r1, #0
 8000228:	a809      	add	r0, sp, #36	; 0x24
 800022a:	f001 fa85 	bl	8001738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022e:	2210      	movs	r2, #16
 8000230:	2100      	movs	r1, #0
 8000232:	4668      	mov	r0, sp
 8000234:	f001 fa80 	bl	8001738 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	2210      	movs	r2, #16
 800023a:	2100      	movs	r1, #0
 800023c:	a804      	add	r0, sp, #16
 800023e:	f001 fa7b 	bl	8001738 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	330e      	adds	r3, #14
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f000 fb0c 	bl	800086c <HAL_RCC_OscConfig>
 8000254:	2800      	cmp	r0, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000258:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800025a:	e7fe      	b.n	800025a <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	2207      	movs	r2, #7
 800025e:	2300      	movs	r3, #0
 8000260:	9200      	str	r2, [sp, #0]
 8000262:	9301      	str	r3, [sp, #4]
 8000264:	2200      	movs	r2, #0
 8000266:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000268:	2100      	movs	r1, #0
 800026a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	9202      	str	r2, [sp, #8]
 800026e:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000270:	f000 fd56 	bl	8000d20 <HAL_RCC_ClockConfig>
 8000274:	2800      	cmp	r0, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x5c>
 8000278:	b672      	cpsid	i
  while (1)
 800027a:	e7fe      	b.n	800027a <SystemClock_Config+0x5a>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800027c:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027e:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000280:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000282:	f000 fe37 	bl	8000ef4 <HAL_RCCEx_PeriphCLKConfig>
 8000286:	2800      	cmp	r0, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x6e>
 800028a:	b672      	cpsid	i
  while (1)
 800028c:	e7fe      	b.n	800028c <SystemClock_Config+0x6c>
}
 800028e:	b014      	add	sp, #80	; 0x50
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <main>:
{
 8000294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000296:	46ce      	mov	lr, r9
 8000298:	4647      	mov	r7, r8
 800029a:	b580      	push	{r7, lr}
 800029c:	b083      	sub	sp, #12
  HAL_Init();
 800029e:	f000 f959 	bl	8000554 <HAL_Init>
  SystemClock_Config();
 80002a2:	f7ff ffbd 	bl	8000220 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	2180      	movs	r1, #128	; 0x80
 80002a8:	4b51      	ldr	r3, [pc, #324]	; (80003f0 <main+0x15c>)
 80002aa:	0289      	lsls	r1, r1, #10
 80002ac:	695a      	ldr	r2, [r3, #20]
  huart1.Instance = USART1;
 80002ae:	4e51      	ldr	r6, [pc, #324]	; (80003f4 <main+0x160>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b0:	430a      	orrs	r2, r1
 80002b2:	615a      	str	r2, [r3, #20]
 80002b4:	695b      	ldr	r3, [r3, #20]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b6:	220c      	movs	r2, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	400b      	ands	r3, r1
 80002ba:	9301      	str	r3, [sp, #4]
 80002bc:	9b01      	ldr	r3, [sp, #4]
  huart1.Instance = USART1;
 80002be:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <main+0x164>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002c0:	0030      	movs	r0, r6
  huart1.Instance = USART1;
 80002c2:	6033      	str	r3, [r6, #0]
  huart1.Init.BaudRate = 9600;
 80002c4:	2396      	movs	r3, #150	; 0x96
 80002c6:	019b      	lsls	r3, r3, #6
 80002c8:	6073      	str	r3, [r6, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ca:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002cc:	6172      	str	r2, [r6, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ce:	60b3      	str	r3, [r6, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002d0:	60f3      	str	r3, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002d2:	6133      	str	r3, [r6, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d4:	61b3      	str	r3, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d6:	61f3      	str	r3, [r6, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002d8:	6233      	str	r3, [r6, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002da:	6273      	str	r3, [r6, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002dc:	f001 f970 	bl	80015c0 <HAL_UART_Init>
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d001      	beq.n	80002e8 <main+0x54>
 80002e4:	b672      	cpsid	i
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <main+0x52>
  else if (num<1000)
 80002e8:	23fa      	movs	r3, #250	; 0xfa
  int value = 0;
 80002ea:	2400      	movs	r4, #0
  else if (num<1000)
 80002ec:	009b      	lsls	r3, r3, #2
     string[1] = 0;                               // None digit
 80002ee:	0027      	movs	r7, r4
  else if (num<1000)
 80002f0:	4698      	mov	r8, r3
 80002f2:	e01d      	b.n	8000330 <main+0x9c>
  if(num<10){
 80002f4:	2c09      	cmp	r4, #9
 80002f6:	dd77      	ble.n	80003e8 <main+0x154>
  else if (num<100)
 80002f8:	2c63      	cmp	r4, #99	; 0x63
 80002fa:	dc22      	bgt.n	8000342 <main+0xae>
    string[0] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 80002fc:	210a      	movs	r1, #10
 80002fe:	0020      	movs	r0, r4
 8000300:	f7ff ff02 	bl	8000108 <__udivsi3>
 8000304:	466b      	mov	r3, sp
 8000306:	3030      	adds	r0, #48	; 0x30
 8000308:	7018      	strb	r0, [r3, #0]
    string[1] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 800030a:	210a      	movs	r1, #10
 800030c:	0020      	movs	r0, r4
 800030e:	f7ff ff81 	bl	8000214 <__aeabi_uidivmod>
 8000312:	466b      	mov	r3, sp
 8000314:	3130      	adds	r1, #48	; 0x30
 8000316:	7059      	strb	r1, [r3, #1]
    string[2] = 0;
 8000318:	709f      	strb	r7, [r3, #2]
	  HAL_UART_Transmit(&huart1, string ,strlen(string), 1000);
 800031a:	23fa      	movs	r3, #250	; 0xfa
 800031c:	2200      	movs	r2, #0
 800031e:	4669      	mov	r1, sp
 8000320:	0030      	movs	r0, r6
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	f000 fe84 	bl	8001030 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000328:	20fa      	movs	r0, #250	; 0xfa
 800032a:	0080      	lsls	r0, r0, #2
 800032c:	f000 f934 	bl	8000598 <HAL_Delay>
    value++;
 8000330:	3401      	adds	r4, #1
	if(value == 20){
 8000332:	2c14      	cmp	r4, #20
 8000334:	d1de      	bne.n	80002f4 <main+0x60>
 8000336:	2330      	movs	r3, #48	; 0x30
		value = 0;
 8000338:	2400      	movs	r4, #0
     string[0] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 800033a:	466a      	mov	r2, sp
 800033c:	7013      	strb	r3, [r2, #0]
     string[1] = 0;                               // None digit
 800033e:	7057      	strb	r7, [r2, #1]
 8000340:	e7eb      	b.n	800031a <main+0x86>
  else if (num<1000)
 8000342:	4544      	cmp	r4, r8
 8000344:	d219      	bcs.n	800037a <main+0xe6>
  string[0] = ( (num/100) % 10) + 48;          // 3digit number print so 1st init we divide 100 mean '1 and 00 ' 3digit than modules 10 + add ascii value 48 which means ascii character '0'
 8000346:	2164      	movs	r1, #100	; 0x64
 8000348:	0020      	movs	r0, r4
 800034a:	f7ff fedd 	bl	8000108 <__udivsi3>
 800034e:	466b      	mov	r3, sp
 8000350:	3030      	adds	r0, #48	; 0x30
 8000352:	7018      	strb	r0, [r3, #0]
  string[1] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000354:	210a      	movs	r1, #10
 8000356:	0020      	movs	r0, r4
 8000358:	f7ff fed6 	bl	8000108 <__udivsi3>
 800035c:	210a      	movs	r1, #10
 800035e:	f7ff ff59 	bl	8000214 <__aeabi_uidivmod>
 8000362:	466b      	mov	r3, sp
 8000364:	3130      	adds	r1, #48	; 0x30
 8000366:	7059      	strb	r1, [r3, #1]
  string[2] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 8000368:	0020      	movs	r0, r4
 800036a:	210a      	movs	r1, #10
 800036c:	f7ff ff52 	bl	8000214 <__aeabi_uidivmod>
 8000370:	466b      	mov	r3, sp
 8000372:	3130      	adds	r1, #48	; 0x30
 8000374:	7099      	strb	r1, [r3, #2]
  string[3] = 0;
 8000376:	70df      	strb	r7, [r3, #3]
 8000378:	e7cf      	b.n	800031a <main+0x86>
    string[0] = ( (num/10000) % 10) + 48;          // 5digit number print so 1st init we divide 10000 mean '1 and 0000 ' 5digit than modules 10 + add ascii value 48 which means ascii character '0'
 800037a:	4920      	ldr	r1, [pc, #128]	; (80003fc <main+0x168>)
 800037c:	0020      	movs	r0, r4
 800037e:	f7ff fec3 	bl	8000108 <__udivsi3>
 8000382:	210a      	movs	r1, #10
 8000384:	f7ff ff46 	bl	8000214 <__aeabi_uidivmod>
 8000388:	3130      	adds	r1, #48	; 0x30
 800038a:	b2cd      	uxtb	r5, r1
    string[1] = ( (num/1000) % 10) + 48;          // 4digit number print so 1st init we divide 1000 mean '1 and 000 ' 4digit than modules 10 + add ascii value 48 which means ascii character '0'
 800038c:	21fa      	movs	r1, #250	; 0xfa
 800038e:	0020      	movs	r0, r4
 8000390:	0089      	lsls	r1, r1, #2
 8000392:	f7ff feb9 	bl	8000108 <__udivsi3>
 8000396:	210a      	movs	r1, #10
 8000398:	f7ff ff3c 	bl	8000214 <__aeabi_uidivmod>
 800039c:	000b      	movs	r3, r1
 800039e:	3330      	adds	r3, #48	; 0x30
    string[0] = ( (num/10000) % 10) + 48;          // 5digit number print so 1st init we divide 10000 mean '1 and 0000 ' 5digit than modules 10 + add ascii value 48 which means ascii character '0'
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	021b      	lsls	r3, r3, #8
 80003a4:	431d      	orrs	r5, r3
 80003a6:	46a9      	mov	r9, r5
    string[2] = ( (num/100) % 10) + 48;          // 3digit number print so 1st init we divide 100 mean '1 and 00 ' 3digit than modules 10 + add ascii value 48 which means ascii character '0'
 80003a8:	2164      	movs	r1, #100	; 0x64
 80003aa:	0020      	movs	r0, r4
 80003ac:	f7ff feac 	bl	8000108 <__udivsi3>
 80003b0:	210a      	movs	r1, #10
 80003b2:	f7ff ff2f 	bl	8000214 <__aeabi_uidivmod>
    string[0] = ( (num/10000) % 10) + 48;          // 5digit number print so 1st init we divide 10000 mean '1 and 0000 ' 5digit than modules 10 + add ascii value 48 which means ascii character '0'
 80003b6:	464b      	mov	r3, r9
    string[2] = ( (num/100) % 10) + 48;          // 3digit number print so 1st init we divide 100 mean '1 and 00 ' 3digit than modules 10 + add ascii value 48 which means ascii character '0'
 80003b8:	3130      	adds	r1, #48	; 0x30
    string[0] = ( (num/10000) % 10) + 48;          // 5digit number print so 1st init we divide 10000 mean '1 and 0000 ' 5digit than modules 10 + add ascii value 48 which means ascii character '0'
 80003ba:	b2cd      	uxtb	r5, r1
    string[3] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 80003bc:	0020      	movs	r0, r4
 80003be:	210a      	movs	r1, #10
    string[0] = ( (num/10000) % 10) + 48;          // 5digit number print so 1st init we divide 10000 mean '1 and 0000 ' 5digit than modules 10 + add ascii value 48 which means ascii character '0'
 80003c0:	042d      	lsls	r5, r5, #16
 80003c2:	431d      	orrs	r5, r3
    string[3] = ( (num/10) % 10) + 48;           // 2digit number print so 1st init we divide 10 mean '1 and 0 ' 2digit than modules 10 +  add ascii value 48 which means ascii character '0'
 80003c4:	f7ff fea0 	bl	8000108 <__udivsi3>
 80003c8:	210a      	movs	r1, #10
 80003ca:	f7ff ff23 	bl	8000214 <__aeabi_uidivmod>
 80003ce:	3130      	adds	r1, #48	; 0x30
    string[0] = ( (num/10000) % 10) + 48;          // 5digit number print so 1st init we divide 10000 mean '1 and 0000 ' 5digit than modules 10 + add ascii value 48 which means ascii character '0'
 80003d0:	0609      	lsls	r1, r1, #24
 80003d2:	430d      	orrs	r5, r1
    string[4] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 80003d4:	0020      	movs	r0, r4
 80003d6:	210a      	movs	r1, #10
    string[0] = ( (num/10000) % 10) + 48;          // 5digit number print so 1st init we divide 10000 mean '1 and 0000 ' 5digit than modules 10 + add ascii value 48 which means ascii character '0'
 80003d8:	9500      	str	r5, [sp, #0]
    string[4] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 80003da:	f7ff ff1b 	bl	8000214 <__aeabi_uidivmod>
 80003de:	466b      	mov	r3, sp
 80003e0:	3130      	adds	r1, #48	; 0x30
 80003e2:	7119      	strb	r1, [r3, #4]
    string[5] = 0;
 80003e4:	715f      	strb	r7, [r3, #5]
}
 80003e6:	e798      	b.n	800031a <main+0x86>
     string[0] = ( num % 10) + 48;                // 1digit number print so 1st init we divide 10 mean '1 and  ' 1digit than modules 10 +  add ascii value 48 which means ascii character '0'
 80003e8:	0023      	movs	r3, r4
 80003ea:	3330      	adds	r3, #48	; 0x30
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	e7a4      	b.n	800033a <main+0xa6>
 80003f0:	40021000 	.word	0x40021000
 80003f4:	20000028 	.word	0x20000028
 80003f8:	40013800 	.word	0x40013800
 80003fc:	00002710 	.word	0x00002710

08000400 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000400:	2201      	movs	r2, #1
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <HAL_MspInit+0x2c>)
{
 8000404:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000406:	6999      	ldr	r1, [r3, #24]
 8000408:	4311      	orrs	r1, r2
 800040a:	6199      	str	r1, [r3, #24]
 800040c:	6999      	ldr	r1, [r3, #24]
 800040e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000410:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	9200      	str	r2, [sp, #0]
 8000414:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	0549      	lsls	r1, r1, #21
 800041a:	430a      	orrs	r2, r1
 800041c:	61da      	str	r2, [r3, #28]
 800041e:	69db      	ldr	r3, [r3, #28]
 8000420:	400b      	ands	r3, r1
 8000422:	9301      	str	r3, [sp, #4]
 8000424:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	b002      	add	sp, #8
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	40021000 	.word	0x40021000

08000430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000430:	b510      	push	{r4, lr}
 8000432:	0004      	movs	r4, r0
 8000434:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	2214      	movs	r2, #20
 8000438:	2100      	movs	r1, #0
 800043a:	a802      	add	r0, sp, #8
 800043c:	f001 f97c 	bl	8001738 <memset>
  if(huart->Instance==USART1)
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <HAL_UART_MspInit+0x60>)
 8000442:	6822      	ldr	r2, [r4, #0]
 8000444:	429a      	cmp	r2, r3
 8000446:	d001      	beq.n	800044c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000448:	b008      	add	sp, #32
 800044a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <HAL_UART_MspInit+0x64>)
 8000450:	01c9      	lsls	r1, r1, #7
 8000452:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8000456:	430a      	orrs	r2, r1
 8000458:	619a      	str	r2, [r3, #24]
 800045a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 800045e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8000462:	9200      	str	r2, [sp, #0]
 8000464:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	0289      	lsls	r1, r1, #10
 800046a:	430a      	orrs	r2, r1
 800046c:	615a      	str	r2, [r3, #20]
 800046e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000470:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	400b      	ands	r3, r1
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000478:	2302      	movs	r3, #2
 800047a:	9202      	str	r2, [sp, #8]
 800047c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800047e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000482:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000484:	3b02      	subs	r3, #2
 8000486:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000488:	f000 f8e4 	bl	8000654 <HAL_GPIO_Init>
}
 800048c:	e7dc      	b.n	8000448 <HAL_UART_MspInit+0x18>
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	40013800 	.word	0x40013800
 8000494:	40021000 	.word	0x40021000

08000498 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000498:	e7fe      	b.n	8000498 <NMI_Handler>
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <HardFault_Handler>
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <PendSV_Handler>:
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004aa:	f000 f863 	bl	8000574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ae:	bd10      	pop	{r4, pc}

080004b0 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80004b0:	4770      	bx	lr
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b4:	480d      	ldr	r0, [pc, #52]	; (80004ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004b8:	f7ff fffa 	bl	80004b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004bc:	480c      	ldr	r0, [pc, #48]	; (80004f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004be:	490d      	ldr	r1, [pc, #52]	; (80004f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c0:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <LoopForever+0xe>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c4:	e002      	b.n	80004cc <LoopCopyDataInit>

080004c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ca:	3304      	adds	r3, #4

080004cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d0:	d3f9      	bcc.n	80004c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d2:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d4:	4c0a      	ldr	r4, [pc, #40]	; (8000500 <LoopForever+0x16>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d8:	e001      	b.n	80004de <LoopFillZerobss>

080004da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004dc:	3204      	adds	r2, #4

080004de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e0:	d3fb      	bcc.n	80004da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004e2:	f001 f931 	bl	8001748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e6:	f7ff fed5 	bl	8000294 <main>

080004ea <LoopForever>:

LoopForever:
    b LoopForever
 80004ea:	e7fe      	b.n	80004ea <LoopForever>
  ldr   r0, =_estack
 80004ec:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004f8:	080017ec 	.word	0x080017ec
  ldr r2, =_sbss
 80004fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000500:	200000b4 	.word	0x200000b4

08000504 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC1_IRQHandler>
	...

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050c:	20fa      	movs	r0, #250	; 0xfa
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_InitTick+0x40>)
 8000510:	0080      	lsls	r0, r0, #2
 8000512:	7819      	ldrb	r1, [r3, #0]
 8000514:	f7ff fdf8 	bl	8000108 <__udivsi3>
 8000518:	4d0c      	ldr	r5, [pc, #48]	; (800054c <HAL_InitTick+0x44>)
 800051a:	0001      	movs	r1, r0
 800051c:	6828      	ldr	r0, [r5, #0]
 800051e:	f7ff fdf3 	bl	8000108 <__udivsi3>
 8000522:	f000 f87d 	bl	8000620 <HAL_SYSTICK_Config>
 8000526:	2800      	cmp	r0, #0
 8000528:	d10c      	bne.n	8000544 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 800052a:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052c:	2c03      	cmp	r4, #3
 800052e:	d900      	bls.n	8000532 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000530:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000532:	3802      	subs	r0, #2
 8000534:	2200      	movs	r2, #0
 8000536:	0021      	movs	r1, r4
 8000538:	f000 f840 	bl	80005bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <HAL_InitTick+0x48>)
 800053e:	2000      	movs	r0, #0
 8000540:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000542:	e7f5      	b.n	8000530 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000544:	2001      	movs	r0, #1
 8000546:	e7f3      	b.n	8000530 <HAL_InitTick+0x28>
 8000548:	20000004 	.word	0x20000004
 800054c:	20000000 	.word	0x20000000
 8000550:	20000008 	.word	0x20000008

08000554 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000554:	2110      	movs	r1, #16
 8000556:	4a06      	ldr	r2, [pc, #24]	; (8000570 <HAL_Init+0x1c>)
{
 8000558:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800055c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055e:	430b      	orrs	r3, r1
 8000560:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000562:	f7ff ffd1 	bl	8000508 <HAL_InitTick>
  HAL_MspInit();
 8000566:	f7ff ff4b 	bl	8000400 <HAL_MspInit>
}
 800056a:	2000      	movs	r0, #0
 800056c:	bd10      	pop	{r4, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	40022000 	.word	0x40022000

08000574 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000574:	4a03      	ldr	r2, [pc, #12]	; (8000584 <HAL_IncTick+0x10>)
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <HAL_IncTick+0x14>)
 8000578:	6811      	ldr	r1, [r2, #0]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	185b      	adds	r3, r3, r1
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	4770      	bx	lr
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	200000b0 	.word	0x200000b0
 8000588:	20000004 	.word	0x20000004

0800058c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800058c:	4b01      	ldr	r3, [pc, #4]	; (8000594 <HAL_GetTick+0x8>)
 800058e:	6818      	ldr	r0, [r3, #0]
}
 8000590:	4770      	bx	lr
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	200000b0 	.word	0x200000b0

08000598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800059c:	f7ff fff6 	bl	800058c <HAL_GetTick>
 80005a0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a2:	1c63      	adds	r3, r4, #1
 80005a4:	d002      	beq.n	80005ac <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80005a6:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <HAL_Delay+0x20>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005ac:	f7ff ffee 	bl	800058c <HAL_GetTick>
 80005b0:	1b40      	subs	r0, r0, r5
 80005b2:	42a0      	cmp	r0, r4
 80005b4:	d3fa      	bcc.n	80005ac <HAL_Delay+0x14>
  {
  }
}
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	20000004 	.word	0x20000004

080005bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005bc:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80005be:	2800      	cmp	r0, #0
 80005c0:	db14      	blt.n	80005ec <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <HAL_NVIC_SetPriority+0x5c>)
 80005c4:	2203      	movs	r2, #3
 80005c6:	469c      	mov	ip, r3
 80005c8:	23ff      	movs	r3, #255	; 0xff
 80005ca:	0884      	lsrs	r4, r0, #2
 80005cc:	4002      	ands	r2, r0
 80005ce:	0018      	movs	r0, r3
 80005d0:	26c0      	movs	r6, #192	; 0xc0
 80005d2:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005d4:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005d6:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005d8:	400b      	ands	r3, r1
 80005da:	4093      	lsls	r3, r2
 80005dc:	00a4      	lsls	r4, r4, #2
 80005de:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005e0:	00b6      	lsls	r6, r6, #2
 80005e2:	59a5      	ldr	r5, [r4, r6]
 80005e4:	4385      	bics	r5, r0
 80005e6:	432b      	orrs	r3, r5
 80005e8:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ec:	4a0b      	ldr	r2, [pc, #44]	; (800061c <HAL_NVIC_SetPriority+0x60>)
 80005ee:	230f      	movs	r3, #15
 80005f0:	4694      	mov	ip, r2
 80005f2:	2203      	movs	r2, #3
 80005f4:	4003      	ands	r3, r0
 80005f6:	4010      	ands	r0, r2
 80005f8:	32fc      	adds	r2, #252	; 0xfc
 80005fa:	0015      	movs	r5, r2
 80005fc:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005fe:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000600:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000602:	400a      	ands	r2, r1
 8000604:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000606:	3b08      	subs	r3, #8
 8000608:	089b      	lsrs	r3, r3, #2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4463      	add	r3, ip
 800060e:	69dc      	ldr	r4, [r3, #28]
 8000610:	43ac      	bics	r4, r5
 8000612:	4322      	orrs	r2, r4
 8000614:	61da      	str	r2, [r3, #28]
 8000616:	e7e8      	b.n	80005ea <HAL_NVIC_SetPriority+0x2e>
 8000618:	e000e100 	.word	0xe000e100
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	1e43      	subs	r3, r0, #1
 8000624:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000626:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000628:	4293      	cmp	r3, r2
 800062a:	d20e      	bcs.n	800064a <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800062c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000632:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000634:	6a03      	ldr	r3, [r0, #32]
 8000636:	0609      	lsls	r1, r1, #24
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	0a1b      	lsrs	r3, r3, #8
 800063c:	430b      	orrs	r3, r1
 800063e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000640:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000642:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000644:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000646:	3307      	adds	r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800064a:	4770      	bx	lr
 800064c:	e000e010 	.word	0xe000e010
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	46de      	mov	lr, fp
 8000658:	4657      	mov	r7, sl
 800065a:	464e      	mov	r6, r9
 800065c:	4645      	mov	r5, r8
 800065e:	b5e0      	push	{r5, r6, r7, lr}
 8000660:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000662:	6809      	ldr	r1, [r1, #0]
 8000664:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000666:	2300      	movs	r3, #0
{
 8000668:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800066a:	2900      	cmp	r1, #0
 800066c:	d07c      	beq.n	8000768 <HAL_GPIO_Init+0x114>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066e:	4c79      	ldr	r4, [pc, #484]	; (8000854 <HAL_GPIO_Init+0x200>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000670:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	46a3      	mov	fp, r4
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000674:	2601      	movs	r6, #1
 8000676:	000c      	movs	r4, r1
 8000678:	409e      	lsls	r6, r3
 800067a:	4034      	ands	r4, r6
 800067c:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 800067e:	4231      	tst	r1, r6
 8000680:	d06c      	beq.n	800075c <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000682:	4654      	mov	r4, sl
 8000684:	2503      	movs	r5, #3
 8000686:	6864      	ldr	r4, [r4, #4]
 8000688:	4025      	ands	r5, r4
 800068a:	46ac      	mov	ip, r5
 800068c:	3d01      	subs	r5, #1
 800068e:	2d01      	cmp	r5, #1
 8000690:	d800      	bhi.n	8000694 <HAL_GPIO_Init+0x40>
 8000692:	e070      	b.n	8000776 <HAL_GPIO_Init+0x122>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000694:	4665      	mov	r5, ip
 8000696:	2d03      	cmp	r5, #3
 8000698:	d000      	beq.n	800069c <HAL_GPIO_Init+0x48>
 800069a:	e0b3      	b.n	8000804 <HAL_GPIO_Init+0x1b0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800069c:	4666      	mov	r6, ip
 800069e:	4096      	lsls	r6, r2
 80006a0:	43f5      	mvns	r5, r6
 80006a2:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 80006a4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80006a6:	9d02      	ldr	r5, [sp, #8]
 80006a8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006aa:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80006ac:	25c0      	movs	r5, #192	; 0xc0
 80006ae:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 80006b0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80006b2:	422c      	tst	r4, r5
 80006b4:	d052      	beq.n	800075c <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	465d      	mov	r5, fp
 80006b8:	2601      	movs	r6, #1
 80006ba:	465f      	mov	r7, fp
 80006bc:	69ad      	ldr	r5, [r5, #24]
 80006be:	4335      	orrs	r5, r6
 80006c0:	61bd      	str	r5, [r7, #24]
 80006c2:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006c4:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4035      	ands	r5, r6
 80006c8:	4e63      	ldr	r6, [pc, #396]	; (8000858 <HAL_GPIO_Init+0x204>)
 80006ca:	9505      	str	r5, [sp, #20]
 80006cc:	46b4      	mov	ip, r6
 80006ce:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006d0:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 80006d2:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006d4:	00bf      	lsls	r7, r7, #2
 80006d6:	00ad      	lsls	r5, r5, #2
 80006d8:	4465      	add	r5, ip
 80006da:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 80006dc:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006de:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 80006e0:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006e2:	4666      	mov	r6, ip
 80006e4:	40b7      	lsls	r7, r6
 80006e6:	003e      	movs	r6, r7
 80006e8:	464f      	mov	r7, r9
 80006ea:	43b7      	bics	r7, r6
 80006ec:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006ee:	2790      	movs	r7, #144	; 0x90
 80006f0:	05ff      	lsls	r7, r7, #23
 80006f2:	42b8      	cmp	r0, r7
 80006f4:	d012      	beq.n	800071c <HAL_GPIO_Init+0xc8>
 80006f6:	4f59      	ldr	r7, [pc, #356]	; (800085c <HAL_GPIO_Init+0x208>)
 80006f8:	42b8      	cmp	r0, r7
 80006fa:	d100      	bne.n	80006fe <HAL_GPIO_Init+0xaa>
 80006fc:	e09b      	b.n	8000836 <HAL_GPIO_Init+0x1e2>
 80006fe:	4f58      	ldr	r7, [pc, #352]	; (8000860 <HAL_GPIO_Init+0x20c>)
 8000700:	42b8      	cmp	r0, r7
 8000702:	d100      	bne.n	8000706 <HAL_GPIO_Init+0xb2>
 8000704:	e09f      	b.n	8000846 <HAL_GPIO_Init+0x1f2>
 8000706:	4f57      	ldr	r7, [pc, #348]	; (8000864 <HAL_GPIO_Init+0x210>)
 8000708:	42b8      	cmp	r0, r7
 800070a:	d100      	bne.n	800070e <HAL_GPIO_Init+0xba>
 800070c:	e08c      	b.n	8000828 <HAL_GPIO_Init+0x1d4>
 800070e:	4666      	mov	r6, ip
 8000710:	2705      	movs	r7, #5
 8000712:	40b7      	lsls	r7, r6
 8000714:	003e      	movs	r6, r7
 8000716:	464f      	mov	r7, r9
 8000718:	4337      	orrs	r7, r6
 800071a:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800071c:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800071e:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000720:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 8000722:	4d51      	ldr	r5, [pc, #324]	; (8000868 <HAL_GPIO_Init+0x214>)
        temp &= ~(iocurrent);
 8000724:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000726:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8000728:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 800072a:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800072c:	423c      	tst	r4, r7
 800072e:	d000      	beq.n	8000732 <HAL_GPIO_Init+0xde>
 8000730:	e077      	b.n	8000822 <HAL_GPIO_Init+0x1ce>
        temp &= ~(iocurrent);
 8000732:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000734:	4f4c      	ldr	r7, [pc, #304]	; (8000868 <HAL_GPIO_Init+0x214>)
 8000736:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8000738:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800073a:	02a7      	lsls	r7, r4, #10
 800073c:	d46e      	bmi.n	800081c <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 800073e:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000740:	4f49      	ldr	r7, [pc, #292]	; (8000868 <HAL_GPIO_Init+0x214>)
 8000742:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000744:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000746:	03a7      	lsls	r7, r4, #14
 8000748:	d465      	bmi.n	8000816 <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 800074a:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800074c:	4f46      	ldr	r7, [pc, #280]	; (8000868 <HAL_GPIO_Init+0x214>)
 800074e:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 8000750:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000752:	03e4      	lsls	r4, r4, #15
 8000754:	d45b      	bmi.n	800080e <HAL_GPIO_Init+0x1ba>
        temp &= ~(iocurrent);
 8000756:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000758:	4c43      	ldr	r4, [pc, #268]	; (8000868 <HAL_GPIO_Init+0x214>)
 800075a:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800075c:	000c      	movs	r4, r1
      }
    }

    position++;
 800075e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000760:	40dc      	lsrs	r4, r3
 8000762:	3202      	adds	r2, #2
 8000764:	2c00      	cmp	r4, #0
 8000766:	d185      	bne.n	8000674 <HAL_GPIO_Init+0x20>
  } 
}
 8000768:	b007      	add	sp, #28
 800076a:	bcf0      	pop	{r4, r5, r6, r7}
 800076c:	46bb      	mov	fp, r7
 800076e:	46b2      	mov	sl, r6
 8000770:	46a9      	mov	r9, r5
 8000772:	46a0      	mov	r8, r4
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000776:	6885      	ldr	r5, [r0, #8]
 8000778:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800077a:	2503      	movs	r5, #3
 800077c:	4095      	lsls	r5, r2
 800077e:	46a8      	mov	r8, r5
 8000780:	43ed      	mvns	r5, r5
 8000782:	464f      	mov	r7, r9
 8000784:	9502      	str	r5, [sp, #8]
 8000786:	4645      	mov	r5, r8
 8000788:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800078a:	4655      	mov	r5, sl
 800078c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800078e:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000790:	002f      	movs	r7, r5
 8000792:	4097      	lsls	r7, r2
 8000794:	46b8      	mov	r8, r7
 8000796:	464f      	mov	r7, r9
 8000798:	4645      	mov	r5, r8
 800079a:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800079c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800079e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007a0:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007a2:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007a4:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007a6:	0926      	lsrs	r6, r4, #4
 80007a8:	402e      	ands	r6, r5
 80007aa:	409e      	lsls	r6, r3
 80007ac:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80007ae:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80007b0:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80007b2:	9d02      	ldr	r5, [sp, #8]
 80007b4:	402e      	ands	r6, r5
 80007b6:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007b8:	4656      	mov	r6, sl
 80007ba:	68b6      	ldr	r6, [r6, #8]
 80007bc:	4647      	mov	r7, r8
 80007be:	4096      	lsls	r6, r2
 80007c0:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80007c2:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007c4:	4667      	mov	r7, ip
 80007c6:	4666      	mov	r6, ip
 80007c8:	4096      	lsls	r6, r2
 80007ca:	2f02      	cmp	r7, #2
 80007cc:	d000      	beq.n	80007d0 <HAL_GPIO_Init+0x17c>
 80007ce:	e769      	b.n	80006a4 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 80007d0:	08dd      	lsrs	r5, r3, #3
 80007d2:	00ad      	lsls	r5, r5, #2
 80007d4:	46ac      	mov	ip, r5
 80007d6:	4484      	add	ip, r0
 80007d8:	4665      	mov	r5, ip
 80007da:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007dc:	2507      	movs	r5, #7
 80007de:	401d      	ands	r5, r3
 80007e0:	00ad      	lsls	r5, r5, #2
 80007e2:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 80007e4:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007e6:	250f      	movs	r5, #15
 80007e8:	4647      	mov	r7, r8
 80007ea:	40bd      	lsls	r5, r7
 80007ec:	9f03      	ldr	r7, [sp, #12]
 80007ee:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007f0:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007f2:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007f4:	4647      	mov	r7, r8
 80007f6:	692d      	ldr	r5, [r5, #16]
 80007f8:	40bd      	lsls	r5, r7
 80007fa:	9f03      	ldr	r7, [sp, #12]
 80007fc:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80007fe:	4665      	mov	r5, ip
 8000800:	622f      	str	r7, [r5, #32]
 8000802:	e74f      	b.n	80006a4 <HAL_GPIO_Init+0x50>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000804:	2503      	movs	r5, #3
 8000806:	4095      	lsls	r5, r2
 8000808:	43ed      	mvns	r5, r5
 800080a:	9502      	str	r5, [sp, #8]
 800080c:	e7d0      	b.n	80007b0 <HAL_GPIO_Init+0x15c>
          temp |= iocurrent;
 800080e:	9c01      	ldr	r4, [sp, #4]
 8000810:	432c      	orrs	r4, r5
 8000812:	0025      	movs	r5, r4
 8000814:	e7a0      	b.n	8000758 <HAL_GPIO_Init+0x104>
          temp |= iocurrent;
 8000816:	9f01      	ldr	r7, [sp, #4]
 8000818:	433d      	orrs	r5, r7
 800081a:	e797      	b.n	800074c <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 800081c:	9f01      	ldr	r7, [sp, #4]
 800081e:	433d      	orrs	r5, r7
 8000820:	e78e      	b.n	8000740 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 8000822:	9f01      	ldr	r7, [sp, #4]
 8000824:	433d      	orrs	r5, r7
 8000826:	e785      	b.n	8000734 <HAL_GPIO_Init+0xe0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000828:	4667      	mov	r7, ip
 800082a:	2603      	movs	r6, #3
 800082c:	40be      	lsls	r6, r7
 800082e:	464f      	mov	r7, r9
 8000830:	4337      	orrs	r7, r6
 8000832:	46b9      	mov	r9, r7
 8000834:	e772      	b.n	800071c <HAL_GPIO_Init+0xc8>
 8000836:	4666      	mov	r6, ip
 8000838:	2701      	movs	r7, #1
 800083a:	40b7      	lsls	r7, r6
 800083c:	003e      	movs	r6, r7
 800083e:	464f      	mov	r7, r9
 8000840:	4337      	orrs	r7, r6
 8000842:	46b9      	mov	r9, r7
 8000844:	e76a      	b.n	800071c <HAL_GPIO_Init+0xc8>
 8000846:	4667      	mov	r7, ip
 8000848:	2602      	movs	r6, #2
 800084a:	40be      	lsls	r6, r7
 800084c:	464f      	mov	r7, r9
 800084e:	4337      	orrs	r7, r6
 8000850:	46b9      	mov	r9, r7
 8000852:	e763      	b.n	800071c <HAL_GPIO_Init+0xc8>
 8000854:	40021000 	.word	0x40021000
 8000858:	40010000 	.word	0x40010000
 800085c:	48000400 	.word	0x48000400
 8000860:	48000800 	.word	0x48000800
 8000864:	48000c00 	.word	0x48000c00
 8000868:	40010400 	.word	0x40010400

0800086c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800086c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086e:	46ce      	mov	lr, r9
 8000870:	4647      	mov	r7, r8
 8000872:	b580      	push	{r7, lr}
 8000874:	0004      	movs	r4, r0
 8000876:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000878:	2800      	cmp	r0, #0
 800087a:	d100      	bne.n	800087e <HAL_RCC_OscConfig+0x12>
 800087c:	e0ee      	b.n	8000a5c <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800087e:	6803      	ldr	r3, [r0, #0]
 8000880:	07da      	lsls	r2, r3, #31
 8000882:	d535      	bpl.n	80008f0 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000884:	210c      	movs	r1, #12
 8000886:	48c3      	ldr	r0, [pc, #780]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 8000888:	6842      	ldr	r2, [r0, #4]
 800088a:	400a      	ands	r2, r1
 800088c:	2a04      	cmp	r2, #4
 800088e:	d100      	bne.n	8000892 <HAL_RCC_OscConfig+0x26>
 8000890:	e101      	b.n	8000a96 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000892:	6842      	ldr	r2, [r0, #4]
 8000894:	4011      	ands	r1, r2
 8000896:	2908      	cmp	r1, #8
 8000898:	d100      	bne.n	800089c <HAL_RCC_OscConfig+0x30>
 800089a:	e0f8      	b.n	8000a8e <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800089c:	6863      	ldr	r3, [r4, #4]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d00f      	beq.n	80008c2 <HAL_RCC_OscConfig+0x56>
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d100      	bne.n	80008a8 <HAL_RCC_OscConfig+0x3c>
 80008a6:	e11e      	b.n	8000ae6 <HAL_RCC_OscConfig+0x27a>
 80008a8:	2b05      	cmp	r3, #5
 80008aa:	d100      	bne.n	80008ae <HAL_RCC_OscConfig+0x42>
 80008ac:	e1a7      	b.n	8000bfe <HAL_RCC_OscConfig+0x392>
 80008ae:	4bb9      	ldr	r3, [pc, #740]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 80008b0:	49b9      	ldr	r1, [pc, #740]	; (8000b98 <HAL_RCC_OscConfig+0x32c>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	400a      	ands	r2, r1
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	49b8      	ldr	r1, [pc, #736]	; (8000b9c <HAL_RCC_OscConfig+0x330>)
 80008bc:	400a      	ands	r2, r1
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	e005      	b.n	80008ce <HAL_RCC_OscConfig+0x62>
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	4ab3      	ldr	r2, [pc, #716]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 80008c6:	025b      	lsls	r3, r3, #9
 80008c8:	6811      	ldr	r1, [r2, #0]
 80008ca:	430b      	orrs	r3, r1
 80008cc:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ce:	f7ff fe5d 	bl	800058c <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80008d4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d6:	4faf      	ldr	r7, [pc, #700]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 80008d8:	02b6      	lsls	r6, r6, #10
 80008da:	e005      	b.n	80008e8 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008dc:	f7ff fe56 	bl	800058c <HAL_GetTick>
 80008e0:	1b40      	subs	r0, r0, r5
 80008e2:	2864      	cmp	r0, #100	; 0x64
 80008e4:	d900      	bls.n	80008e8 <HAL_RCC_OscConfig+0x7c>
 80008e6:	e0fc      	b.n	8000ae2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	4233      	tst	r3, r6
 80008ec:	d0f6      	beq.n	80008dc <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ee:	6823      	ldr	r3, [r4, #0]
 80008f0:	079a      	lsls	r2, r3, #30
 80008f2:	d529      	bpl.n	8000948 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008f4:	220c      	movs	r2, #12
 80008f6:	49a7      	ldr	r1, [pc, #668]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 80008f8:	6848      	ldr	r0, [r1, #4]
 80008fa:	4202      	tst	r2, r0
 80008fc:	d100      	bne.n	8000900 <HAL_RCC_OscConfig+0x94>
 80008fe:	e0a6      	b.n	8000a4e <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000900:	6848      	ldr	r0, [r1, #4]
 8000902:	4002      	ands	r2, r0
 8000904:	2a08      	cmp	r2, #8
 8000906:	d100      	bne.n	800090a <HAL_RCC_OscConfig+0x9e>
 8000908:	e09d      	b.n	8000a46 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800090a:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800090c:	4da1      	ldr	r5, [pc, #644]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800090e:	2b00      	cmp	r3, #0
 8000910:	d100      	bne.n	8000914 <HAL_RCC_OscConfig+0xa8>
 8000912:	e11f      	b.n	8000b54 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8000914:	2201      	movs	r2, #1
 8000916:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000918:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 800091a:	4313      	orrs	r3, r2
 800091c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800091e:	f7ff fe35 	bl	800058c <HAL_GetTick>
 8000922:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000924:	e005      	b.n	8000932 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000926:	f7ff fe31 	bl	800058c <HAL_GetTick>
 800092a:	1b80      	subs	r0, r0, r6
 800092c:	2802      	cmp	r0, #2
 800092e:	d900      	bls.n	8000932 <HAL_RCC_OscConfig+0xc6>
 8000930:	e0d7      	b.n	8000ae2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000932:	682b      	ldr	r3, [r5, #0]
 8000934:	421f      	tst	r7, r3
 8000936:	d0f6      	beq.n	8000926 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000938:	21f8      	movs	r1, #248	; 0xf8
 800093a:	682a      	ldr	r2, [r5, #0]
 800093c:	6923      	ldr	r3, [r4, #16]
 800093e:	438a      	bics	r2, r1
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	4313      	orrs	r3, r2
 8000944:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000946:	6823      	ldr	r3, [r4, #0]
 8000948:	071a      	lsls	r2, r3, #28
 800094a:	d42d      	bmi.n	80009a8 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800094c:	075a      	lsls	r2, r3, #29
 800094e:	d544      	bpl.n	80009da <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000950:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000952:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000954:	4b8f      	ldr	r3, [pc, #572]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 8000956:	0552      	lsls	r2, r2, #21
 8000958:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800095a:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800095c:	4211      	tst	r1, r2
 800095e:	d108      	bne.n	8000972 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	69d9      	ldr	r1, [r3, #28]
 8000962:	4311      	orrs	r1, r2
 8000964:	61d9      	str	r1, [r3, #28]
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	4013      	ands	r3, r2
 800096a:	9301      	str	r3, [sp, #4]
 800096c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800096e:	2301      	movs	r3, #1
 8000970:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000972:	2780      	movs	r7, #128	; 0x80
 8000974:	4e8a      	ldr	r6, [pc, #552]	; (8000ba0 <HAL_RCC_OscConfig+0x334>)
 8000976:	007f      	lsls	r7, r7, #1
 8000978:	6833      	ldr	r3, [r6, #0]
 800097a:	423b      	tst	r3, r7
 800097c:	d100      	bne.n	8000980 <HAL_RCC_OscConfig+0x114>
 800097e:	e094      	b.n	8000aaa <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000980:	68a3      	ldr	r3, [r4, #8]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d100      	bne.n	8000988 <HAL_RCC_OscConfig+0x11c>
 8000986:	e0f8      	b.n	8000b7a <HAL_RCC_OscConfig+0x30e>
 8000988:	2b00      	cmp	r3, #0
 800098a:	d100      	bne.n	800098e <HAL_RCC_OscConfig+0x122>
 800098c:	e0c4      	b.n	8000b18 <HAL_RCC_OscConfig+0x2ac>
 800098e:	2b05      	cmp	r3, #5
 8000990:	d100      	bne.n	8000994 <HAL_RCC_OscConfig+0x128>
 8000992:	e140      	b.n	8000c16 <HAL_RCC_OscConfig+0x3aa>
 8000994:	2101      	movs	r1, #1
 8000996:	4b7f      	ldr	r3, [pc, #508]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 8000998:	6a1a      	ldr	r2, [r3, #32]
 800099a:	438a      	bics	r2, r1
 800099c:	621a      	str	r2, [r3, #32]
 800099e:	6a1a      	ldr	r2, [r3, #32]
 80009a0:	3103      	adds	r1, #3
 80009a2:	438a      	bics	r2, r1
 80009a4:	621a      	str	r2, [r3, #32]
 80009a6:	e0ec      	b.n	8000b82 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009a8:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 80009aa:	4d7a      	ldr	r5, [pc, #488]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d05b      	beq.n	8000a68 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 80009b0:	2201      	movs	r2, #1
 80009b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009b4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80009b6:	4313      	orrs	r3, r2
 80009b8:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80009ba:	f7ff fde7 	bl	800058c <HAL_GetTick>
 80009be:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009c0:	e005      	b.n	80009ce <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009c2:	f7ff fde3 	bl	800058c <HAL_GetTick>
 80009c6:	1b80      	subs	r0, r0, r6
 80009c8:	2802      	cmp	r0, #2
 80009ca:	d900      	bls.n	80009ce <HAL_RCC_OscConfig+0x162>
 80009cc:	e089      	b.n	8000ae2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80009d0:	421f      	tst	r7, r3
 80009d2:	d0f6      	beq.n	80009c2 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	075a      	lsls	r2, r3, #29
 80009d8:	d4ba      	bmi.n	8000950 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80009da:	06db      	lsls	r3, r3, #27
 80009dc:	d512      	bpl.n	8000a04 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80009de:	6963      	ldr	r3, [r4, #20]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d100      	bne.n	80009e6 <HAL_RCC_OscConfig+0x17a>
 80009e4:	e13d      	b.n	8000c62 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80009e6:	3305      	adds	r3, #5
 80009e8:	d000      	beq.n	80009ec <HAL_RCC_OscConfig+0x180>
 80009ea:	e0e9      	b.n	8000bc0 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80009ec:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80009ee:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80009f0:	4a68      	ldr	r2, [pc, #416]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 80009f2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80009f4:	438b      	bics	r3, r1
 80009f6:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80009f8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80009fa:	69a3      	ldr	r3, [r4, #24]
 80009fc:	4381      	bics	r1, r0
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	430b      	orrs	r3, r1
 8000a02:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a04:	6a23      	ldr	r3, [r4, #32]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d01b      	beq.n	8000a42 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	4d61      	ldr	r5, [pc, #388]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 8000a0e:	6869      	ldr	r1, [r5, #4]
 8000a10:	400a      	ands	r2, r1
 8000a12:	2a08      	cmp	r2, #8
 8000a14:	d100      	bne.n	8000a18 <HAL_RCC_OscConfig+0x1ac>
 8000a16:	e108      	b.n	8000c2a <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d100      	bne.n	8000a1e <HAL_RCC_OscConfig+0x1b2>
 8000a1c:	e13f      	b.n	8000c9e <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a1e:	682b      	ldr	r3, [r5, #0]
 8000a20:	4a60      	ldr	r2, [pc, #384]	; (8000ba4 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a22:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000a24:	4013      	ands	r3, r2
 8000a26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a28:	f7ff fdb0 	bl	800058c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a2c:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8000a2e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a30:	e004      	b.n	8000a3c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a32:	f7ff fdab 	bl	800058c <HAL_GetTick>
 8000a36:	1b00      	subs	r0, r0, r4
 8000a38:	2802      	cmp	r0, #2
 8000a3a:	d852      	bhi.n	8000ae2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	4233      	tst	r3, r6
 8000a40:	d1f7      	bne.n	8000a32 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8000a42:	2000      	movs	r0, #0
 8000a44:	e00b      	b.n	8000a5e <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a46:	684a      	ldr	r2, [r1, #4]
 8000a48:	03d2      	lsls	r2, r2, #15
 8000a4a:	d500      	bpl.n	8000a4e <HAL_RCC_OscConfig+0x1e2>
 8000a4c:	e75d      	b.n	800090a <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a4e:	4a51      	ldr	r2, [pc, #324]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 8000a50:	6812      	ldr	r2, [r2, #0]
 8000a52:	0792      	lsls	r2, r2, #30
 8000a54:	d539      	bpl.n	8000aca <HAL_RCC_OscConfig+0x25e>
 8000a56:	68e2      	ldr	r2, [r4, #12]
 8000a58:	2a01      	cmp	r2, #1
 8000a5a:	d036      	beq.n	8000aca <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8000a5c:	2001      	movs	r0, #1
}
 8000a5e:	b003      	add	sp, #12
 8000a60:	bcc0      	pop	{r6, r7}
 8000a62:	46b9      	mov	r9, r7
 8000a64:	46b0      	mov	r8, r6
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8000a68:	2201      	movs	r2, #1
 8000a6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a6c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000a6e:	4393      	bics	r3, r2
 8000a70:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000a72:	f7ff fd8b 	bl	800058c <HAL_GetTick>
 8000a76:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a78:	e004      	b.n	8000a84 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a7a:	f7ff fd87 	bl	800058c <HAL_GetTick>
 8000a7e:	1b80      	subs	r0, r0, r6
 8000a80:	2802      	cmp	r0, #2
 8000a82:	d82e      	bhi.n	8000ae2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000a86:	421f      	tst	r7, r3
 8000a88:	d1f7      	bne.n	8000a7a <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	e7a3      	b.n	80009d6 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a8e:	6842      	ldr	r2, [r0, #4]
 8000a90:	03d2      	lsls	r2, r2, #15
 8000a92:	d400      	bmi.n	8000a96 <HAL_RCC_OscConfig+0x22a>
 8000a94:	e702      	b.n	800089c <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a96:	4a3f      	ldr	r2, [pc, #252]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	0392      	lsls	r2, r2, #14
 8000a9c:	d400      	bmi.n	8000aa0 <HAL_RCC_OscConfig+0x234>
 8000a9e:	e727      	b.n	80008f0 <HAL_RCC_OscConfig+0x84>
 8000aa0:	6862      	ldr	r2, [r4, #4]
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	d000      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x23c>
 8000aa6:	e723      	b.n	80008f0 <HAL_RCC_OscConfig+0x84>
 8000aa8:	e7d8      	b.n	8000a5c <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aaa:	6833      	ldr	r3, [r6, #0]
 8000aac:	433b      	orrs	r3, r7
 8000aae:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ab0:	f7ff fd6c 	bl	800058c <HAL_GetTick>
 8000ab4:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ab6:	e004      	b.n	8000ac2 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ab8:	f7ff fd68 	bl	800058c <HAL_GetTick>
 8000abc:	1b40      	subs	r0, r0, r5
 8000abe:	2864      	cmp	r0, #100	; 0x64
 8000ac0:	d80f      	bhi.n	8000ae2 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ac2:	6833      	ldr	r3, [r6, #0]
 8000ac4:	423b      	tst	r3, r7
 8000ac6:	d0f7      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x24c>
 8000ac8:	e75a      	b.n	8000980 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aca:	25f8      	movs	r5, #248	; 0xf8
 8000acc:	4831      	ldr	r0, [pc, #196]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 8000ace:	6922      	ldr	r2, [r4, #16]
 8000ad0:	6801      	ldr	r1, [r0, #0]
 8000ad2:	00d2      	lsls	r2, r2, #3
 8000ad4:	43a9      	bics	r1, r5
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ada:	071a      	lsls	r2, r3, #28
 8000adc:	d400      	bmi.n	8000ae0 <HAL_RCC_OscConfig+0x274>
 8000ade:	e735      	b.n	800094c <HAL_RCC_OscConfig+0xe0>
 8000ae0:	e762      	b.n	80009a8 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	e7bb      	b.n	8000a5e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae6:	4d2b      	ldr	r5, [pc, #172]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 8000ae8:	4a2b      	ldr	r2, [pc, #172]	; (8000b98 <HAL_RCC_OscConfig+0x32c>)
 8000aea:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aec:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aee:	4013      	ands	r3, r2
 8000af0:	602b      	str	r3, [r5, #0]
 8000af2:	682b      	ldr	r3, [r5, #0]
 8000af4:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af6:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af8:	4013      	ands	r3, r2
 8000afa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000afc:	f7ff fd46 	bl	800058c <HAL_GetTick>
 8000b00:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b02:	e004      	b.n	8000b0e <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b04:	f7ff fd42 	bl	800058c <HAL_GetTick>
 8000b08:	1b80      	subs	r0, r0, r6
 8000b0a:	2864      	cmp	r0, #100	; 0x64
 8000b0c:	d8e9      	bhi.n	8000ae2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b0e:	682b      	ldr	r3, [r5, #0]
 8000b10:	423b      	tst	r3, r7
 8000b12:	d1f7      	bne.n	8000b04 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	e6eb      	b.n	80008f0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4e1e      	ldr	r6, [pc, #120]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b1c:	4d22      	ldr	r5, [pc, #136]	; (8000ba8 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b1e:	6a33      	ldr	r3, [r6, #32]
 8000b20:	4393      	bics	r3, r2
 8000b22:	6233      	str	r3, [r6, #32]
 8000b24:	6a33      	ldr	r3, [r6, #32]
 8000b26:	3203      	adds	r2, #3
 8000b28:	4393      	bics	r3, r2
 8000b2a:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8000b2c:	f7ff fd2e 	bl	800058c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b30:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8000b32:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b34:	4698      	mov	r8, r3
 8000b36:	e004      	b.n	8000b42 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b38:	f7ff fd28 	bl	800058c <HAL_GetTick>
 8000b3c:	1bc0      	subs	r0, r0, r7
 8000b3e:	42a8      	cmp	r0, r5
 8000b40:	d8cf      	bhi.n	8000ae2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b42:	4642      	mov	r2, r8
 8000b44:	6a33      	ldr	r3, [r6, #32]
 8000b46:	421a      	tst	r2, r3
 8000b48:	d1f6      	bne.n	8000b38 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8000b4a:	464b      	mov	r3, r9
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d04f      	beq.n	8000bf0 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	e742      	b.n	80009da <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8000b54:	2201      	movs	r2, #1
 8000b56:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b58:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000b5a:	4393      	bics	r3, r2
 8000b5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b5e:	f7ff fd15 	bl	800058c <HAL_GetTick>
 8000b62:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b64:	e004      	b.n	8000b70 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b66:	f7ff fd11 	bl	800058c <HAL_GetTick>
 8000b6a:	1b80      	subs	r0, r0, r6
 8000b6c:	2802      	cmp	r0, #2
 8000b6e:	d8b8      	bhi.n	8000ae2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b70:	682b      	ldr	r3, [r5, #0]
 8000b72:	421f      	tst	r7, r3
 8000b74:	d1f7      	bne.n	8000b66 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	e6e6      	b.n	8000948 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b7a:	4906      	ldr	r1, [pc, #24]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
 8000b7c:	6a0a      	ldr	r2, [r1, #32]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000b82:	f7ff fd03 	bl	800058c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b86:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8000b88:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b8a:	4698      	mov	r8, r3
 8000b8c:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b8e:	4d06      	ldr	r5, [pc, #24]	; (8000ba8 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b90:	e011      	b.n	8000bb6 <HAL_RCC_OscConfig+0x34a>
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	40021000 	.word	0x40021000
 8000b98:	fffeffff 	.word	0xfffeffff
 8000b9c:	fffbffff 	.word	0xfffbffff
 8000ba0:	40007000 	.word	0x40007000
 8000ba4:	feffffff 	.word	0xfeffffff
 8000ba8:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bac:	f7ff fcee 	bl	800058c <HAL_GetTick>
 8000bb0:	1b80      	subs	r0, r0, r6
 8000bb2:	42a8      	cmp	r0, r5
 8000bb4:	d895      	bhi.n	8000ae2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	6a1b      	ldr	r3, [r3, #32]
 8000bba:	421f      	tst	r7, r3
 8000bbc:	d0f6      	beq.n	8000bac <HAL_RCC_OscConfig+0x340>
 8000bbe:	e7c4      	b.n	8000b4a <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	4d53      	ldr	r5, [pc, #332]	; (8000d10 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bc4:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bc6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000bcc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000bce:	3a03      	subs	r2, #3
 8000bd0:	4393      	bics	r3, r2
 8000bd2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000bd4:	f7ff fcda 	bl	800058c <HAL_GetTick>
 8000bd8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bda:	e005      	b.n	8000be8 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bdc:	f7ff fcd6 	bl	800058c <HAL_GetTick>
 8000be0:	1b80      	subs	r0, r0, r6
 8000be2:	2802      	cmp	r0, #2
 8000be4:	d900      	bls.n	8000be8 <HAL_RCC_OscConfig+0x37c>
 8000be6:	e77c      	b.n	8000ae2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000be8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000bea:	421f      	tst	r7, r3
 8000bec:	d1f6      	bne.n	8000bdc <HAL_RCC_OscConfig+0x370>
 8000bee:	e709      	b.n	8000a04 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bf0:	4a47      	ldr	r2, [pc, #284]	; (8000d10 <HAL_RCC_OscConfig+0x4a4>)
 8000bf2:	4948      	ldr	r1, [pc, #288]	; (8000d14 <HAL_RCC_OscConfig+0x4a8>)
 8000bf4:	69d3      	ldr	r3, [r2, #28]
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	e6ed      	b.n	80009da <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfe:	2280      	movs	r2, #128	; 0x80
 8000c00:	4b43      	ldr	r3, [pc, #268]	; (8000d10 <HAL_RCC_OscConfig+0x4a4>)
 8000c02:	02d2      	lsls	r2, r2, #11
 8000c04:	6819      	ldr	r1, [r3, #0]
 8000c06:	430a      	orrs	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	0252      	lsls	r2, r2, #9
 8000c10:	430a      	orrs	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e65b      	b.n	80008ce <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c16:	2104      	movs	r1, #4
 8000c18:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <HAL_RCC_OscConfig+0x4a4>)
 8000c1a:	6a1a      	ldr	r2, [r3, #32]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	621a      	str	r2, [r3, #32]
 8000c20:	6a1a      	ldr	r2, [r3, #32]
 8000c22:	3903      	subs	r1, #3
 8000c24:	430a      	orrs	r2, r1
 8000c26:	621a      	str	r2, [r3, #32]
 8000c28:	e7ab      	b.n	8000b82 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d100      	bne.n	8000c30 <HAL_RCC_OscConfig+0x3c4>
 8000c2e:	e715      	b.n	8000a5c <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c30:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8000c32:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000c36:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8000c38:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8000c3a:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d000      	beq.n	8000c44 <HAL_RCC_OscConfig+0x3d8>
 8000c42:	e70c      	b.n	8000a5e <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000c44:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000c48:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d000      	beq.n	8000c50 <HAL_RCC_OscConfig+0x3e4>
 8000c4e:	e706      	b.n	8000a5e <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000c50:	23f0      	movs	r3, #240	; 0xf0
 8000c52:	039b      	lsls	r3, r3, #14
 8000c54:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000c56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c58:	1ad2      	subs	r2, r2, r3
 8000c5a:	1e53      	subs	r3, r2, #1
 8000c5c:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 8000c5e:	b2d0      	uxtb	r0, r2
 8000c60:	e6fd      	b.n	8000a5e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c62:	2104      	movs	r1, #4
 8000c64:	4d2a      	ldr	r5, [pc, #168]	; (8000d10 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c66:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c68:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000c6e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c70:	4313      	orrs	r3, r2
 8000c72:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c74:	f7ff fc8a 	bl	800058c <HAL_GetTick>
 8000c78:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c7a:	e005      	b.n	8000c88 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c7c:	f7ff fc86 	bl	800058c <HAL_GetTick>
 8000c80:	1b80      	subs	r0, r0, r6
 8000c82:	2802      	cmp	r0, #2
 8000c84:	d900      	bls.n	8000c88 <HAL_RCC_OscConfig+0x41c>
 8000c86:	e72c      	b.n	8000ae2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c88:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c8a:	421f      	tst	r7, r3
 8000c8c:	d0f6      	beq.n	8000c7c <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c8e:	21f8      	movs	r1, #248	; 0xf8
 8000c90:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c92:	69a3      	ldr	r3, [r4, #24]
 8000c94:	438a      	bics	r2, r1
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	636b      	str	r3, [r5, #52]	; 0x34
 8000c9c:	e6b2      	b.n	8000a04 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8000c9e:	682b      	ldr	r3, [r5, #0]
 8000ca0:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ca8:	f7ff fc70 	bl	800058c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cac:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8000cae:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cb0:	e005      	b.n	8000cbe <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cb2:	f7ff fc6b 	bl	800058c <HAL_GetTick>
 8000cb6:	1b80      	subs	r0, r0, r6
 8000cb8:	2802      	cmp	r0, #2
 8000cba:	d900      	bls.n	8000cbe <HAL_RCC_OscConfig+0x452>
 8000cbc:	e711      	b.n	8000ae2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cbe:	682b      	ldr	r3, [r5, #0]
 8000cc0:	423b      	tst	r3, r7
 8000cc2:	d1f6      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cc8:	4e11      	ldr	r6, [pc, #68]	; (8000d10 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cca:	4393      	bics	r3, r2
 8000ccc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000cd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000cd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cd6:	686a      	ldr	r2, [r5, #4]
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	4910      	ldr	r1, [pc, #64]	; (8000d1c <HAL_RCC_OscConfig+0x4b0>)
 8000cdc:	400a      	ands	r2, r1
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	682a      	ldr	r2, [r5, #0]
 8000ce6:	045b      	lsls	r3, r3, #17
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cec:	f7ff fc4e 	bl	800058c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cf0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000cf2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cf4:	04ad      	lsls	r5, r5, #18
 8000cf6:	e005      	b.n	8000d04 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cf8:	f7ff fc48 	bl	800058c <HAL_GetTick>
 8000cfc:	1b00      	subs	r0, r0, r4
 8000cfe:	2802      	cmp	r0, #2
 8000d00:	d900      	bls.n	8000d04 <HAL_RCC_OscConfig+0x498>
 8000d02:	e6ee      	b.n	8000ae2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d04:	6833      	ldr	r3, [r6, #0]
 8000d06:	422b      	tst	r3, r5
 8000d08:	d0f6      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	e6a7      	b.n	8000a5e <HAL_RCC_OscConfig+0x1f2>
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40021000 	.word	0x40021000
 8000d14:	efffffff 	.word	0xefffffff
 8000d18:	feffffff 	.word	0xfeffffff
 8000d1c:	ffc2ffff 	.word	0xffc2ffff

08000d20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d22:	46ce      	mov	lr, r9
 8000d24:	4647      	mov	r7, r8
 8000d26:	0004      	movs	r4, r0
 8000d28:	000d      	movs	r5, r1
 8000d2a:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d00d      	beq.n	8000d4c <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d30:	2301      	movs	r3, #1
 8000d32:	494a      	ldr	r1, [pc, #296]	; (8000e5c <HAL_RCC_ClockConfig+0x13c>)
 8000d34:	680a      	ldr	r2, [r1, #0]
 8000d36:	401a      	ands	r2, r3
 8000d38:	42aa      	cmp	r2, r5
 8000d3a:	d20c      	bcs.n	8000d56 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d3c:	680a      	ldr	r2, [r1, #0]
 8000d3e:	439a      	bics	r2, r3
 8000d40:	432a      	orrs	r2, r5
 8000d42:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d44:	680a      	ldr	r2, [r1, #0]
 8000d46:	4013      	ands	r3, r2
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d004      	beq.n	8000d56 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8000d4c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8000d4e:	bcc0      	pop	{r6, r7}
 8000d50:	46b9      	mov	r9, r7
 8000d52:	46b0      	mov	r8, r6
 8000d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d56:	6823      	ldr	r3, [r4, #0]
 8000d58:	079a      	lsls	r2, r3, #30
 8000d5a:	d50e      	bpl.n	8000d7a <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d5c:	075a      	lsls	r2, r3, #29
 8000d5e:	d505      	bpl.n	8000d6c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000d60:	22e0      	movs	r2, #224	; 0xe0
 8000d62:	493f      	ldr	r1, [pc, #252]	; (8000e60 <HAL_RCC_ClockConfig+0x140>)
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	6848      	ldr	r0, [r1, #4]
 8000d68:	4302      	orrs	r2, r0
 8000d6a:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d6c:	20f0      	movs	r0, #240	; 0xf0
 8000d6e:	493c      	ldr	r1, [pc, #240]	; (8000e60 <HAL_RCC_ClockConfig+0x140>)
 8000d70:	684a      	ldr	r2, [r1, #4]
 8000d72:	4382      	bics	r2, r0
 8000d74:	68a0      	ldr	r0, [r4, #8]
 8000d76:	4302      	orrs	r2, r0
 8000d78:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d7a:	07db      	lsls	r3, r3, #31
 8000d7c:	d522      	bpl.n	8000dc4 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7e:	4b38      	ldr	r3, [pc, #224]	; (8000e60 <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d80:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d82:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d84:	2a01      	cmp	r2, #1
 8000d86:	d05b      	beq.n	8000e40 <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d88:	2a02      	cmp	r2, #2
 8000d8a:	d056      	beq.n	8000e3a <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d8c:	079b      	lsls	r3, r3, #30
 8000d8e:	d5dd      	bpl.n	8000d4c <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d90:	2103      	movs	r1, #3
 8000d92:	4e33      	ldr	r6, [pc, #204]	; (8000e60 <HAL_RCC_ClockConfig+0x140>)
 8000d94:	6873      	ldr	r3, [r6, #4]
 8000d96:	438b      	bics	r3, r1
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d9c:	f7ff fbf6 	bl	800058c <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000da0:	230c      	movs	r3, #12
 8000da2:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 8000da6:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da8:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000daa:	e004      	b.n	8000db6 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dac:	f7ff fbee 	bl	800058c <HAL_GetTick>
 8000db0:	1bc0      	subs	r0, r0, r7
 8000db2:	4548      	cmp	r0, r9
 8000db4:	d847      	bhi.n	8000e46 <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000db6:	4643      	mov	r3, r8
 8000db8:	6872      	ldr	r2, [r6, #4]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	6863      	ldr	r3, [r4, #4]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d1f3      	bne.n	8000dac <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <HAL_RCC_ClockConfig+0x13c>)
 8000dc8:	6813      	ldr	r3, [r2, #0]
 8000dca:	400b      	ands	r3, r1
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d905      	bls.n	8000ddc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dd0:	6813      	ldr	r3, [r2, #0]
 8000dd2:	438b      	bics	r3, r1
 8000dd4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dd6:	6813      	ldr	r3, [r2, #0]
 8000dd8:	4219      	tst	r1, r3
 8000dda:	d1b7      	bne.n	8000d4c <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	075b      	lsls	r3, r3, #29
 8000de0:	d506      	bpl.n	8000df0 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000de2:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <HAL_RCC_ClockConfig+0x140>)
 8000de4:	4920      	ldr	r1, [pc, #128]	; (8000e68 <HAL_RCC_ClockConfig+0x148>)
 8000de6:	6853      	ldr	r3, [r2, #4]
 8000de8:	400b      	ands	r3, r1
 8000dea:	68e1      	ldr	r1, [r4, #12]
 8000dec:	430b      	orrs	r3, r1
 8000dee:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000df0:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8000df2:	491b      	ldr	r1, [pc, #108]	; (8000e60 <HAL_RCC_ClockConfig+0x140>)
 8000df4:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000df6:	4013      	ands	r3, r2
 8000df8:	2b08      	cmp	r3, #8
 8000dfa:	d00e      	beq.n	8000e1a <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000dfc:	481b      	ldr	r0, [pc, #108]	; (8000e6c <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_RCC_ClockConfig+0x140>)
 8000e00:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <HAL_RCC_ClockConfig+0x150>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	491b      	ldr	r1, [pc, #108]	; (8000e74 <HAL_RCC_ClockConfig+0x154>)
 8000e06:	061b      	lsls	r3, r3, #24
 8000e08:	0f1b      	lsrs	r3, r3, #28
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
 8000e0c:	40d8      	lsrs	r0, r3
 8000e0e:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f7ff fb79 	bl	8000508 <HAL_InitTick>
  return HAL_OK;
 8000e16:	2000      	movs	r0, #0
 8000e18:	e799      	b.n	8000d4e <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000e1a:	250f      	movs	r5, #15
 8000e1c:	4816      	ldr	r0, [pc, #88]	; (8000e78 <HAL_RCC_ClockConfig+0x158>)
 8000e1e:	0c93      	lsrs	r3, r2, #18
 8000e20:	402b      	ands	r3, r5
 8000e22:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000e24:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000e26:	03d2      	lsls	r2, r2, #15
 8000e28:	d50f      	bpl.n	8000e4a <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_RCC_ClockConfig+0x15c>)
 8000e2c:	400d      	ands	r5, r1
 8000e2e:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000e30:	480e      	ldr	r0, [pc, #56]	; (8000e6c <HAL_RCC_ClockConfig+0x14c>)
 8000e32:	f7ff f969 	bl	8000108 <__udivsi3>
 8000e36:	4360      	muls	r0, r4
 8000e38:	e7e1      	b.n	8000dfe <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e3a:	019b      	lsls	r3, r3, #6
 8000e3c:	d4a8      	bmi.n	8000d90 <HAL_RCC_ClockConfig+0x70>
 8000e3e:	e785      	b.n	8000d4c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e40:	039b      	lsls	r3, r3, #14
 8000e42:	d4a5      	bmi.n	8000d90 <HAL_RCC_ClockConfig+0x70>
 8000e44:	e782      	b.n	8000d4c <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8000e46:	2003      	movs	r0, #3
 8000e48:	e781      	b.n	8000d4e <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000e4a:	0163      	lsls	r3, r4, #5
 8000e4c:	1b1b      	subs	r3, r3, r4
 8000e4e:	0198      	lsls	r0, r3, #6
 8000e50:	1ac0      	subs	r0, r0, r3
 8000e52:	00c0      	lsls	r0, r0, #3
 8000e54:	1900      	adds	r0, r0, r4
 8000e56:	0200      	lsls	r0, r0, #8
 8000e58:	e7d1      	b.n	8000dfe <HAL_RCC_ClockConfig+0xde>
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	40022000 	.word	0x40022000
 8000e60:	40021000 	.word	0x40021000
 8000e64:	00001388 	.word	0x00001388
 8000e68:	fffff8ff 	.word	0xfffff8ff
 8000e6c:	007a1200 	.word	0x007a1200
 8000e70:	080017a8 	.word	0x080017a8
 8000e74:	20000000 	.word	0x20000000
 8000e78:	080017c0 	.word	0x080017c0
 8000e7c:	080017d0 	.word	0x080017d0

08000e80 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8000e80:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8000e82:	4910      	ldr	r1, [pc, #64]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8000e84:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8000e86:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b08      	cmp	r3, #8
 8000e8c:	d001      	beq.n	8000e92 <HAL_RCC_GetSysClockFreq+0x12>
      sysclockfreq = HSE_VALUE;
 8000e8e:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e90:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000e92:	250f      	movs	r5, #15
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <HAL_RCC_GetSysClockFreq+0x4c>)
 8000e96:	0c93      	lsrs	r3, r2, #18
 8000e98:	402b      	ands	r3, r5
 8000e9a:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000e9c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000e9e:	03d2      	lsls	r2, r2, #15
 8000ea0:	d507      	bpl.n	8000eb2 <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000ea4:	400d      	ands	r5, r1
 8000ea6:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0x48>)
 8000eaa:	f7ff f92d 	bl	8000108 <__udivsi3>
 8000eae:	4360      	muls	r0, r4
 8000eb0:	e7ee      	b.n	8000e90 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000eb2:	0162      	lsls	r2, r4, #5
 8000eb4:	1b12      	subs	r2, r2, r4
 8000eb6:	0193      	lsls	r3, r2, #6
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	191b      	adds	r3, r3, r4
 8000ebe:	0218      	lsls	r0, r3, #8
 8000ec0:	e7e6      	b.n	8000e90 <HAL_RCC_GetSysClockFreq+0x10>
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	007a1200 	.word	0x007a1200
 8000ecc:	080017c0 	.word	0x080017c0
 8000ed0:	080017d0 	.word	0x080017d0

08000ed4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	4905      	ldr	r1, [pc, #20]	; (8000ef0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000edc:	055b      	lsls	r3, r3, #21
 8000ede:	0f5b      	lsrs	r3, r3, #29
 8000ee0:	5ccb      	ldrb	r3, [r1, r3]
 8000ee2:	6810      	ldr	r0, [r2, #0]
 8000ee4:	40d8      	lsrs	r0, r3
}    
 8000ee6:	4770      	bx	lr
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	080017b8 	.word	0x080017b8

08000ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef6:	46ce      	mov	lr, r9
 8000ef8:	4647      	mov	r7, r8
 8000efa:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000efc:	6803      	ldr	r3, [r0, #0]
{
 8000efe:	0004      	movs	r4, r0
 8000f00:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000f02:	03da      	lsls	r2, r3, #15
 8000f04:	d530      	bpl.n	8000f68 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	4b43      	ldr	r3, [pc, #268]	; (8001018 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000f0a:	0552      	lsls	r2, r2, #21
 8000f0c:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000f0e:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f10:	4211      	tst	r1, r2
 8000f12:	d041      	beq.n	8000f98 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f14:	2680      	movs	r6, #128	; 0x80
 8000f16:	4d41      	ldr	r5, [pc, #260]	; (800101c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8000f18:	0076      	lsls	r6, r6, #1
 8000f1a:	682b      	ldr	r3, [r5, #0]
 8000f1c:	4233      	tst	r3, r6
 8000f1e:	d049      	beq.n	8000fb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000f20:	4d3d      	ldr	r5, [pc, #244]	; (8001018 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000f22:	23c0      	movs	r3, #192	; 0xc0
 8000f24:	6a2a      	ldr	r2, [r5, #32]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	0010      	movs	r0, r2
 8000f2a:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f2c:	421a      	tst	r2, r3
 8000f2e:	d063      	beq.n	8000ff8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8000f30:	6861      	ldr	r1, [r4, #4]
 8000f32:	400b      	ands	r3, r1
 8000f34:	4283      	cmp	r3, r0
 8000f36:	d00e      	beq.n	8000f56 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f38:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f3a:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f3c:	6a2e      	ldr	r6, [r5, #32]
 8000f3e:	0240      	lsls	r0, r0, #9
 8000f40:	4330      	orrs	r0, r6
 8000f42:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f44:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f46:	4a36      	ldr	r2, [pc, #216]	; (8001020 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f48:	4e36      	ldr	r6, [pc, #216]	; (8001024 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f4a:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f4c:	4030      	ands	r0, r6
 8000f4e:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000f50:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f52:	07db      	lsls	r3, r3, #31
 8000f54:	d43f      	bmi.n	8000fd6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f56:	4a30      	ldr	r2, [pc, #192]	; (8001018 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000f58:	4831      	ldr	r0, [pc, #196]	; (8001020 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8000f5a:	6a13      	ldr	r3, [r2, #32]
 8000f5c:	4003      	ands	r3, r0
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f62:	2f01      	cmp	r7, #1
 8000f64:	d051      	beq.n	800100a <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f66:	6823      	ldr	r3, [r4, #0]
 8000f68:	07da      	lsls	r2, r3, #31
 8000f6a:	d506      	bpl.n	8000f7a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	492a      	ldr	r1, [pc, #168]	; (8001018 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000f70:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000f72:	4382      	bics	r2, r0
 8000f74:	68a0      	ldr	r0, [r4, #8]
 8000f76:	4302      	orrs	r2, r0
 8000f78:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000f7a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f7c:	069b      	lsls	r3, r3, #26
 8000f7e:	d506      	bpl.n	8000f8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f80:	2110      	movs	r1, #16
 8000f82:	4a25      	ldr	r2, [pc, #148]	; (8001018 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000f84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f86:	438b      	bics	r3, r1
 8000f88:	68e1      	ldr	r1, [r4, #12]
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f8e:	b003      	add	sp, #12
 8000f90:	bcc0      	pop	{r6, r7}
 8000f92:	46b9      	mov	r9, r7
 8000f94:	46b0      	mov	r8, r6
 8000f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f98:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	4d1f      	ldr	r5, [pc, #124]	; (800101c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4311      	orrs	r1, r2
 8000fa0:	61d9      	str	r1, [r3, #28]
 8000fa2:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa4:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fac:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8000fae:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	4233      	tst	r3, r6
 8000fb2:	d1b5      	bne.n	8000f20 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	4333      	orrs	r3, r6
 8000fb8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000fba:	f7ff fae7 	bl	800058c <HAL_GetTick>
 8000fbe:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	4233      	tst	r3, r6
 8000fc4:	d1ac      	bne.n	8000f20 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc6:	f7ff fae1 	bl	800058c <HAL_GetTick>
 8000fca:	4643      	mov	r3, r8
 8000fcc:	1ac0      	subs	r0, r0, r3
 8000fce:	2864      	cmp	r0, #100	; 0x64
 8000fd0:	d9f6      	bls.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	e7db      	b.n	8000f8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fad9 	bl	800058c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fda:	2302      	movs	r3, #2
 8000fdc:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 8000fe0:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe2:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe4:	e004      	b.n	8000ff0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fad1 	bl	800058c <HAL_GetTick>
 8000fea:	1b80      	subs	r0, r0, r6
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d8f0      	bhi.n	8000fd2 <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	6a2b      	ldr	r3, [r5, #32]
 8000ff4:	421a      	tst	r2, r3
 8000ff6:	d0f6      	beq.n	8000fe6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8000ffc:	6a13      	ldr	r3, [r2, #32]
 8000ffe:	6861      	ldr	r1, [r4, #4]
 8001000:	4003      	ands	r3, r0
 8001002:	430b      	orrs	r3, r1
 8001004:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 8001006:	2f01      	cmp	r7, #1
 8001008:	d1ad      	bne.n	8000f66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 800100a:	69d3      	ldr	r3, [r2, #28]
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800100e:	400b      	ands	r3, r1
 8001010:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	e7a8      	b.n	8000f68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	40021000 	.word	0x40021000
 800101c:	40007000 	.word	0x40007000
 8001020:	fffffcff 	.word	0xfffffcff
 8001024:	fffeffff 	.word	0xfffeffff
 8001028:	00001388 	.word	0x00001388
 800102c:	efffffff 	.word	0xefffffff

08001030 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001032:	4657      	mov	r7, sl
 8001034:	464e      	mov	r6, r9
 8001036:	4645      	mov	r5, r8
 8001038:	46de      	mov	lr, fp
 800103a:	b5e0      	push	{r5, r6, r7, lr}
 800103c:	001e      	movs	r6, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800103e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8001040:	0005      	movs	r5, r0
 8001042:	000f      	movs	r7, r1
 8001044:	0014      	movs	r4, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001046:	2b20      	cmp	r3, #32
 8001048:	d000      	beq.n	800104c <HAL_UART_Transmit+0x1c>
 800104a:	e0a8      	b.n	800119e <HAL_UART_Transmit+0x16e>
  {
    if ((pData == NULL) || (Size == 0U))
 800104c:	2900      	cmp	r1, #0
 800104e:	d04a      	beq.n	80010e6 <HAL_UART_Transmit+0xb6>
 8001050:	2a00      	cmp	r2, #0
 8001052:	d048      	beq.n	80010e6 <HAL_UART_Transmit+0xb6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	6882      	ldr	r2, [r0, #8]
 8001058:	015b      	lsls	r3, r3, #5
 800105a:	429a      	cmp	r2, r3
 800105c:	d104      	bne.n	8001068 <HAL_UART_Transmit+0x38>
 800105e:	6903      	ldr	r3, [r0, #16]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_UART_Transmit+0x38>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001064:	07cb      	lsls	r3, r1, #31
 8001066:	d43e      	bmi.n	80010e6 <HAL_UART_Transmit+0xb6>
      {
        return  HAL_ERROR;
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001068:	2200      	movs	r2, #0
 800106a:	2384      	movs	r3, #132	; 0x84
 800106c:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800106e:	3b63      	subs	r3, #99	; 0x63
 8001070:	67eb      	str	r3, [r5, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001072:	f7ff fa8b 	bl	800058c <HAL_GetTick>

    huart->TxXferSize  = Size;
 8001076:	2350      	movs	r3, #80	; 0x50
 8001078:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 800107a:	3302      	adds	r3, #2
      pdata16bits = (const uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 800107c:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 800107e:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 8001084:	4680      	mov	r8, r0
      pdata16bits = NULL;
 8001086:	468a      	mov	sl, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001088:	015b      	lsls	r3, r3, #5
 800108a:	429a      	cmp	r2, r3
 800108c:	d100      	bne.n	8001090 <HAL_UART_Transmit+0x60>
 800108e:	e0a3      	b.n	80011d8 <HAL_UART_Transmit+0x1a8>
    }

    while (huart->TxXferCount > 0U)
 8001090:	2352      	movs	r3, #82	; 0x52
 8001092:	5aeb      	ldrh	r3, [r5, r3]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d100      	bne.n	800109a <HAL_UART_Transmit+0x6a>
 8001098:	e0d6      	b.n	8001248 <HAL_UART_Transmit+0x218>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800109a:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800109c:	2480      	movs	r4, #128	; 0x80
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800109e:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80010a0:	682b      	ldr	r3, [r5, #0]
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80010a2:	2208      	movs	r2, #8
 80010a4:	4693      	mov	fp, r2
 80010a6:	1c72      	adds	r2, r6, #1
 80010a8:	d124      	bne.n	80010f4 <HAL_UART_Transmit+0xc4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80010aa:	69da      	ldr	r2, [r3, #28]
 80010ac:	4214      	tst	r4, r2
 80010ae:	d0fc      	beq.n	80010aa <HAL_UART_Transmit+0x7a>
      if (pdata8bits == NULL)
 80010b0:	2f00      	cmp	r7, #0
 80010b2:	d06b      	beq.n	800118c <HAL_UART_Transmit+0x15c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80010b4:	783a      	ldrb	r2, [r7, #0]
        pdata8bits++;
 80010b6:	3701      	adds	r7, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80010b8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80010ba:	2152      	movs	r1, #82	; 0x52
 80010bc:	5a6a      	ldrh	r2, [r5, r1]
 80010be:	3a01      	subs	r2, #1
 80010c0:	b292      	uxth	r2, r2
 80010c2:	526a      	strh	r2, [r5, r1]
    while (huart->TxXferCount > 0U)
 80010c4:	5a6a      	ldrh	r2, [r5, r1]
 80010c6:	2a00      	cmp	r2, #0
 80010c8:	d1eb      	bne.n	80010a2 <HAL_UART_Transmit+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80010ca:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80010cc:	2440      	movs	r4, #64	; 0x40
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80010ce:	4691      	mov	r9, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80010d0:	2708      	movs	r7, #8
 80010d2:	1c72      	adds	r2, r6, #1
 80010d4:	d165      	bne.n	80011a2 <HAL_UART_Transmit+0x172>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80010d6:	2140      	movs	r1, #64	; 0x40
 80010d8:	69da      	ldr	r2, [r3, #28]
 80010da:	4211      	tst	r1, r2
 80010dc:	d0fc      	beq.n	80010d8 <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 80010de:	2320      	movs	r3, #32
    return HAL_OK;
 80010e0:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 80010e2:	67eb      	str	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 80010e4:	e000      	b.n	80010e8 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 80010e6:	2001      	movs	r0, #1
}
 80010e8:	bcf0      	pop	{r4, r5, r6, r7}
 80010ea:	46bb      	mov	fp, r7
 80010ec:	46b2      	mov	sl, r6
 80010ee:	46a9      	mov	r9, r5
 80010f0:	46a0      	mov	r8, r4
 80010f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80010f4:	69da      	ldr	r2, [r3, #28]
 80010f6:	4214      	tst	r4, r2
 80010f8:	d1da      	bne.n	80010b0 <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010fa:	f7ff fa47 	bl	800058c <HAL_GetTick>
 80010fe:	4643      	mov	r3, r8
 8001100:	1ac0      	subs	r0, r0, r3
 8001102:	4286      	cmp	r6, r0
 8001104:	d33e      	bcc.n	8001184 <HAL_UART_Transmit+0x154>
 8001106:	2e00      	cmp	r6, #0
 8001108:	d03c      	beq.n	8001184 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800110a:	4649      	mov	r1, r9
 800110c:	682b      	ldr	r3, [r5, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4211      	tst	r1, r2
 8001112:	d0c8      	beq.n	80010a6 <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001114:	4659      	mov	r1, fp
 8001116:	69da      	ldr	r2, [r3, #28]
 8001118:	4211      	tst	r1, r2
 800111a:	d164      	bne.n	80011e6 <HAL_UART_Transmit+0x1b6>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800111c:	2280      	movs	r2, #128	; 0x80
 800111e:	69d9      	ldr	r1, [r3, #28]
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	4211      	tst	r1, r2
 8001124:	d0bf      	beq.n	80010a6 <HAL_UART_Transmit+0x76>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001126:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001128:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800112c:	2201      	movs	r2, #1
 800112e:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001132:	6829      	ldr	r1, [r5, #0]
 8001134:	4c46      	ldr	r4, [pc, #280]	; (8001250 <HAL_UART_Transmit+0x220>)
 8001136:	680b      	ldr	r3, [r1, #0]
 8001138:	4023      	ands	r3, r4
 800113a:	600b      	str	r3, [r1, #0]
 800113c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001140:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001144:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001148:	6829      	ldr	r1, [r5, #0]
 800114a:	688b      	ldr	r3, [r1, #8]
 800114c:	4393      	bics	r3, r2
 800114e:	608b      	str	r3, [r1, #8]
 8001150:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001154:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001156:	2b01      	cmp	r3, #1
 8001158:	d10a      	bne.n	8001170 <HAL_UART_Transmit+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800115a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800115e:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001162:	2010      	movs	r0, #16
 8001164:	682a      	ldr	r2, [r5, #0]
 8001166:	6813      	ldr	r3, [r2, #0]
 8001168:	4383      	bics	r3, r0
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001170:	2220      	movs	r2, #32
 8001172:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001174:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8001176:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001178:	2300      	movs	r3, #0
 800117a:	662b      	str	r3, [r5, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800117c:	66ab      	str	r3, [r5, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800117e:	506a      	str	r2, [r5, r1]
          __HAL_UNLOCK(huart);
 8001180:	3258      	adds	r2, #88	; 0x58
 8001182:	54ab      	strb	r3, [r5, r2]
      huart->gState = HAL_UART_STATE_READY;
 8001184:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8001186:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8001188:	67eb      	str	r3, [r5, #124]	; 0x7c
      return HAL_TIMEOUT;
 800118a:	e7ad      	b.n	80010e8 <HAL_UART_Transmit+0xb8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800118c:	4652      	mov	r2, sl
 800118e:	8812      	ldrh	r2, [r2, #0]
 8001190:	05d2      	lsls	r2, r2, #23
 8001192:	0dd2      	lsrs	r2, r2, #23
 8001194:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001196:	2202      	movs	r2, #2
 8001198:	4694      	mov	ip, r2
 800119a:	44e2      	add	sl, ip
      huart->TxXferCount--;
 800119c:	e78d      	b.n	80010ba <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 800119e:	2002      	movs	r0, #2
 80011a0:	e7a2      	b.n	80010e8 <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	421c      	tst	r4, r3
 80011a6:	d19a      	bne.n	80010de <HAL_UART_Transmit+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011a8:	f7ff f9f0 	bl	800058c <HAL_GetTick>
 80011ac:	4643      	mov	r3, r8
 80011ae:	1ac0      	subs	r0, r0, r3
 80011b0:	4286      	cmp	r6, r0
 80011b2:	d3e7      	bcc.n	8001184 <HAL_UART_Transmit+0x154>
 80011b4:	2e00      	cmp	r6, #0
 80011b6:	d0e5      	beq.n	8001184 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80011b8:	4649      	mov	r1, r9
 80011ba:	682b      	ldr	r3, [r5, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4211      	tst	r1, r2
 80011c0:	d100      	bne.n	80011c4 <HAL_UART_Transmit+0x194>
 80011c2:	e786      	b.n	80010d2 <HAL_UART_Transmit+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80011c4:	69da      	ldr	r2, [r3, #28]
 80011c6:	4217      	tst	r7, r2
 80011c8:	d140      	bne.n	800124c <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	69d9      	ldr	r1, [r3, #28]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	4211      	tst	r1, r2
 80011d2:	d100      	bne.n	80011d6 <HAL_UART_Transmit+0x1a6>
 80011d4:	e77d      	b.n	80010d2 <HAL_UART_Transmit+0xa2>
 80011d6:	e7a6      	b.n	8001126 <HAL_UART_Transmit+0xf6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80011d8:	692b      	ldr	r3, [r5, #16]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d000      	beq.n	80011e0 <HAL_UART_Transmit+0x1b0>
 80011de:	e757      	b.n	8001090 <HAL_UART_Transmit+0x60>
 80011e0:	46ba      	mov	sl, r7
      pdata8bits  = NULL;
 80011e2:	2700      	movs	r7, #0
 80011e4:	e754      	b.n	8001090 <HAL_UART_Transmit+0x60>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80011e6:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011e8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011ec:	2201      	movs	r2, #1
 80011ee:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80011f2:	6829      	ldr	r1, [r5, #0]
 80011f4:	4c16      	ldr	r4, [pc, #88]	; (8001250 <HAL_UART_Transmit+0x220>)
 80011f6:	680b      	ldr	r3, [r1, #0]
 80011f8:	4023      	ands	r3, r4
 80011fa:	600b      	str	r3, [r1, #0]
 80011fc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001200:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001204:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001208:	6829      	ldr	r1, [r5, #0]
 800120a:	688b      	ldr	r3, [r1, #8]
 800120c:	4393      	bics	r3, r2
 800120e:	608b      	str	r3, [r1, #8]
 8001210:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001214:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10a      	bne.n	8001230 <HAL_UART_Transmit+0x200>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800121a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800121e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001222:	2010      	movs	r0, #16
 8001224:	682a      	ldr	r2, [r5, #0]
 8001226:	6813      	ldr	r3, [r2, #0]
 8001228:	4383      	bics	r3, r0
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001234:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8001236:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001238:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800123a:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800123c:	662b      	str	r3, [r5, #96]	; 0x60
  huart->RxISR = NULL;
 800123e:	66ab      	str	r3, [r5, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001240:	50a9      	str	r1, [r5, r2]
           __HAL_UNLOCK(huart);
 8001242:	3a0c      	subs	r2, #12
 8001244:	54ab      	strb	r3, [r5, r2]
           return HAL_ERROR;
 8001246:	e79d      	b.n	8001184 <HAL_UART_Transmit+0x154>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001248:	682b      	ldr	r3, [r5, #0]
 800124a:	e73e      	b.n	80010ca <HAL_UART_Transmit+0x9a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800124c:	621f      	str	r7, [r3, #32]
 800124e:	e7cb      	b.n	80011e8 <HAL_UART_Transmit+0x1b8>
 8001250:	fffffedf 	.word	0xfffffedf

08001254 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001254:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001256:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001258:	07da      	lsls	r2, r3, #31
 800125a:	d506      	bpl.n	800126a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800125c:	6801      	ldr	r1, [r0, #0]
 800125e:	4c28      	ldr	r4, [pc, #160]	; (8001300 <UART_AdvFeatureConfig+0xac>)
 8001260:	684a      	ldr	r2, [r1, #4]
 8001262:	4022      	ands	r2, r4
 8001264:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001266:	4322      	orrs	r2, r4
 8001268:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800126a:	079a      	lsls	r2, r3, #30
 800126c:	d506      	bpl.n	800127c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800126e:	6801      	ldr	r1, [r0, #0]
 8001270:	4c24      	ldr	r4, [pc, #144]	; (8001304 <UART_AdvFeatureConfig+0xb0>)
 8001272:	684a      	ldr	r2, [r1, #4]
 8001274:	4022      	ands	r2, r4
 8001276:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001278:	4322      	orrs	r2, r4
 800127a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800127c:	075a      	lsls	r2, r3, #29
 800127e:	d506      	bpl.n	800128e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001280:	6801      	ldr	r1, [r0, #0]
 8001282:	4c21      	ldr	r4, [pc, #132]	; (8001308 <UART_AdvFeatureConfig+0xb4>)
 8001284:	684a      	ldr	r2, [r1, #4]
 8001286:	4022      	ands	r2, r4
 8001288:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800128a:	4322      	orrs	r2, r4
 800128c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800128e:	071a      	lsls	r2, r3, #28
 8001290:	d506      	bpl.n	80012a0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001292:	6801      	ldr	r1, [r0, #0]
 8001294:	4c1d      	ldr	r4, [pc, #116]	; (800130c <UART_AdvFeatureConfig+0xb8>)
 8001296:	684a      	ldr	r2, [r1, #4]
 8001298:	4022      	ands	r2, r4
 800129a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800129c:	4322      	orrs	r2, r4
 800129e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80012a0:	06da      	lsls	r2, r3, #27
 80012a2:	d506      	bpl.n	80012b2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80012a4:	6801      	ldr	r1, [r0, #0]
 80012a6:	4c1a      	ldr	r4, [pc, #104]	; (8001310 <UART_AdvFeatureConfig+0xbc>)
 80012a8:	688a      	ldr	r2, [r1, #8]
 80012aa:	4022      	ands	r2, r4
 80012ac:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80012ae:	4322      	orrs	r2, r4
 80012b0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80012b2:	069a      	lsls	r2, r3, #26
 80012b4:	d506      	bpl.n	80012c4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80012b6:	6801      	ldr	r1, [r0, #0]
 80012b8:	4c16      	ldr	r4, [pc, #88]	; (8001314 <UART_AdvFeatureConfig+0xc0>)
 80012ba:	688a      	ldr	r2, [r1, #8]
 80012bc:	4022      	ands	r2, r4
 80012be:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80012c0:	4322      	orrs	r2, r4
 80012c2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80012c4:	065a      	lsls	r2, r3, #25
 80012c6:	d50a      	bpl.n	80012de <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80012c8:	6801      	ldr	r1, [r0, #0]
 80012ca:	4d13      	ldr	r5, [pc, #76]	; (8001318 <UART_AdvFeatureConfig+0xc4>)
 80012cc:	684a      	ldr	r2, [r1, #4]
 80012ce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80012d0:	402a      	ands	r2, r5
 80012d2:	4322      	orrs	r2, r4
 80012d4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	0352      	lsls	r2, r2, #13
 80012da:	4294      	cmp	r4, r2
 80012dc:	d009      	beq.n	80012f2 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80012de:	061b      	lsls	r3, r3, #24
 80012e0:	d506      	bpl.n	80012f0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80012e2:	6802      	ldr	r2, [r0, #0]
 80012e4:	490d      	ldr	r1, [pc, #52]	; (800131c <UART_AdvFeatureConfig+0xc8>)
 80012e6:	6853      	ldr	r3, [r2, #4]
 80012e8:	400b      	ands	r3, r1
 80012ea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80012ec:	430b      	orrs	r3, r1
 80012ee:	6053      	str	r3, [r2, #4]
}
 80012f0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80012f2:	684a      	ldr	r2, [r1, #4]
 80012f4:	4c0a      	ldr	r4, [pc, #40]	; (8001320 <UART_AdvFeatureConfig+0xcc>)
 80012f6:	4022      	ands	r2, r4
 80012f8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80012fa:	4322      	orrs	r2, r4
 80012fc:	604a      	str	r2, [r1, #4]
 80012fe:	e7ee      	b.n	80012de <UART_AdvFeatureConfig+0x8a>
 8001300:	fffdffff 	.word	0xfffdffff
 8001304:	fffeffff 	.word	0xfffeffff
 8001308:	fffbffff 	.word	0xfffbffff
 800130c:	ffff7fff 	.word	0xffff7fff
 8001310:	ffffefff 	.word	0xffffefff
 8001314:	ffffdfff 	.word	0xffffdfff
 8001318:	ffefffff 	.word	0xffefffff
 800131c:	fff7ffff 	.word	0xfff7ffff
 8001320:	ff9fffff 	.word	0xff9fffff

08001324 <UART_CheckIdleState>:
{
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001326:	2384      	movs	r3, #132	; 0x84
 8001328:	2200      	movs	r2, #0
{
 800132a:	46c6      	mov	lr, r8
 800132c:	0004      	movs	r4, r0
 800132e:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001330:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001332:	f7ff f92b 	bl	800058c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001336:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001338:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	0712      	lsls	r2, r2, #28
 800133e:	d410      	bmi.n	8001362 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	0752      	lsls	r2, r2, #29
 8001344:	d43c      	bmi.n	80013c0 <UART_CheckIdleState+0x9c>
  huart->gState = HAL_UART_STATE_READY;
 8001346:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8001348:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800134a:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800134c:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800134e:	2300      	movs	r3, #0
  return HAL_OK;
 8001350:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001352:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001354:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8001356:	2378      	movs	r3, #120	; 0x78
 8001358:	2200      	movs	r2, #0
 800135a:	54e2      	strb	r2, [r4, r3]
}
 800135c:	bc80      	pop	{r7}
 800135e:	46b8      	mov	r8, r7
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001362:	69da      	ldr	r2, [r3, #28]
 8001364:	0292      	lsls	r2, r2, #10
 8001366:	d4eb      	bmi.n	8001340 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001368:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800136a:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800136c:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800136e:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001370:	04b6      	lsls	r6, r6, #18
 8001372:	e010      	b.n	8001396 <UART_CheckIdleState+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4217      	tst	r7, r2
 800137a:	d009      	beq.n	8001390 <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800137c:	4641      	mov	r1, r8
 800137e:	69da      	ldr	r2, [r3, #28]
 8001380:	4211      	tst	r1, r2
 8001382:	d158      	bne.n	8001436 <UART_CheckIdleState+0x112>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	69d9      	ldr	r1, [r3, #28]
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	4211      	tst	r1, r2
 800138c:	d000      	beq.n	8001390 <UART_CheckIdleState+0x6c>
 800138e:	e083      	b.n	8001498 <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001390:	69da      	ldr	r2, [r3, #28]
 8001392:	0292      	lsls	r2, r2, #10
 8001394:	d4d4      	bmi.n	8001340 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001396:	f7ff f8f9 	bl	800058c <HAL_GetTick>
 800139a:	1b40      	subs	r0, r0, r5
 800139c:	42b0      	cmp	r0, r6
 800139e:	d3e9      	bcc.n	8001374 <UART_CheckIdleState+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013a4:	2301      	movs	r3, #1
 80013a6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80013aa:	2080      	movs	r0, #128	; 0x80
 80013ac:	6822      	ldr	r2, [r4, #0]
 80013ae:	6813      	ldr	r3, [r2, #0]
 80013b0:	4383      	bics	r3, r0
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80013b8:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80013ba:	387d      	subs	r0, #125	; 0x7d
      huart->gState = HAL_UART_STATE_READY;
 80013bc:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80013be:	e7ca      	b.n	8001356 <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	025b      	lsls	r3, r3, #9
 80013c4:	d4bf      	bmi.n	8001346 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c6:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80013c8:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80013ca:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80013cc:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ce:	04b6      	lsls	r6, r6, #18
 80013d0:	e011      	b.n	80013f6 <UART_CheckIdleState+0xd2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4217      	tst	r7, r2
 80013d8:	d00a      	beq.n	80013f0 <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80013da:	4641      	mov	r1, r8
 80013dc:	69da      	ldr	r2, [r3, #28]
 80013de:	4211      	tst	r1, r2
 80013e0:	d000      	beq.n	80013e4 <UART_CheckIdleState+0xc0>
 80013e2:	e089      	b.n	80014f8 <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	69d9      	ldr	r1, [r3, #28]
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	4211      	tst	r1, r2
 80013ec:	d000      	beq.n	80013f0 <UART_CheckIdleState+0xcc>
 80013ee:	e0b4      	b.n	800155a <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	d4a7      	bmi.n	8001346 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013f6:	f7ff f8c9 	bl	800058c <HAL_GetTick>
 80013fa:	1b40      	subs	r0, r0, r5
 80013fc:	42b0      	cmp	r0, r6
 80013fe:	d3e8      	bcc.n	80013d2 <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001400:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001404:	2201      	movs	r2, #1
 8001406:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800140a:	6821      	ldr	r1, [r4, #0]
 800140c:	4d6b      	ldr	r5, [pc, #428]	; (80015bc <UART_CheckIdleState+0x298>)
 800140e:	680b      	ldr	r3, [r1, #0]
 8001410:	402b      	ands	r3, r5
 8001412:	600b      	str	r3, [r1, #0]
 8001414:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001418:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800141c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001420:	6821      	ldr	r1, [r4, #0]
 8001422:	688b      	ldr	r3, [r1, #8]
 8001424:	4393      	bics	r3, r2
 8001426:	608b      	str	r3, [r1, #8]
 8001428:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8001430:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8001432:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001434:	e78f      	b.n	8001356 <UART_CheckIdleState+0x32>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001436:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001438:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800143c:	2201      	movs	r2, #1
 800143e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001442:	6821      	ldr	r1, [r4, #0]
 8001444:	4d5d      	ldr	r5, [pc, #372]	; (80015bc <UART_CheckIdleState+0x298>)
 8001446:	680b      	ldr	r3, [r1, #0]
 8001448:	402b      	ands	r3, r5
 800144a:	600b      	str	r3, [r1, #0]
 800144c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001450:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001454:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001458:	6821      	ldr	r1, [r4, #0]
 800145a:	688b      	ldr	r3, [r1, #8]
 800145c:	4393      	bics	r3, r2
 800145e:	608b      	str	r3, [r1, #8]
 8001460:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001464:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001466:	2b01      	cmp	r3, #1
 8001468:	d10a      	bne.n	8001480 <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800146a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800146e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001472:	2010      	movs	r0, #16
 8001474:	6822      	ldr	r2, [r4, #0]
 8001476:	6813      	ldr	r3, [r2, #0]
 8001478:	4383      	bics	r3, r0
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001484:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8001486:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001488:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800148a:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800148c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 800148e:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001490:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8001492:	3a0c      	subs	r2, #12
 8001494:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8001496:	e783      	b.n	80013a0 <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001498:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800149a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800149e:	2201      	movs	r2, #1
 80014a0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80014a4:	6821      	ldr	r1, [r4, #0]
 80014a6:	4d45      	ldr	r5, [pc, #276]	; (80015bc <UART_CheckIdleState+0x298>)
 80014a8:	680b      	ldr	r3, [r1, #0]
 80014aa:	402b      	ands	r3, r5
 80014ac:	600b      	str	r3, [r1, #0]
 80014ae:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014b2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014b6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014ba:	6821      	ldr	r1, [r4, #0]
 80014bc:	688b      	ldr	r3, [r1, #8]
 80014be:	4393      	bics	r3, r2
 80014c0:	608b      	str	r3, [r1, #8]
 80014c2:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80014c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d10a      	bne.n	80014e2 <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014cc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014d0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80014d4:	2010      	movs	r0, #16
 80014d6:	6822      	ldr	r2, [r4, #0]
 80014d8:	6813      	ldr	r3, [r2, #0]
 80014da:	4383      	bics	r3, r0
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80014e2:	2220      	movs	r2, #32
 80014e4:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80014e6:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80014e8:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014ea:	2300      	movs	r3, #0
 80014ec:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 80014ee:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80014f0:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80014f2:	3258      	adds	r2, #88	; 0x58
 80014f4:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80014f6:	e753      	b.n	80013a0 <UART_CheckIdleState+0x7c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80014f8:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014fe:	2201      	movs	r2, #1
 8001500:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001504:	6821      	ldr	r1, [r4, #0]
 8001506:	4d2d      	ldr	r5, [pc, #180]	; (80015bc <UART_CheckIdleState+0x298>)
 8001508:	680b      	ldr	r3, [r1, #0]
 800150a:	402b      	ands	r3, r5
 800150c:	600b      	str	r3, [r1, #0]
 800150e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001512:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001516:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800151a:	6821      	ldr	r1, [r4, #0]
 800151c:	688b      	ldr	r3, [r1, #8]
 800151e:	4393      	bics	r3, r2
 8001520:	608b      	str	r3, [r1, #8]
 8001522:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001526:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001528:	2b01      	cmp	r3, #1
 800152a:	d10a      	bne.n	8001542 <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800152c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001530:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001534:	2010      	movs	r0, #16
 8001536:	6822      	ldr	r2, [r4, #0]
 8001538:	6813      	ldr	r3, [r2, #0]
 800153a:	4383      	bics	r3, r0
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001546:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8001548:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800154a:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800154c:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800154e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8001550:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001552:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8001554:	3a0c      	subs	r2, #12
 8001556:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8001558:	e752      	b.n	8001400 <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800155a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800155c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001560:	2201      	movs	r2, #1
 8001562:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001566:	6821      	ldr	r1, [r4, #0]
 8001568:	4d14      	ldr	r5, [pc, #80]	; (80015bc <UART_CheckIdleState+0x298>)
 800156a:	680b      	ldr	r3, [r1, #0]
 800156c:	402b      	ands	r3, r5
 800156e:	600b      	str	r3, [r1, #0]
 8001570:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001574:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001578:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800157c:	6821      	ldr	r1, [r4, #0]
 800157e:	688b      	ldr	r3, [r1, #8]
 8001580:	4393      	bics	r3, r2
 8001582:	608b      	str	r3, [r1, #8]
 8001584:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001588:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800158a:	2b01      	cmp	r3, #1
 800158c:	d10a      	bne.n	80015a4 <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800158e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001592:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001596:	2010      	movs	r0, #16
 8001598:	6822      	ldr	r2, [r4, #0]
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	4383      	bics	r3, r0
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80015a4:	2220      	movs	r2, #32
 80015a6:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80015a8:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80015aa:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80015ac:	2300      	movs	r3, #0
 80015ae:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 80015b0:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80015b2:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80015b4:	3258      	adds	r2, #88	; 0x58
 80015b6:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80015b8:	e722      	b.n	8001400 <UART_CheckIdleState+0xdc>
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	fffffedf 	.word	0xfffffedf

080015c0 <HAL_UART_Init>:
{
 80015c0:	b570      	push	{r4, r5, r6, lr}
 80015c2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80015c4:	d100      	bne.n	80015c8 <HAL_UART_Init+0x8>
 80015c6:	e076      	b.n	80016b6 <HAL_UART_Init+0xf6>
  if (huart->gState == HAL_UART_STATE_RESET)
 80015c8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d067      	beq.n	800169e <HAL_UART_Init+0xde>
  huart->gState = HAL_UART_STATE_BUSY;
 80015ce:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80015d0:	2101      	movs	r1, #1
 80015d2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80015d4:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80015d6:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015d8:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80015da:	438b      	bics	r3, r1
 80015dc:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015de:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015e0:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015e2:	432b      	orrs	r3, r5
 80015e4:	6965      	ldr	r5, [r4, #20]
 80015e6:	69e1      	ldr	r1, [r4, #28]
 80015e8:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015ea:	4d49      	ldr	r5, [pc, #292]	; (8001710 <HAL_UART_Init+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015ec:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015ee:	4028      	ands	r0, r5
 80015f0:	4303      	orrs	r3, r0
 80015f2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015f4:	6853      	ldr	r3, [r2, #4]
 80015f6:	4847      	ldr	r0, [pc, #284]	; (8001714 <HAL_UART_Init+0x154>)
  tmpreg |= huart->Init.OneBitSampling;
 80015f8:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015fa:	4003      	ands	r3, r0
 80015fc:	68e0      	ldr	r0, [r4, #12]
 80015fe:	4303      	orrs	r3, r0
 8001600:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001602:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001604:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001606:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001608:	4d43      	ldr	r5, [pc, #268]	; (8001718 <HAL_UART_Init+0x158>)
 800160a:	4028      	ands	r0, r5
 800160c:	4303      	orrs	r3, r0
 800160e:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <HAL_UART_Init+0x15c>)
 8001612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001614:	2303      	movs	r3, #3
 8001616:	4013      	ands	r3, r2
 8001618:	3b01      	subs	r3, #1
 800161a:	2b02      	cmp	r3, #2
 800161c:	d91f      	bls.n	800165e <HAL_UART_Init+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	4299      	cmp	r1, r3
 8001624:	d100      	bne.n	8001628 <HAL_UART_Init+0x68>
 8001626:	e070      	b.n	800170a <HAL_UART_Init+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001628:	f7ff fc54 	bl	8000ed4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800162c:	2800      	cmp	r0, #0
 800162e:	d124      	bne.n	800167a <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 8001630:	2300      	movs	r3, #0
 8001632:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8001634:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001638:	2b00      	cmp	r3, #0
 800163a:	d135      	bne.n	80016a8 <HAL_UART_Init+0xe8>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	4938      	ldr	r1, [pc, #224]	; (8001720 <HAL_UART_Init+0x160>)
 8001640:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001642:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001644:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001646:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001648:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	438a      	bics	r2, r1
 800164e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	3907      	subs	r1, #7
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001658:	f7ff fe64 	bl	8001324 <UART_CheckIdleState>
 800165c:	e01b      	b.n	8001696 <HAL_UART_Init+0xd6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800165e:	2080      	movs	r0, #128	; 0x80
 8001660:	4a30      	ldr	r2, [pc, #192]	; (8001724 <HAL_UART_Init+0x164>)
 8001662:	0200      	lsls	r0, r0, #8
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	4281      	cmp	r1, r0
 8001668:	d027      	beq.n	80016ba <HAL_UART_Init+0xfa>
    switch (clocksource)
 800166a:	2b04      	cmp	r3, #4
 800166c:	d044      	beq.n	80016f8 <HAL_UART_Init+0x138>
 800166e:	d813      	bhi.n	8001698 <HAL_UART_Init+0xd8>
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0d9      	beq.n	8001628 <HAL_UART_Init+0x68>
 8001674:	2b02      	cmp	r3, #2
 8001676:	d10a      	bne.n	800168e <HAL_UART_Init+0xce>
        pclk = (uint32_t) HSI_VALUE;
 8001678:	482b      	ldr	r0, [pc, #172]	; (8001728 <HAL_UART_Init+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800167a:	6861      	ldr	r1, [r4, #4]
 800167c:	084b      	lsrs	r3, r1, #1
 800167e:	1818      	adds	r0, r3, r0
 8001680:	f7fe fd42 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001684:	0002      	movs	r2, r0
 8001686:	4b29      	ldr	r3, [pc, #164]	; (800172c <HAL_UART_Init+0x16c>)
 8001688:	3a10      	subs	r2, #16
 800168a:	429a      	cmp	r2, r3
 800168c:	d910      	bls.n	80016b0 <HAL_UART_Init+0xf0>
  huart->RxISR = NULL;
 800168e:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001690:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8001692:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8001694:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8001696:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8001698:	2b08      	cmp	r3, #8
 800169a:	d0ee      	beq.n	800167a <HAL_UART_Init+0xba>
 800169c:	e7f7      	b.n	800168e <HAL_UART_Init+0xce>
    huart->Lock = HAL_UNLOCKED;
 800169e:	2278      	movs	r2, #120	; 0x78
 80016a0:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80016a2:	f7fe fec5 	bl	8000430 <HAL_UART_MspInit>
 80016a6:	e792      	b.n	80015ce <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80016a8:	0020      	movs	r0, r4
 80016aa:	f7ff fdd3 	bl	8001254 <UART_AdvFeatureConfig>
 80016ae:	e7c5      	b.n	800163c <HAL_UART_Init+0x7c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	60d8      	str	r0, [r3, #12]
  return ret;
 80016b4:	e7bc      	b.n	8001630 <HAL_UART_Init+0x70>
    return HAL_ERROR;
 80016b6:	2001      	movs	r0, #1
 80016b8:	e7ed      	b.n	8001696 <HAL_UART_Init+0xd6>
    switch (clocksource)
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d01f      	beq.n	80016fe <HAL_UART_Init+0x13e>
 80016be:	d816      	bhi.n	80016ee <HAL_UART_Init+0x12e>
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d022      	beq.n	800170a <HAL_UART_Init+0x14a>
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d1e2      	bne.n	800168e <HAL_UART_Init+0xce>
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_UART_Init+0x170>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80016ca:	6861      	ldr	r1, [r4, #4]
 80016cc:	0848      	lsrs	r0, r1, #1
 80016ce:	18c0      	adds	r0, r0, r3
 80016d0:	f7fe fd1a 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016d4:	0002      	movs	r2, r0
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_UART_Init+0x16c>)
 80016d8:	3a10      	subs	r2, #16
 80016da:	429a      	cmp	r2, r3
 80016dc:	d8d7      	bhi.n	800168e <HAL_UART_Init+0xce>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_Init+0x174>)
        huart->Instance->BRR = brrtemp;
 80016e0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80016e2:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016e4:	0700      	lsls	r0, r0, #28
 80016e6:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80016e8:	4303      	orrs	r3, r0
 80016ea:	60d3      	str	r3, [r2, #12]
  return ret;
 80016ec:	e7a0      	b.n	8001630 <HAL_UART_Init+0x70>
    switch (clocksource)
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d1cd      	bne.n	800168e <HAL_UART_Init+0xce>
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	e7e8      	b.n	80016ca <HAL_UART_Init+0x10a>
        pclk = HAL_RCC_GetSysClockFreq();
 80016f8:	f7ff fbc2 	bl	8000e80 <HAL_RCC_GetSysClockFreq>
        break;
 80016fc:	e796      	b.n	800162c <HAL_UART_Init+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 80016fe:	f7ff fbbf 	bl	8000e80 <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001702:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8001704:	2800      	cmp	r0, #0
 8001706:	d1e0      	bne.n	80016ca <HAL_UART_Init+0x10a>
 8001708:	e792      	b.n	8001630 <HAL_UART_Init+0x70>
        pclk = HAL_RCC_GetPCLK1Freq();
 800170a:	f7ff fbe3 	bl	8000ed4 <HAL_RCC_GetPCLK1Freq>
        break;
 800170e:	e7f8      	b.n	8001702 <HAL_UART_Init+0x142>
 8001710:	ffff69f3 	.word	0xffff69f3
 8001714:	ffffcfff 	.word	0xffffcfff
 8001718:	fffff4ff 	.word	0xfffff4ff
 800171c:	40021000 	.word	0x40021000
 8001720:	fffff7ff 	.word	0xfffff7ff
 8001724:	080017e0 	.word	0x080017e0
 8001728:	007a1200 	.word	0x007a1200
 800172c:	0000ffef 	.word	0x0000ffef
 8001730:	00f42400 	.word	0x00f42400
 8001734:	0000fff0 	.word	0x0000fff0

08001738 <memset>:
 8001738:	0003      	movs	r3, r0
 800173a:	1882      	adds	r2, r0, r2
 800173c:	4293      	cmp	r3, r2
 800173e:	d100      	bne.n	8001742 <memset+0xa>
 8001740:	4770      	bx	lr
 8001742:	7019      	strb	r1, [r3, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	e7f9      	b.n	800173c <memset+0x4>

08001748 <__libc_init_array>:
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	2600      	movs	r6, #0
 800174c:	4c0c      	ldr	r4, [pc, #48]	; (8001780 <__libc_init_array+0x38>)
 800174e:	4d0d      	ldr	r5, [pc, #52]	; (8001784 <__libc_init_array+0x3c>)
 8001750:	1b64      	subs	r4, r4, r5
 8001752:	10a4      	asrs	r4, r4, #2
 8001754:	42a6      	cmp	r6, r4
 8001756:	d109      	bne.n	800176c <__libc_init_array+0x24>
 8001758:	2600      	movs	r6, #0
 800175a:	f000 f819 	bl	8001790 <_init>
 800175e:	4c0a      	ldr	r4, [pc, #40]	; (8001788 <__libc_init_array+0x40>)
 8001760:	4d0a      	ldr	r5, [pc, #40]	; (800178c <__libc_init_array+0x44>)
 8001762:	1b64      	subs	r4, r4, r5
 8001764:	10a4      	asrs	r4, r4, #2
 8001766:	42a6      	cmp	r6, r4
 8001768:	d105      	bne.n	8001776 <__libc_init_array+0x2e>
 800176a:	bd70      	pop	{r4, r5, r6, pc}
 800176c:	00b3      	lsls	r3, r6, #2
 800176e:	58eb      	ldr	r3, [r5, r3]
 8001770:	4798      	blx	r3
 8001772:	3601      	adds	r6, #1
 8001774:	e7ee      	b.n	8001754 <__libc_init_array+0xc>
 8001776:	00b3      	lsls	r3, r6, #2
 8001778:	58eb      	ldr	r3, [r5, r3]
 800177a:	4798      	blx	r3
 800177c:	3601      	adds	r6, #1
 800177e:	e7f2      	b.n	8001766 <__libc_init_array+0x1e>
 8001780:	080017e4 	.word	0x080017e4
 8001784:	080017e4 	.word	0x080017e4
 8001788:	080017e8 	.word	0x080017e8
 800178c:	080017e4 	.word	0x080017e4

08001790 <_init>:
 8001790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001796:	bc08      	pop	{r3}
 8001798:	469e      	mov	lr, r3
 800179a:	4770      	bx	lr

0800179c <_fini>:
 800179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017a2:	bc08      	pop	{r3}
 80017a4:	469e      	mov	lr, r3
 80017a6:	4770      	bx	lr
