
Uart String Data Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080016b4  080016b4  000116b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016f0  080016f0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080016f0  080016f0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016f0  080016f0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016f0  080016f0  000116f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016f4  080016f4  000116f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080016f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000001c  08001714  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08001714  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a703  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016c2  00000000  00000000  0002a78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004f0  00000000  00000000  0002be50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000735  00000000  00000000  0002c340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e84a  00000000  00000000  0002ca75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ba59  00000000  00000000  0003b2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00057a2d  00000000  00000000  00046d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d0c  00000000  00000000  0009e748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000400b  00000000  00000000  0009f454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  000a345f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800169c 	.word	0x0800169c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	0800169c 	.word	0x0800169c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000224:	222c      	movs	r2, #44	; 0x2c
 8000226:	2100      	movs	r1, #0
 8000228:	a809      	add	r0, sp, #36	; 0x24
 800022a:	f001 fa0b 	bl	8001644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022e:	2210      	movs	r2, #16
 8000230:	2100      	movs	r1, #0
 8000232:	4668      	mov	r0, sp
 8000234:	f001 fa06 	bl	8001644 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	2210      	movs	r2, #16
 800023a:	2100      	movs	r1, #0
 800023c:	a804      	add	r0, sp, #16
 800023e:	f001 fa01 	bl	8001644 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	330e      	adds	r3, #14
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f000 fa92 	bl	8000778 <HAL_RCC_OscConfig>
 8000254:	2800      	cmp	r0, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000258:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800025a:	e7fe      	b.n	800025a <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	2207      	movs	r2, #7
 800025e:	2300      	movs	r3, #0
 8000260:	9200      	str	r2, [sp, #0]
 8000262:	9301      	str	r3, [sp, #4]
 8000264:	2200      	movs	r2, #0
 8000266:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000268:	2100      	movs	r1, #0
 800026a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	9202      	str	r2, [sp, #8]
 800026e:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000270:	f000 fcdc 	bl	8000c2c <HAL_RCC_ClockConfig>
 8000274:	2800      	cmp	r0, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x5c>
 8000278:	b672      	cpsid	i
  while (1)
 800027a:	e7fe      	b.n	800027a <SystemClock_Config+0x5a>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800027c:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027e:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000280:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000282:	f000 fdbd 	bl	8000e00 <HAL_RCCEx_PeriphCLKConfig>
 8000286:	2800      	cmp	r0, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x6e>
 800028a:	b672      	cpsid	i
  while (1)
 800028c:	e7fe      	b.n	800028c <SystemClock_Config+0x6c>
}
 800028e:	b014      	add	sp, #80	; 0x50
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <main>:
{
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	b083      	sub	sp, #12
  HAL_Init();
 8000298:	f000 f8e2 	bl	8000460 <HAL_Init>
  SystemClock_Config();
 800029c:	f7ff ffc0 	bl	8000220 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a0:	2180      	movs	r1, #128	; 0x80
 80002a2:	4b16      	ldr	r3, [pc, #88]	; (80002fc <main+0x68>)
 80002a4:	0289      	lsls	r1, r1, #10
 80002a6:	695a      	ldr	r2, [r3, #20]
  huart1.Instance = USART1;
 80002a8:	4c15      	ldr	r4, [pc, #84]	; (8000300 <main+0x6c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002aa:	430a      	orrs	r2, r1
 80002ac:	615a      	str	r2, [r3, #20]
 80002ae:	695b      	ldr	r3, [r3, #20]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b0:	220c      	movs	r2, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b2:	400b      	ands	r3, r1
 80002b4:	9301      	str	r3, [sp, #4]
 80002b6:	9b01      	ldr	r3, [sp, #4]
  huart1.Instance = USART1;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <main+0x70>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ba:	0020      	movs	r0, r4
  huart1.Instance = USART1;
 80002bc:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 9600;
 80002be:	2396      	movs	r3, #150	; 0x96
 80002c0:	019b      	lsls	r3, r3, #6
 80002c2:	6063      	str	r3, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c4:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002c6:	6162      	str	r2, [r4, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c8:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002ca:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002cc:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ce:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d0:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002d2:	6223      	str	r3, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002d4:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002d6:	f001 f8f9 	bl	80014cc <HAL_UART_Init>
 80002da:	4d0b      	ldr	r5, [pc, #44]	; (8000308 <main+0x74>)
 80002dc:	2800      	cmp	r0, #0
 80002de:	d001      	beq.n	80002e4 <main+0x50>
 80002e0:	b672      	cpsid	i
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <main+0x4e>
      HAL_UART_Transmit(&huart1, str_buff, sizeof(str_buff), 1000);
 80002e4:	23fa      	movs	r3, #250	; 0xfa
 80002e6:	220e      	movs	r2, #14
 80002e8:	0029      	movs	r1, r5
 80002ea:	0020      	movs	r0, r4
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	f000 fe25 	bl	8000f3c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80002f2:	20fa      	movs	r0, #250	; 0xfa
 80002f4:	0080      	lsls	r0, r0, #2
 80002f6:	f000 f8d5 	bl	80004a4 <HAL_Delay>
  while (1)
 80002fa:	e7f3      	b.n	80002e4 <main+0x50>
 80002fc:	40021000 	.word	0x40021000
 8000300:	20000038 	.word	0x20000038
 8000304:	40013800 	.word	0x40013800
 8000308:	20000000 	.word	0x20000000

0800030c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800030c:	2201      	movs	r2, #1
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <HAL_MspInit+0x2c>)
{
 8000310:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000312:	6999      	ldr	r1, [r3, #24]
 8000314:	4311      	orrs	r1, r2
 8000316:	6199      	str	r1, [r3, #24]
 8000318:	6999      	ldr	r1, [r3, #24]
 800031a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800031c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000322:	69da      	ldr	r2, [r3, #28]
 8000324:	0549      	lsls	r1, r1, #21
 8000326:	430a      	orrs	r2, r1
 8000328:	61da      	str	r2, [r3, #28]
 800032a:	69db      	ldr	r3, [r3, #28]
 800032c:	400b      	ands	r3, r1
 800032e:	9301      	str	r3, [sp, #4]
 8000330:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000332:	b002      	add	sp, #8
 8000334:	4770      	bx	lr
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	40021000 	.word	0x40021000

0800033c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800033c:	b510      	push	{r4, lr}
 800033e:	0004      	movs	r4, r0
 8000340:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	2214      	movs	r2, #20
 8000344:	2100      	movs	r1, #0
 8000346:	a802      	add	r0, sp, #8
 8000348:	f001 f97c 	bl	8001644 <memset>
  if(huart->Instance==USART1)
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <HAL_UART_MspInit+0x60>)
 800034e:	6822      	ldr	r2, [r4, #0]
 8000350:	429a      	cmp	r2, r3
 8000352:	d001      	beq.n	8000358 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000354:	b008      	add	sp, #32
 8000356:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <HAL_UART_MspInit+0x64>)
 800035c:	01c9      	lsls	r1, r1, #7
 800035e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000360:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8000362:	430a      	orrs	r2, r1
 8000364:	619a      	str	r2, [r3, #24]
 8000366:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000368:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 800036a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800036c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 800036e:	9200      	str	r2, [sp, #0]
 8000370:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	0289      	lsls	r1, r1, #10
 8000376:	430a      	orrs	r2, r1
 8000378:	615a      	str	r2, [r3, #20]
 800037a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800037c:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	400b      	ands	r3, r1
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000384:	2302      	movs	r3, #2
 8000386:	9202      	str	r2, [sp, #8]
 8000388:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000390:	3b02      	subs	r3, #2
 8000392:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000394:	f000 f8e4 	bl	8000560 <HAL_GPIO_Init>
}
 8000398:	e7dc      	b.n	8000354 <HAL_UART_MspInit+0x18>
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	40013800 	.word	0x40013800
 80003a0:	40021000 	.word	0x40021000

080003a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003a4:	e7fe      	b.n	80003a4 <NMI_Handler>
 80003a6:	46c0      	nop			; (mov r8, r8)

080003a8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <HardFault_Handler>
 80003aa:	46c0      	nop			; (mov r8, r8)

080003ac <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003ac:	4770      	bx	lr
 80003ae:	46c0      	nop			; (mov r8, r8)

080003b0 <PendSV_Handler>:
 80003b0:	4770      	bx	lr
 80003b2:	46c0      	nop			; (mov r8, r8)

080003b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b6:	f000 f863 	bl	8000480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ba:	bd10      	pop	{r4, pc}

080003bc <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80003bc:	4770      	bx	lr
 80003be:	46c0      	nop			; (mov r8, r8)

080003c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c4:	f7ff fffa 	bl	80003bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <LoopForever+0x6>)
  ldr r1, =_edata
 80003ca:	490d      	ldr	r1, [pc, #52]	; (8000400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <LoopForever+0xe>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d0:	e002      	b.n	80003d8 <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d6:	3304      	adds	r3, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003dc:	d3f9      	bcc.n	80003d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e0:	4c0a      	ldr	r4, [pc, #40]	; (800040c <LoopForever+0x16>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e4:	e001      	b.n	80003ea <LoopFillZerobss>

080003e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e8:	3204      	adds	r2, #4

080003ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ec:	d3fb      	bcc.n	80003e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ee:	f001 f931 	bl	8001654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff ff4f 	bl	8000294 <main>

080003f6 <LoopForever>:

LoopForever:
    b LoopForever
 80003f6:	e7fe      	b.n	80003f6 <LoopForever>
  ldr   r0, =_estack
 80003f8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80003fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000400:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000404:	080016f8 	.word	0x080016f8
  ldr r2, =_sbss
 8000408:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800040c:	200000c4 	.word	0x200000c4

08000410 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC1_IRQHandler>
	...

08000414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000414:	b570      	push	{r4, r5, r6, lr}
 8000416:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000418:	20fa      	movs	r0, #250	; 0xfa
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <HAL_InitTick+0x40>)
 800041c:	0080      	lsls	r0, r0, #2
 800041e:	7819      	ldrb	r1, [r3, #0]
 8000420:	f7ff fe72 	bl	8000108 <__udivsi3>
 8000424:	4d0c      	ldr	r5, [pc, #48]	; (8000458 <HAL_InitTick+0x44>)
 8000426:	0001      	movs	r1, r0
 8000428:	6828      	ldr	r0, [r5, #0]
 800042a:	f7ff fe6d 	bl	8000108 <__udivsi3>
 800042e:	f000 f87d 	bl	800052c <HAL_SYSTICK_Config>
 8000432:	2800      	cmp	r0, #0
 8000434:	d10c      	bne.n	8000450 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8000436:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000438:	2c03      	cmp	r4, #3
 800043a:	d900      	bls.n	800043e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800043c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800043e:	3802      	subs	r0, #2
 8000440:	2200      	movs	r2, #0
 8000442:	0021      	movs	r1, r4
 8000444:	f000 f840 	bl	80004c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <HAL_InitTick+0x48>)
 800044a:	2000      	movs	r0, #0
 800044c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800044e:	e7f5      	b.n	800043c <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000450:	2001      	movs	r0, #1
 8000452:	e7f3      	b.n	800043c <HAL_InitTick+0x28>
 8000454:	20000014 	.word	0x20000014
 8000458:	20000010 	.word	0x20000010
 800045c:	20000018 	.word	0x20000018

08000460 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000460:	2110      	movs	r1, #16
 8000462:	4a06      	ldr	r2, [pc, #24]	; (800047c <HAL_Init+0x1c>)
{
 8000464:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000466:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000468:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800046a:	430b      	orrs	r3, r1
 800046c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800046e:	f7ff ffd1 	bl	8000414 <HAL_InitTick>
  HAL_MspInit();
 8000472:	f7ff ff4b 	bl	800030c <HAL_MspInit>
}
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	40022000 	.word	0x40022000

08000480 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000480:	4a03      	ldr	r2, [pc, #12]	; (8000490 <HAL_IncTick+0x10>)
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <HAL_IncTick+0x14>)
 8000484:	6811      	ldr	r1, [r2, #0]
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	185b      	adds	r3, r3, r1
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	200000c0 	.word	0x200000c0
 8000494:	20000014 	.word	0x20000014

08000498 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000498:	4b01      	ldr	r3, [pc, #4]	; (80004a0 <HAL_GetTick+0x8>)
 800049a:	6818      	ldr	r0, [r3, #0]
}
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	200000c0 	.word	0x200000c0

080004a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004a8:	f7ff fff6 	bl	8000498 <HAL_GetTick>
 80004ac:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ae:	1c63      	adds	r3, r4, #1
 80004b0:	d002      	beq.n	80004b8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80004b2:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <HAL_Delay+0x20>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004b8:	f7ff ffee 	bl	8000498 <HAL_GetTick>
 80004bc:	1b40      	subs	r0, r0, r5
 80004be:	42a0      	cmp	r0, r4
 80004c0:	d3fa      	bcc.n	80004b8 <HAL_Delay+0x14>
  {
  }
}
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	20000014 	.word	0x20000014

080004c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004c8:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db14      	blt.n	80004f8 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <HAL_NVIC_SetPriority+0x5c>)
 80004d0:	2203      	movs	r2, #3
 80004d2:	469c      	mov	ip, r3
 80004d4:	23ff      	movs	r3, #255	; 0xff
 80004d6:	0884      	lsrs	r4, r0, #2
 80004d8:	4002      	ands	r2, r0
 80004da:	0018      	movs	r0, r3
 80004dc:	26c0      	movs	r6, #192	; 0xc0
 80004de:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004e0:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e2:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004e4:	400b      	ands	r3, r1
 80004e6:	4093      	lsls	r3, r2
 80004e8:	00a4      	lsls	r4, r4, #2
 80004ea:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ec:	00b6      	lsls	r6, r6, #2
 80004ee:	59a5      	ldr	r5, [r4, r6]
 80004f0:	4385      	bics	r5, r0
 80004f2:	432b      	orrs	r3, r5
 80004f4:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <HAL_NVIC_SetPriority+0x60>)
 80004fa:	230f      	movs	r3, #15
 80004fc:	4694      	mov	ip, r2
 80004fe:	2203      	movs	r2, #3
 8000500:	4003      	ands	r3, r0
 8000502:	4010      	ands	r0, r2
 8000504:	32fc      	adds	r2, #252	; 0xfc
 8000506:	0015      	movs	r5, r2
 8000508:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800050a:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800050c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800050e:	400a      	ands	r2, r1
 8000510:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000512:	3b08      	subs	r3, #8
 8000514:	089b      	lsrs	r3, r3, #2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4463      	add	r3, ip
 800051a:	69dc      	ldr	r4, [r3, #28]
 800051c:	43ac      	bics	r4, r5
 800051e:	4322      	orrs	r2, r4
 8000520:	61da      	str	r2, [r3, #28]
 8000522:	e7e8      	b.n	80004f6 <HAL_NVIC_SetPriority+0x2e>
 8000524:	e000e100 	.word	0xe000e100
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800052c:	2280      	movs	r2, #128	; 0x80
 800052e:	1e43      	subs	r3, r0, #1
 8000530:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000532:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000534:	4293      	cmp	r3, r2
 8000536:	d20e      	bcs.n	8000556 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000538:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800053a:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800053c:	4807      	ldr	r0, [pc, #28]	; (800055c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800053e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000540:	6a03      	ldr	r3, [r0, #32]
 8000542:	0609      	lsls	r1, r1, #24
 8000544:	021b      	lsls	r3, r3, #8
 8000546:	0a1b      	lsrs	r3, r3, #8
 8000548:	430b      	orrs	r3, r1
 800054a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800054c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800054e:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000550:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000552:	3307      	adds	r3, #7
 8000554:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000556:	4770      	bx	lr
 8000558:	e000e010 	.word	0xe000e010
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	46de      	mov	lr, fp
 8000564:	4657      	mov	r7, sl
 8000566:	464e      	mov	r6, r9
 8000568:	4645      	mov	r5, r8
 800056a:	b5e0      	push	{r5, r6, r7, lr}
 800056c:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800056e:	6809      	ldr	r1, [r1, #0]
 8000570:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000572:	2300      	movs	r3, #0
{
 8000574:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000576:	2900      	cmp	r1, #0
 8000578:	d07c      	beq.n	8000674 <HAL_GPIO_Init+0x114>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	4c79      	ldr	r4, [pc, #484]	; (8000760 <HAL_GPIO_Init+0x200>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800057c:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057e:	46a3      	mov	fp, r4
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000580:	2601      	movs	r6, #1
 8000582:	000c      	movs	r4, r1
 8000584:	409e      	lsls	r6, r3
 8000586:	4034      	ands	r4, r6
 8000588:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 800058a:	4231      	tst	r1, r6
 800058c:	d06c      	beq.n	8000668 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800058e:	4654      	mov	r4, sl
 8000590:	2503      	movs	r5, #3
 8000592:	6864      	ldr	r4, [r4, #4]
 8000594:	4025      	ands	r5, r4
 8000596:	46ac      	mov	ip, r5
 8000598:	3d01      	subs	r5, #1
 800059a:	2d01      	cmp	r5, #1
 800059c:	d800      	bhi.n	80005a0 <HAL_GPIO_Init+0x40>
 800059e:	e070      	b.n	8000682 <HAL_GPIO_Init+0x122>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80005a0:	4665      	mov	r5, ip
 80005a2:	2d03      	cmp	r5, #3
 80005a4:	d000      	beq.n	80005a8 <HAL_GPIO_Init+0x48>
 80005a6:	e0b3      	b.n	8000710 <HAL_GPIO_Init+0x1b0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80005a8:	4666      	mov	r6, ip
 80005aa:	4096      	lsls	r6, r2
 80005ac:	43f5      	mvns	r5, r6
 80005ae:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 80005b0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80005b2:	9d02      	ldr	r5, [sp, #8]
 80005b4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80005b6:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80005b8:	25c0      	movs	r5, #192	; 0xc0
 80005ba:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 80005bc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80005be:	422c      	tst	r4, r5
 80005c0:	d052      	beq.n	8000668 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c2:	465d      	mov	r5, fp
 80005c4:	2601      	movs	r6, #1
 80005c6:	465f      	mov	r7, fp
 80005c8:	69ad      	ldr	r5, [r5, #24]
 80005ca:	4335      	orrs	r5, r6
 80005cc:	61bd      	str	r5, [r7, #24]
 80005ce:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005d0:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4035      	ands	r5, r6
 80005d4:	4e63      	ldr	r6, [pc, #396]	; (8000764 <HAL_GPIO_Init+0x204>)
 80005d6:	9505      	str	r5, [sp, #20]
 80005d8:	46b4      	mov	ip, r6
 80005da:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005dc:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 80005de:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005e0:	00bf      	lsls	r7, r7, #2
 80005e2:	00ad      	lsls	r5, r5, #2
 80005e4:	4465      	add	r5, ip
 80005e6:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 80005e8:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005ea:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 80005ec:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005ee:	4666      	mov	r6, ip
 80005f0:	40b7      	lsls	r7, r6
 80005f2:	003e      	movs	r6, r7
 80005f4:	464f      	mov	r7, r9
 80005f6:	43b7      	bics	r7, r6
 80005f8:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005fa:	2790      	movs	r7, #144	; 0x90
 80005fc:	05ff      	lsls	r7, r7, #23
 80005fe:	42b8      	cmp	r0, r7
 8000600:	d012      	beq.n	8000628 <HAL_GPIO_Init+0xc8>
 8000602:	4f59      	ldr	r7, [pc, #356]	; (8000768 <HAL_GPIO_Init+0x208>)
 8000604:	42b8      	cmp	r0, r7
 8000606:	d100      	bne.n	800060a <HAL_GPIO_Init+0xaa>
 8000608:	e09b      	b.n	8000742 <HAL_GPIO_Init+0x1e2>
 800060a:	4f58      	ldr	r7, [pc, #352]	; (800076c <HAL_GPIO_Init+0x20c>)
 800060c:	42b8      	cmp	r0, r7
 800060e:	d100      	bne.n	8000612 <HAL_GPIO_Init+0xb2>
 8000610:	e09f      	b.n	8000752 <HAL_GPIO_Init+0x1f2>
 8000612:	4f57      	ldr	r7, [pc, #348]	; (8000770 <HAL_GPIO_Init+0x210>)
 8000614:	42b8      	cmp	r0, r7
 8000616:	d100      	bne.n	800061a <HAL_GPIO_Init+0xba>
 8000618:	e08c      	b.n	8000734 <HAL_GPIO_Init+0x1d4>
 800061a:	4666      	mov	r6, ip
 800061c:	2705      	movs	r7, #5
 800061e:	40b7      	lsls	r7, r6
 8000620:	003e      	movs	r6, r7
 8000622:	464f      	mov	r7, r9
 8000624:	4337      	orrs	r7, r6
 8000626:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000628:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800062a:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 800062c:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 800062e:	4d51      	ldr	r5, [pc, #324]	; (8000774 <HAL_GPIO_Init+0x214>)
        temp &= ~(iocurrent);
 8000630:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000632:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8000634:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 8000636:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000638:	423c      	tst	r4, r7
 800063a:	d000      	beq.n	800063e <HAL_GPIO_Init+0xde>
 800063c:	e077      	b.n	800072e <HAL_GPIO_Init+0x1ce>
        temp &= ~(iocurrent);
 800063e:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000640:	4f4c      	ldr	r7, [pc, #304]	; (8000774 <HAL_GPIO_Init+0x214>)
 8000642:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8000644:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000646:	02a7      	lsls	r7, r4, #10
 8000648:	d46e      	bmi.n	8000728 <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 800064a:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800064c:	4f49      	ldr	r7, [pc, #292]	; (8000774 <HAL_GPIO_Init+0x214>)
 800064e:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000650:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000652:	03a7      	lsls	r7, r4, #14
 8000654:	d465      	bmi.n	8000722 <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 8000656:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000658:	4f46      	ldr	r7, [pc, #280]	; (8000774 <HAL_GPIO_Init+0x214>)
 800065a:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 800065c:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800065e:	03e4      	lsls	r4, r4, #15
 8000660:	d45b      	bmi.n	800071a <HAL_GPIO_Init+0x1ba>
        temp &= ~(iocurrent);
 8000662:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000664:	4c43      	ldr	r4, [pc, #268]	; (8000774 <HAL_GPIO_Init+0x214>)
 8000666:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000668:	000c      	movs	r4, r1
      }
    }

    position++;
 800066a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800066c:	40dc      	lsrs	r4, r3
 800066e:	3202      	adds	r2, #2
 8000670:	2c00      	cmp	r4, #0
 8000672:	d185      	bne.n	8000580 <HAL_GPIO_Init+0x20>
  } 
}
 8000674:	b007      	add	sp, #28
 8000676:	bcf0      	pop	{r4, r5, r6, r7}
 8000678:	46bb      	mov	fp, r7
 800067a:	46b2      	mov	sl, r6
 800067c:	46a9      	mov	r9, r5
 800067e:	46a0      	mov	r8, r4
 8000680:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000682:	6885      	ldr	r5, [r0, #8]
 8000684:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000686:	2503      	movs	r5, #3
 8000688:	4095      	lsls	r5, r2
 800068a:	46a8      	mov	r8, r5
 800068c:	43ed      	mvns	r5, r5
 800068e:	464f      	mov	r7, r9
 8000690:	9502      	str	r5, [sp, #8]
 8000692:	4645      	mov	r5, r8
 8000694:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000696:	4655      	mov	r5, sl
 8000698:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800069a:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800069c:	002f      	movs	r7, r5
 800069e:	4097      	lsls	r7, r2
 80006a0:	46b8      	mov	r8, r7
 80006a2:	464f      	mov	r7, r9
 80006a4:	4645      	mov	r5, r8
 80006a6:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80006a8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006aa:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006ac:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006ae:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006b0:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006b2:	0926      	lsrs	r6, r4, #4
 80006b4:	402e      	ands	r6, r5
 80006b6:	409e      	lsls	r6, r3
 80006b8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006ba:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80006bc:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80006be:	9d02      	ldr	r5, [sp, #8]
 80006c0:	402e      	ands	r6, r5
 80006c2:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80006c4:	4656      	mov	r6, sl
 80006c6:	68b6      	ldr	r6, [r6, #8]
 80006c8:	4647      	mov	r7, r8
 80006ca:	4096      	lsls	r6, r2
 80006cc:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80006ce:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006d0:	4667      	mov	r7, ip
 80006d2:	4666      	mov	r6, ip
 80006d4:	4096      	lsls	r6, r2
 80006d6:	2f02      	cmp	r7, #2
 80006d8:	d000      	beq.n	80006dc <HAL_GPIO_Init+0x17c>
 80006da:	e769      	b.n	80005b0 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 80006dc:	08dd      	lsrs	r5, r3, #3
 80006de:	00ad      	lsls	r5, r5, #2
 80006e0:	46ac      	mov	ip, r5
 80006e2:	4484      	add	ip, r0
 80006e4:	4665      	mov	r5, ip
 80006e6:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006e8:	2507      	movs	r5, #7
 80006ea:	401d      	ands	r5, r3
 80006ec:	00ad      	lsls	r5, r5, #2
 80006ee:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 80006f0:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006f2:	250f      	movs	r5, #15
 80006f4:	4647      	mov	r7, r8
 80006f6:	40bd      	lsls	r5, r7
 80006f8:	9f03      	ldr	r7, [sp, #12]
 80006fa:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006fc:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006fe:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000700:	4647      	mov	r7, r8
 8000702:	692d      	ldr	r5, [r5, #16]
 8000704:	40bd      	lsls	r5, r7
 8000706:	9f03      	ldr	r7, [sp, #12]
 8000708:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 800070a:	4665      	mov	r5, ip
 800070c:	622f      	str	r7, [r5, #32]
 800070e:	e74f      	b.n	80005b0 <HAL_GPIO_Init+0x50>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000710:	2503      	movs	r5, #3
 8000712:	4095      	lsls	r5, r2
 8000714:	43ed      	mvns	r5, r5
 8000716:	9502      	str	r5, [sp, #8]
 8000718:	e7d0      	b.n	80006bc <HAL_GPIO_Init+0x15c>
          temp |= iocurrent;
 800071a:	9c01      	ldr	r4, [sp, #4]
 800071c:	432c      	orrs	r4, r5
 800071e:	0025      	movs	r5, r4
 8000720:	e7a0      	b.n	8000664 <HAL_GPIO_Init+0x104>
          temp |= iocurrent;
 8000722:	9f01      	ldr	r7, [sp, #4]
 8000724:	433d      	orrs	r5, r7
 8000726:	e797      	b.n	8000658 <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 8000728:	9f01      	ldr	r7, [sp, #4]
 800072a:	433d      	orrs	r5, r7
 800072c:	e78e      	b.n	800064c <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 800072e:	9f01      	ldr	r7, [sp, #4]
 8000730:	433d      	orrs	r5, r7
 8000732:	e785      	b.n	8000640 <HAL_GPIO_Init+0xe0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000734:	4667      	mov	r7, ip
 8000736:	2603      	movs	r6, #3
 8000738:	40be      	lsls	r6, r7
 800073a:	464f      	mov	r7, r9
 800073c:	4337      	orrs	r7, r6
 800073e:	46b9      	mov	r9, r7
 8000740:	e772      	b.n	8000628 <HAL_GPIO_Init+0xc8>
 8000742:	4666      	mov	r6, ip
 8000744:	2701      	movs	r7, #1
 8000746:	40b7      	lsls	r7, r6
 8000748:	003e      	movs	r6, r7
 800074a:	464f      	mov	r7, r9
 800074c:	4337      	orrs	r7, r6
 800074e:	46b9      	mov	r9, r7
 8000750:	e76a      	b.n	8000628 <HAL_GPIO_Init+0xc8>
 8000752:	4667      	mov	r7, ip
 8000754:	2602      	movs	r6, #2
 8000756:	40be      	lsls	r6, r7
 8000758:	464f      	mov	r7, r9
 800075a:	4337      	orrs	r7, r6
 800075c:	46b9      	mov	r9, r7
 800075e:	e763      	b.n	8000628 <HAL_GPIO_Init+0xc8>
 8000760:	40021000 	.word	0x40021000
 8000764:	40010000 	.word	0x40010000
 8000768:	48000400 	.word	0x48000400
 800076c:	48000800 	.word	0x48000800
 8000770:	48000c00 	.word	0x48000c00
 8000774:	40010400 	.word	0x40010400

08000778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077a:	46ce      	mov	lr, r9
 800077c:	4647      	mov	r7, r8
 800077e:	b580      	push	{r7, lr}
 8000780:	0004      	movs	r4, r0
 8000782:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000784:	2800      	cmp	r0, #0
 8000786:	d100      	bne.n	800078a <HAL_RCC_OscConfig+0x12>
 8000788:	e0ee      	b.n	8000968 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800078a:	6803      	ldr	r3, [r0, #0]
 800078c:	07da      	lsls	r2, r3, #31
 800078e:	d535      	bpl.n	80007fc <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000790:	210c      	movs	r1, #12
 8000792:	48c3      	ldr	r0, [pc, #780]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 8000794:	6842      	ldr	r2, [r0, #4]
 8000796:	400a      	ands	r2, r1
 8000798:	2a04      	cmp	r2, #4
 800079a:	d100      	bne.n	800079e <HAL_RCC_OscConfig+0x26>
 800079c:	e101      	b.n	80009a2 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800079e:	6842      	ldr	r2, [r0, #4]
 80007a0:	4011      	ands	r1, r2
 80007a2:	2908      	cmp	r1, #8
 80007a4:	d100      	bne.n	80007a8 <HAL_RCC_OscConfig+0x30>
 80007a6:	e0f8      	b.n	800099a <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007a8:	6863      	ldr	r3, [r4, #4]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d00f      	beq.n	80007ce <HAL_RCC_OscConfig+0x56>
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d100      	bne.n	80007b4 <HAL_RCC_OscConfig+0x3c>
 80007b2:	e11e      	b.n	80009f2 <HAL_RCC_OscConfig+0x27a>
 80007b4:	2b05      	cmp	r3, #5
 80007b6:	d100      	bne.n	80007ba <HAL_RCC_OscConfig+0x42>
 80007b8:	e1a7      	b.n	8000b0a <HAL_RCC_OscConfig+0x392>
 80007ba:	4bb9      	ldr	r3, [pc, #740]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 80007bc:	49b9      	ldr	r1, [pc, #740]	; (8000aa4 <HAL_RCC_OscConfig+0x32c>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	400a      	ands	r2, r1
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	49b8      	ldr	r1, [pc, #736]	; (8000aa8 <HAL_RCC_OscConfig+0x330>)
 80007c8:	400a      	ands	r2, r1
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	e005      	b.n	80007da <HAL_RCC_OscConfig+0x62>
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	4ab3      	ldr	r2, [pc, #716]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 80007d2:	025b      	lsls	r3, r3, #9
 80007d4:	6811      	ldr	r1, [r2, #0]
 80007d6:	430b      	orrs	r3, r1
 80007d8:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007da:	f7ff fe5d 	bl	8000498 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007de:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80007e0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007e2:	4faf      	ldr	r7, [pc, #700]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 80007e4:	02b6      	lsls	r6, r6, #10
 80007e6:	e005      	b.n	80007f4 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007e8:	f7ff fe56 	bl	8000498 <HAL_GetTick>
 80007ec:	1b40      	subs	r0, r0, r5
 80007ee:	2864      	cmp	r0, #100	; 0x64
 80007f0:	d900      	bls.n	80007f4 <HAL_RCC_OscConfig+0x7c>
 80007f2:	e0fc      	b.n	80009ee <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	4233      	tst	r3, r6
 80007f8:	d0f6      	beq.n	80007e8 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	079a      	lsls	r2, r3, #30
 80007fe:	d529      	bpl.n	8000854 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000800:	220c      	movs	r2, #12
 8000802:	49a7      	ldr	r1, [pc, #668]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 8000804:	6848      	ldr	r0, [r1, #4]
 8000806:	4202      	tst	r2, r0
 8000808:	d100      	bne.n	800080c <HAL_RCC_OscConfig+0x94>
 800080a:	e0a6      	b.n	800095a <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800080c:	6848      	ldr	r0, [r1, #4]
 800080e:	4002      	ands	r2, r0
 8000810:	2a08      	cmp	r2, #8
 8000812:	d100      	bne.n	8000816 <HAL_RCC_OscConfig+0x9e>
 8000814:	e09d      	b.n	8000952 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000816:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000818:	4da1      	ldr	r5, [pc, #644]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800081a:	2b00      	cmp	r3, #0
 800081c:	d100      	bne.n	8000820 <HAL_RCC_OscConfig+0xa8>
 800081e:	e11f      	b.n	8000a60 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8000820:	2201      	movs	r2, #1
 8000822:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000824:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000826:	4313      	orrs	r3, r2
 8000828:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800082a:	f7ff fe35 	bl	8000498 <HAL_GetTick>
 800082e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000830:	e005      	b.n	800083e <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000832:	f7ff fe31 	bl	8000498 <HAL_GetTick>
 8000836:	1b80      	subs	r0, r0, r6
 8000838:	2802      	cmp	r0, #2
 800083a:	d900      	bls.n	800083e <HAL_RCC_OscConfig+0xc6>
 800083c:	e0d7      	b.n	80009ee <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800083e:	682b      	ldr	r3, [r5, #0]
 8000840:	421f      	tst	r7, r3
 8000842:	d0f6      	beq.n	8000832 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000844:	21f8      	movs	r1, #248	; 0xf8
 8000846:	682a      	ldr	r2, [r5, #0]
 8000848:	6923      	ldr	r3, [r4, #16]
 800084a:	438a      	bics	r2, r1
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	4313      	orrs	r3, r2
 8000850:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	071a      	lsls	r2, r3, #28
 8000856:	d42d      	bmi.n	80008b4 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000858:	075a      	lsls	r2, r3, #29
 800085a:	d544      	bpl.n	80008e6 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800085c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800085e:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000860:	4b8f      	ldr	r3, [pc, #572]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 8000862:	0552      	lsls	r2, r2, #21
 8000864:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000866:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000868:	4211      	tst	r1, r2
 800086a:	d108      	bne.n	800087e <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	69d9      	ldr	r1, [r3, #28]
 800086e:	4311      	orrs	r1, r2
 8000870:	61d9      	str	r1, [r3, #28]
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	4013      	ands	r3, r2
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800087a:	2301      	movs	r3, #1
 800087c:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800087e:	2780      	movs	r7, #128	; 0x80
 8000880:	4e8a      	ldr	r6, [pc, #552]	; (8000aac <HAL_RCC_OscConfig+0x334>)
 8000882:	007f      	lsls	r7, r7, #1
 8000884:	6833      	ldr	r3, [r6, #0]
 8000886:	423b      	tst	r3, r7
 8000888:	d100      	bne.n	800088c <HAL_RCC_OscConfig+0x114>
 800088a:	e094      	b.n	80009b6 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800088c:	68a3      	ldr	r3, [r4, #8]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d100      	bne.n	8000894 <HAL_RCC_OscConfig+0x11c>
 8000892:	e0f8      	b.n	8000a86 <HAL_RCC_OscConfig+0x30e>
 8000894:	2b00      	cmp	r3, #0
 8000896:	d100      	bne.n	800089a <HAL_RCC_OscConfig+0x122>
 8000898:	e0c4      	b.n	8000a24 <HAL_RCC_OscConfig+0x2ac>
 800089a:	2b05      	cmp	r3, #5
 800089c:	d100      	bne.n	80008a0 <HAL_RCC_OscConfig+0x128>
 800089e:	e140      	b.n	8000b22 <HAL_RCC_OscConfig+0x3aa>
 80008a0:	2101      	movs	r1, #1
 80008a2:	4b7f      	ldr	r3, [pc, #508]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 80008a4:	6a1a      	ldr	r2, [r3, #32]
 80008a6:	438a      	bics	r2, r1
 80008a8:	621a      	str	r2, [r3, #32]
 80008aa:	6a1a      	ldr	r2, [r3, #32]
 80008ac:	3103      	adds	r1, #3
 80008ae:	438a      	bics	r2, r1
 80008b0:	621a      	str	r2, [r3, #32]
 80008b2:	e0ec      	b.n	8000a8e <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008b4:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 80008b6:	4d7a      	ldr	r5, [pc, #488]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d05b      	beq.n	8000974 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 80008bc:	2201      	movs	r2, #1
 80008be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008c0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80008c2:	4313      	orrs	r3, r2
 80008c4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80008c6:	f7ff fde7 	bl	8000498 <HAL_GetTick>
 80008ca:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008cc:	e005      	b.n	80008da <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008ce:	f7ff fde3 	bl	8000498 <HAL_GetTick>
 80008d2:	1b80      	subs	r0, r0, r6
 80008d4:	2802      	cmp	r0, #2
 80008d6:	d900      	bls.n	80008da <HAL_RCC_OscConfig+0x162>
 80008d8:	e089      	b.n	80009ee <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80008dc:	421f      	tst	r7, r3
 80008de:	d0f6      	beq.n	80008ce <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008e0:	6823      	ldr	r3, [r4, #0]
 80008e2:	075a      	lsls	r2, r3, #29
 80008e4:	d4ba      	bmi.n	800085c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80008e6:	06db      	lsls	r3, r3, #27
 80008e8:	d512      	bpl.n	8000910 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80008ea:	6963      	ldr	r3, [r4, #20]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d100      	bne.n	80008f2 <HAL_RCC_OscConfig+0x17a>
 80008f0:	e13d      	b.n	8000b6e <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80008f2:	3305      	adds	r3, #5
 80008f4:	d000      	beq.n	80008f8 <HAL_RCC_OscConfig+0x180>
 80008f6:	e0e9      	b.n	8000acc <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80008f8:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80008fa:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80008fc:	4a68      	ldr	r2, [pc, #416]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 80008fe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000900:	438b      	bics	r3, r1
 8000902:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000904:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000906:	69a3      	ldr	r3, [r4, #24]
 8000908:	4381      	bics	r1, r0
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	430b      	orrs	r3, r1
 800090e:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000910:	6a23      	ldr	r3, [r4, #32]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d01b      	beq.n	800094e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000916:	220c      	movs	r2, #12
 8000918:	4d61      	ldr	r5, [pc, #388]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 800091a:	6869      	ldr	r1, [r5, #4]
 800091c:	400a      	ands	r2, r1
 800091e:	2a08      	cmp	r2, #8
 8000920:	d100      	bne.n	8000924 <HAL_RCC_OscConfig+0x1ac>
 8000922:	e108      	b.n	8000b36 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000924:	2b02      	cmp	r3, #2
 8000926:	d100      	bne.n	800092a <HAL_RCC_OscConfig+0x1b2>
 8000928:	e13f      	b.n	8000baa <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800092a:	682b      	ldr	r3, [r5, #0]
 800092c:	4a60      	ldr	r2, [pc, #384]	; (8000ab0 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800092e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000930:	4013      	ands	r3, r2
 8000932:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000934:	f7ff fdb0 	bl	8000498 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000938:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800093a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800093c:	e004      	b.n	8000948 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800093e:	f7ff fdab 	bl	8000498 <HAL_GetTick>
 8000942:	1b00      	subs	r0, r0, r4
 8000944:	2802      	cmp	r0, #2
 8000946:	d852      	bhi.n	80009ee <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000948:	682b      	ldr	r3, [r5, #0]
 800094a:	4233      	tst	r3, r6
 800094c:	d1f7      	bne.n	800093e <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 800094e:	2000      	movs	r0, #0
 8000950:	e00b      	b.n	800096a <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000952:	684a      	ldr	r2, [r1, #4]
 8000954:	03d2      	lsls	r2, r2, #15
 8000956:	d500      	bpl.n	800095a <HAL_RCC_OscConfig+0x1e2>
 8000958:	e75d      	b.n	8000816 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800095a:	4a51      	ldr	r2, [pc, #324]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 800095c:	6812      	ldr	r2, [r2, #0]
 800095e:	0792      	lsls	r2, r2, #30
 8000960:	d539      	bpl.n	80009d6 <HAL_RCC_OscConfig+0x25e>
 8000962:	68e2      	ldr	r2, [r4, #12]
 8000964:	2a01      	cmp	r2, #1
 8000966:	d036      	beq.n	80009d6 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8000968:	2001      	movs	r0, #1
}
 800096a:	b003      	add	sp, #12
 800096c:	bcc0      	pop	{r6, r7}
 800096e:	46b9      	mov	r9, r7
 8000970:	46b0      	mov	r8, r6
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8000974:	2201      	movs	r2, #1
 8000976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000978:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800097a:	4393      	bics	r3, r2
 800097c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800097e:	f7ff fd8b 	bl	8000498 <HAL_GetTick>
 8000982:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000984:	e004      	b.n	8000990 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000986:	f7ff fd87 	bl	8000498 <HAL_GetTick>
 800098a:	1b80      	subs	r0, r0, r6
 800098c:	2802      	cmp	r0, #2
 800098e:	d82e      	bhi.n	80009ee <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000990:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000992:	421f      	tst	r7, r3
 8000994:	d1f7      	bne.n	8000986 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	e7a3      	b.n	80008e2 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800099a:	6842      	ldr	r2, [r0, #4]
 800099c:	03d2      	lsls	r2, r2, #15
 800099e:	d400      	bmi.n	80009a2 <HAL_RCC_OscConfig+0x22a>
 80009a0:	e702      	b.n	80007a8 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009a2:	4a3f      	ldr	r2, [pc, #252]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 80009a4:	6812      	ldr	r2, [r2, #0]
 80009a6:	0392      	lsls	r2, r2, #14
 80009a8:	d400      	bmi.n	80009ac <HAL_RCC_OscConfig+0x234>
 80009aa:	e727      	b.n	80007fc <HAL_RCC_OscConfig+0x84>
 80009ac:	6862      	ldr	r2, [r4, #4]
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d000      	beq.n	80009b4 <HAL_RCC_OscConfig+0x23c>
 80009b2:	e723      	b.n	80007fc <HAL_RCC_OscConfig+0x84>
 80009b4:	e7d8      	b.n	8000968 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009b6:	6833      	ldr	r3, [r6, #0]
 80009b8:	433b      	orrs	r3, r7
 80009ba:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80009bc:	f7ff fd6c 	bl	8000498 <HAL_GetTick>
 80009c0:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c2:	e004      	b.n	80009ce <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009c4:	f7ff fd68 	bl	8000498 <HAL_GetTick>
 80009c8:	1b40      	subs	r0, r0, r5
 80009ca:	2864      	cmp	r0, #100	; 0x64
 80009cc:	d80f      	bhi.n	80009ee <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ce:	6833      	ldr	r3, [r6, #0]
 80009d0:	423b      	tst	r3, r7
 80009d2:	d0f7      	beq.n	80009c4 <HAL_RCC_OscConfig+0x24c>
 80009d4:	e75a      	b.n	800088c <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d6:	25f8      	movs	r5, #248	; 0xf8
 80009d8:	4831      	ldr	r0, [pc, #196]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 80009da:	6922      	ldr	r2, [r4, #16]
 80009dc:	6801      	ldr	r1, [r0, #0]
 80009de:	00d2      	lsls	r2, r2, #3
 80009e0:	43a9      	bics	r1, r5
 80009e2:	430a      	orrs	r2, r1
 80009e4:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009e6:	071a      	lsls	r2, r3, #28
 80009e8:	d400      	bmi.n	80009ec <HAL_RCC_OscConfig+0x274>
 80009ea:	e735      	b.n	8000858 <HAL_RCC_OscConfig+0xe0>
 80009ec:	e762      	b.n	80008b4 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 80009ee:	2003      	movs	r0, #3
 80009f0:	e7bb      	b.n	800096a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009f2:	4d2b      	ldr	r5, [pc, #172]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 80009f4:	4a2b      	ldr	r2, [pc, #172]	; (8000aa4 <HAL_RCC_OscConfig+0x32c>)
 80009f6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009f8:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009fa:	4013      	ands	r3, r2
 80009fc:	602b      	str	r3, [r5, #0]
 80009fe:	682b      	ldr	r3, [r5, #0]
 8000a00:	4a29      	ldr	r2, [pc, #164]	; (8000aa8 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a02:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a04:	4013      	ands	r3, r2
 8000a06:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a08:	f7ff fd46 	bl	8000498 <HAL_GetTick>
 8000a0c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a0e:	e004      	b.n	8000a1a <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a10:	f7ff fd42 	bl	8000498 <HAL_GetTick>
 8000a14:	1b80      	subs	r0, r0, r6
 8000a16:	2864      	cmp	r0, #100	; 0x64
 8000a18:	d8e9      	bhi.n	80009ee <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a1a:	682b      	ldr	r3, [r5, #0]
 8000a1c:	423b      	tst	r3, r7
 8000a1e:	d1f7      	bne.n	8000a10 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a20:	6823      	ldr	r3, [r4, #0]
 8000a22:	e6eb      	b.n	80007fc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a24:	2201      	movs	r2, #1
 8000a26:	4e1e      	ldr	r6, [pc, #120]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a28:	4d22      	ldr	r5, [pc, #136]	; (8000ab4 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a2a:	6a33      	ldr	r3, [r6, #32]
 8000a2c:	4393      	bics	r3, r2
 8000a2e:	6233      	str	r3, [r6, #32]
 8000a30:	6a33      	ldr	r3, [r6, #32]
 8000a32:	3203      	adds	r2, #3
 8000a34:	4393      	bics	r3, r2
 8000a36:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8000a38:	f7ff fd2e 	bl	8000498 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a3c:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8000a3e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a40:	4698      	mov	r8, r3
 8000a42:	e004      	b.n	8000a4e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a44:	f7ff fd28 	bl	8000498 <HAL_GetTick>
 8000a48:	1bc0      	subs	r0, r0, r7
 8000a4a:	42a8      	cmp	r0, r5
 8000a4c:	d8cf      	bhi.n	80009ee <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a4e:	4642      	mov	r2, r8
 8000a50:	6a33      	ldr	r3, [r6, #32]
 8000a52:	421a      	tst	r2, r3
 8000a54:	d1f6      	bne.n	8000a44 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8000a56:	464b      	mov	r3, r9
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d04f      	beq.n	8000afc <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	e742      	b.n	80008e6 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8000a60:	2201      	movs	r2, #1
 8000a62:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a64:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000a66:	4393      	bics	r3, r2
 8000a68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a6a:	f7ff fd15 	bl	8000498 <HAL_GetTick>
 8000a6e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a70:	e004      	b.n	8000a7c <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a72:	f7ff fd11 	bl	8000498 <HAL_GetTick>
 8000a76:	1b80      	subs	r0, r0, r6
 8000a78:	2802      	cmp	r0, #2
 8000a7a:	d8b8      	bhi.n	80009ee <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	421f      	tst	r7, r3
 8000a80:	d1f7      	bne.n	8000a72 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	e6e6      	b.n	8000854 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a86:	4906      	ldr	r1, [pc, #24]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 8000a88:	6a0a      	ldr	r2, [r1, #32]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000a8e:	f7ff fd03 	bl	8000498 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a92:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8000a94:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a96:	4698      	mov	r8, r3
 8000a98:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a9a:	4d06      	ldr	r5, [pc, #24]	; (8000ab4 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a9c:	e011      	b.n	8000ac2 <HAL_RCC_OscConfig+0x34a>
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	fffeffff 	.word	0xfffeffff
 8000aa8:	fffbffff 	.word	0xfffbffff
 8000aac:	40007000 	.word	0x40007000
 8000ab0:	feffffff 	.word	0xfeffffff
 8000ab4:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab8:	f7ff fcee 	bl	8000498 <HAL_GetTick>
 8000abc:	1b80      	subs	r0, r0, r6
 8000abe:	42a8      	cmp	r0, r5
 8000ac0:	d895      	bhi.n	80009ee <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac2:	4643      	mov	r3, r8
 8000ac4:	6a1b      	ldr	r3, [r3, #32]
 8000ac6:	421f      	tst	r7, r3
 8000ac8:	d0f6      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x340>
 8000aca:	e7c4      	b.n	8000a56 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000acc:	2204      	movs	r2, #4
 8000ace:	4d53      	ldr	r5, [pc, #332]	; (8000c1c <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ad0:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ad2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000ad8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ada:	3a03      	subs	r2, #3
 8000adc:	4393      	bics	r3, r2
 8000ade:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ae0:	f7ff fcda 	bl	8000498 <HAL_GetTick>
 8000ae4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ae6:	e005      	b.n	8000af4 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ae8:	f7ff fcd6 	bl	8000498 <HAL_GetTick>
 8000aec:	1b80      	subs	r0, r0, r6
 8000aee:	2802      	cmp	r0, #2
 8000af0:	d900      	bls.n	8000af4 <HAL_RCC_OscConfig+0x37c>
 8000af2:	e77c      	b.n	80009ee <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000af4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000af6:	421f      	tst	r7, r3
 8000af8:	d1f6      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x370>
 8000afa:	e709      	b.n	8000910 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000afc:	4a47      	ldr	r2, [pc, #284]	; (8000c1c <HAL_RCC_OscConfig+0x4a4>)
 8000afe:	4948      	ldr	r1, [pc, #288]	; (8000c20 <HAL_RCC_OscConfig+0x4a8>)
 8000b00:	69d3      	ldr	r3, [r2, #28]
 8000b02:	400b      	ands	r3, r1
 8000b04:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	e6ed      	b.n	80008e6 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	4b43      	ldr	r3, [pc, #268]	; (8000c1c <HAL_RCC_OscConfig+0x4a4>)
 8000b0e:	02d2      	lsls	r2, r2, #11
 8000b10:	6819      	ldr	r1, [r3, #0]
 8000b12:	430a      	orrs	r2, r1
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	6819      	ldr	r1, [r3, #0]
 8000b1a:	0252      	lsls	r2, r2, #9
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	e65b      	b.n	80007da <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b22:	2104      	movs	r1, #4
 8000b24:	4b3d      	ldr	r3, [pc, #244]	; (8000c1c <HAL_RCC_OscConfig+0x4a4>)
 8000b26:	6a1a      	ldr	r2, [r3, #32]
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	621a      	str	r2, [r3, #32]
 8000b2c:	6a1a      	ldr	r2, [r3, #32]
 8000b2e:	3903      	subs	r1, #3
 8000b30:	430a      	orrs	r2, r1
 8000b32:	621a      	str	r2, [r3, #32]
 8000b34:	e7ab      	b.n	8000a8e <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d100      	bne.n	8000b3c <HAL_RCC_OscConfig+0x3c4>
 8000b3a:	e715      	b.n	8000968 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b3c:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8000b3e:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b42:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8000b44:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8000b46:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b48:	4013      	ands	r3, r2
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d000      	beq.n	8000b50 <HAL_RCC_OscConfig+0x3d8>
 8000b4e:	e70c      	b.n	800096a <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000b50:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000b54:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d000      	beq.n	8000b5c <HAL_RCC_OscConfig+0x3e4>
 8000b5a:	e706      	b.n	800096a <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000b5c:	23f0      	movs	r3, #240	; 0xf0
 8000b5e:	039b      	lsls	r3, r3, #14
 8000b60:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000b62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b64:	1ad2      	subs	r2, r2, r3
 8000b66:	1e53      	subs	r3, r2, #1
 8000b68:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 8000b6a:	b2d0      	uxtb	r0, r2
 8000b6c:	e6fd      	b.n	800096a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b6e:	2104      	movs	r1, #4
 8000b70:	4d2a      	ldr	r5, [pc, #168]	; (8000c1c <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b72:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b74:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000b76:	430a      	orrs	r2, r1
 8000b78:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000b7a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000b80:	f7ff fc8a 	bl	8000498 <HAL_GetTick>
 8000b84:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b86:	e005      	b.n	8000b94 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b88:	f7ff fc86 	bl	8000498 <HAL_GetTick>
 8000b8c:	1b80      	subs	r0, r0, r6
 8000b8e:	2802      	cmp	r0, #2
 8000b90:	d900      	bls.n	8000b94 <HAL_RCC_OscConfig+0x41c>
 8000b92:	e72c      	b.n	80009ee <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b94:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000b96:	421f      	tst	r7, r3
 8000b98:	d0f6      	beq.n	8000b88 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b9a:	21f8      	movs	r1, #248	; 0xf8
 8000b9c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000b9e:	69a3      	ldr	r3, [r4, #24]
 8000ba0:	438a      	bics	r2, r1
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	636b      	str	r3, [r5, #52]	; 0x34
 8000ba8:	e6b2      	b.n	8000910 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8000baa:	682b      	ldr	r3, [r5, #0]
 8000bac:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bae:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bb4:	f7ff fc70 	bl	8000498 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bb8:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8000bba:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bbc:	e005      	b.n	8000bca <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bbe:	f7ff fc6b 	bl	8000498 <HAL_GetTick>
 8000bc2:	1b80      	subs	r0, r0, r6
 8000bc4:	2802      	cmp	r0, #2
 8000bc6:	d900      	bls.n	8000bca <HAL_RCC_OscConfig+0x452>
 8000bc8:	e711      	b.n	80009ee <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	423b      	tst	r3, r7
 8000bce:	d1f6      	bne.n	8000bbe <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bd4:	4e11      	ldr	r6, [pc, #68]	; (8000c1c <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bd6:	4393      	bics	r3, r2
 8000bd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000bde:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000be0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000be2:	686a      	ldr	r2, [r5, #4]
 8000be4:	430b      	orrs	r3, r1
 8000be6:	4910      	ldr	r1, [pc, #64]	; (8000c28 <HAL_RCC_OscConfig+0x4b0>)
 8000be8:	400a      	ands	r2, r1
 8000bea:	4313      	orrs	r3, r2
 8000bec:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	682a      	ldr	r2, [r5, #0]
 8000bf2:	045b      	lsls	r3, r3, #17
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fc4e 	bl	8000498 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bfc:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000bfe:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c00:	04ad      	lsls	r5, r5, #18
 8000c02:	e005      	b.n	8000c10 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c04:	f7ff fc48 	bl	8000498 <HAL_GetTick>
 8000c08:	1b00      	subs	r0, r0, r4
 8000c0a:	2802      	cmp	r0, #2
 8000c0c:	d900      	bls.n	8000c10 <HAL_RCC_OscConfig+0x498>
 8000c0e:	e6ee      	b.n	80009ee <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c10:	6833      	ldr	r3, [r6, #0]
 8000c12:	422b      	tst	r3, r5
 8000c14:	d0f6      	beq.n	8000c04 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8000c16:	2000      	movs	r0, #0
 8000c18:	e6a7      	b.n	800096a <HAL_RCC_OscConfig+0x1f2>
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	efffffff 	.word	0xefffffff
 8000c24:	feffffff 	.word	0xfeffffff
 8000c28:	ffc2ffff 	.word	0xffc2ffff

08000c2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2e:	46ce      	mov	lr, r9
 8000c30:	4647      	mov	r7, r8
 8000c32:	0004      	movs	r4, r0
 8000c34:	000d      	movs	r5, r1
 8000c36:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d00d      	beq.n	8000c58 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	494a      	ldr	r1, [pc, #296]	; (8000d68 <HAL_RCC_ClockConfig+0x13c>)
 8000c40:	680a      	ldr	r2, [r1, #0]
 8000c42:	401a      	ands	r2, r3
 8000c44:	42aa      	cmp	r2, r5
 8000c46:	d20c      	bcs.n	8000c62 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c48:	680a      	ldr	r2, [r1, #0]
 8000c4a:	439a      	bics	r2, r3
 8000c4c:	432a      	orrs	r2, r5
 8000c4e:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c50:	680a      	ldr	r2, [r1, #0]
 8000c52:	4013      	ands	r3, r2
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	d004      	beq.n	8000c62 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8000c58:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8000c5a:	bcc0      	pop	{r6, r7}
 8000c5c:	46b9      	mov	r9, r7
 8000c5e:	46b0      	mov	r8, r6
 8000c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c62:	6823      	ldr	r3, [r4, #0]
 8000c64:	079a      	lsls	r2, r3, #30
 8000c66:	d50e      	bpl.n	8000c86 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c68:	075a      	lsls	r2, r3, #29
 8000c6a:	d505      	bpl.n	8000c78 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000c6c:	22e0      	movs	r2, #224	; 0xe0
 8000c6e:	493f      	ldr	r1, [pc, #252]	; (8000d6c <HAL_RCC_ClockConfig+0x140>)
 8000c70:	00d2      	lsls	r2, r2, #3
 8000c72:	6848      	ldr	r0, [r1, #4]
 8000c74:	4302      	orrs	r2, r0
 8000c76:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c78:	20f0      	movs	r0, #240	; 0xf0
 8000c7a:	493c      	ldr	r1, [pc, #240]	; (8000d6c <HAL_RCC_ClockConfig+0x140>)
 8000c7c:	684a      	ldr	r2, [r1, #4]
 8000c7e:	4382      	bics	r2, r0
 8000c80:	68a0      	ldr	r0, [r4, #8]
 8000c82:	4302      	orrs	r2, r0
 8000c84:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c86:	07db      	lsls	r3, r3, #31
 8000c88:	d522      	bpl.n	8000cd0 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c8c:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c90:	2a01      	cmp	r2, #1
 8000c92:	d05b      	beq.n	8000d4c <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c94:	2a02      	cmp	r2, #2
 8000c96:	d056      	beq.n	8000d46 <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c98:	079b      	lsls	r3, r3, #30
 8000c9a:	d5dd      	bpl.n	8000c58 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c9c:	2103      	movs	r1, #3
 8000c9e:	4e33      	ldr	r6, [pc, #204]	; (8000d6c <HAL_RCC_ClockConfig+0x140>)
 8000ca0:	6873      	ldr	r3, [r6, #4]
 8000ca2:	438b      	bics	r3, r1
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ca8:	f7ff fbf6 	bl	8000498 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cac:	230c      	movs	r3, #12
 8000cae:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 8000cb2:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cb4:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cb6:	e004      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cb8:	f7ff fbee 	bl	8000498 <HAL_GetTick>
 8000cbc:	1bc0      	subs	r0, r0, r7
 8000cbe:	4548      	cmp	r0, r9
 8000cc0:	d847      	bhi.n	8000d52 <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cc2:	4643      	mov	r3, r8
 8000cc4:	6872      	ldr	r2, [r6, #4]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	6863      	ldr	r3, [r4, #4]
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d1f3      	bne.n	8000cb8 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4a25      	ldr	r2, [pc, #148]	; (8000d68 <HAL_RCC_ClockConfig+0x13c>)
 8000cd4:	6813      	ldr	r3, [r2, #0]
 8000cd6:	400b      	ands	r3, r1
 8000cd8:	42ab      	cmp	r3, r5
 8000cda:	d905      	bls.n	8000ce8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cdc:	6813      	ldr	r3, [r2, #0]
 8000cde:	438b      	bics	r3, r1
 8000ce0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ce2:	6813      	ldr	r3, [r2, #0]
 8000ce4:	4219      	tst	r1, r3
 8000ce6:	d1b7      	bne.n	8000c58 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	075b      	lsls	r3, r3, #29
 8000cec:	d506      	bpl.n	8000cfc <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000cee:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <HAL_RCC_ClockConfig+0x140>)
 8000cf0:	4920      	ldr	r1, [pc, #128]	; (8000d74 <HAL_RCC_ClockConfig+0x148>)
 8000cf2:	6853      	ldr	r3, [r2, #4]
 8000cf4:	400b      	ands	r3, r1
 8000cf6:	68e1      	ldr	r1, [r4, #12]
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000cfc:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8000cfe:	491b      	ldr	r1, [pc, #108]	; (8000d6c <HAL_RCC_ClockConfig+0x140>)
 8000d00:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d00e      	beq.n	8000d26 <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000d08:	481b      	ldr	r0, [pc, #108]	; (8000d78 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_RCC_ClockConfig+0x140>)
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_RCC_ClockConfig+0x150>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	491b      	ldr	r1, [pc, #108]	; (8000d80 <HAL_RCC_ClockConfig+0x154>)
 8000d12:	061b      	lsls	r3, r3, #24
 8000d14:	0f1b      	lsrs	r3, r3, #28
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	40d8      	lsrs	r0, r3
 8000d1a:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f7ff fb79 	bl	8000414 <HAL_InitTick>
  return HAL_OK;
 8000d22:	2000      	movs	r0, #0
 8000d24:	e799      	b.n	8000c5a <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000d26:	250f      	movs	r5, #15
 8000d28:	4816      	ldr	r0, [pc, #88]	; (8000d84 <HAL_RCC_ClockConfig+0x158>)
 8000d2a:	0c93      	lsrs	r3, r2, #18
 8000d2c:	402b      	ands	r3, r5
 8000d2e:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000d30:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000d32:	03d2      	lsls	r2, r2, #15
 8000d34:	d50f      	bpl.n	8000d56 <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_RCC_ClockConfig+0x15c>)
 8000d38:	400d      	ands	r5, r1
 8000d3a:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000d3c:	480e      	ldr	r0, [pc, #56]	; (8000d78 <HAL_RCC_ClockConfig+0x14c>)
 8000d3e:	f7ff f9e3 	bl	8000108 <__udivsi3>
 8000d42:	4360      	muls	r0, r4
 8000d44:	e7e1      	b.n	8000d0a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d46:	019b      	lsls	r3, r3, #6
 8000d48:	d4a8      	bmi.n	8000c9c <HAL_RCC_ClockConfig+0x70>
 8000d4a:	e785      	b.n	8000c58 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4c:	039b      	lsls	r3, r3, #14
 8000d4e:	d4a5      	bmi.n	8000c9c <HAL_RCC_ClockConfig+0x70>
 8000d50:	e782      	b.n	8000c58 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8000d52:	2003      	movs	r0, #3
 8000d54:	e781      	b.n	8000c5a <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000d56:	0163      	lsls	r3, r4, #5
 8000d58:	1b1b      	subs	r3, r3, r4
 8000d5a:	0198      	lsls	r0, r3, #6
 8000d5c:	1ac0      	subs	r0, r0, r3
 8000d5e:	00c0      	lsls	r0, r0, #3
 8000d60:	1900      	adds	r0, r0, r4
 8000d62:	0200      	lsls	r0, r0, #8
 8000d64:	e7d1      	b.n	8000d0a <HAL_RCC_ClockConfig+0xde>
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	40022000 	.word	0x40022000
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	00001388 	.word	0x00001388
 8000d74:	fffff8ff 	.word	0xfffff8ff
 8000d78:	007a1200 	.word	0x007a1200
 8000d7c:	080016b4 	.word	0x080016b4
 8000d80:	20000010 	.word	0x20000010
 8000d84:	080016cc 	.word	0x080016cc
 8000d88:	080016dc 	.word	0x080016dc

08000d8c <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8000d8c:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8000d8e:	4910      	ldr	r1, [pc, #64]	; (8000dd0 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8000d90:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8000d92:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	d001      	beq.n	8000d9e <HAL_RCC_GetSysClockFreq+0x12>
      sysclockfreq = HSE_VALUE;
 8000d9a:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d9c:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000d9e:	250f      	movs	r5, #15
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <HAL_RCC_GetSysClockFreq+0x4c>)
 8000da2:	0c93      	lsrs	r3, r2, #18
 8000da4:	402b      	ands	r3, r5
 8000da6:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000da8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000daa:	03d2      	lsls	r2, r2, #15
 8000dac:	d507      	bpl.n	8000dbe <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_RCC_GetSysClockFreq+0x50>)
 8000db0:	400d      	ands	r5, r1
 8000db2:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000db4:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <HAL_RCC_GetSysClockFreq+0x48>)
 8000db6:	f7ff f9a7 	bl	8000108 <__udivsi3>
 8000dba:	4360      	muls	r0, r4
 8000dbc:	e7ee      	b.n	8000d9c <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000dbe:	0162      	lsls	r2, r4, #5
 8000dc0:	1b12      	subs	r2, r2, r4
 8000dc2:	0193      	lsls	r3, r2, #6
 8000dc4:	1a9b      	subs	r3, r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	191b      	adds	r3, r3, r4
 8000dca:	0218      	lsls	r0, r3, #8
 8000dcc:	e7e6      	b.n	8000d9c <HAL_RCC_GetSysClockFreq+0x10>
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	007a1200 	.word	0x007a1200
 8000dd8:	080016cc 	.word	0x080016cc
 8000ddc:	080016dc 	.word	0x080016dc

08000de0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	4905      	ldr	r1, [pc, #20]	; (8000dfc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000de8:	055b      	lsls	r3, r3, #21
 8000dea:	0f5b      	lsrs	r3, r3, #29
 8000dec:	5ccb      	ldrb	r3, [r1, r3]
 8000dee:	6810      	ldr	r0, [r2, #0]
 8000df0:	40d8      	lsrs	r0, r3
}    
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000
 8000df8:	20000010 	.word	0x20000010
 8000dfc:	080016c4 	.word	0x080016c4

08000e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	46ce      	mov	lr, r9
 8000e04:	4647      	mov	r7, r8
 8000e06:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e08:	6803      	ldr	r3, [r0, #0]
{
 8000e0a:	0004      	movs	r4, r0
 8000e0c:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e0e:	03da      	lsls	r2, r3, #15
 8000e10:	d530      	bpl.n	8000e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000e16:	0552      	lsls	r2, r2, #21
 8000e18:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000e1a:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1c:	4211      	tst	r1, r2
 8000e1e:	d041      	beq.n	8000ea4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e20:	2680      	movs	r6, #128	; 0x80
 8000e22:	4d41      	ldr	r5, [pc, #260]	; (8000f28 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8000e24:	0076      	lsls	r6, r6, #1
 8000e26:	682b      	ldr	r3, [r5, #0]
 8000e28:	4233      	tst	r3, r6
 8000e2a:	d049      	beq.n	8000ec0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e2c:	4d3d      	ldr	r5, [pc, #244]	; (8000f24 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000e2e:	23c0      	movs	r3, #192	; 0xc0
 8000e30:	6a2a      	ldr	r2, [r5, #32]
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	0010      	movs	r0, r2
 8000e36:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e38:	421a      	tst	r2, r3
 8000e3a:	d063      	beq.n	8000f04 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8000e3c:	6861      	ldr	r1, [r4, #4]
 8000e3e:	400b      	ands	r3, r1
 8000e40:	4283      	cmp	r3, r0
 8000e42:	d00e      	beq.n	8000e62 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e44:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e46:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e48:	6a2e      	ldr	r6, [r5, #32]
 8000e4a:	0240      	lsls	r0, r0, #9
 8000e4c:	4330      	orrs	r0, r6
 8000e4e:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e50:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e52:	4a36      	ldr	r2, [pc, #216]	; (8000f2c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e54:	4e36      	ldr	r6, [pc, #216]	; (8000f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e56:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e58:	4030      	ands	r0, r6
 8000e5a:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000e5c:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e5e:	07db      	lsls	r3, r3, #31
 8000e60:	d43f      	bmi.n	8000ee2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000e62:	4a30      	ldr	r2, [pc, #192]	; (8000f24 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000e64:	4831      	ldr	r0, [pc, #196]	; (8000f2c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8000e66:	6a13      	ldr	r3, [r2, #32]
 8000e68:	4003      	ands	r3, r0
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e6e:	2f01      	cmp	r7, #1
 8000e70:	d051      	beq.n	8000f16 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	07da      	lsls	r2, r3, #31
 8000e76:	d506      	bpl.n	8000e86 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	492a      	ldr	r1, [pc, #168]	; (8000f24 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000e7c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000e7e:	4382      	bics	r2, r0
 8000e80:	68a0      	ldr	r0, [r4, #8]
 8000e82:	4302      	orrs	r2, r0
 8000e84:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000e86:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000e88:	069b      	lsls	r3, r3, #26
 8000e8a:	d506      	bpl.n	8000e9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000e8c:	2110      	movs	r1, #16
 8000e8e:	4a25      	ldr	r2, [pc, #148]	; (8000f24 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000e90:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e92:	438b      	bics	r3, r1
 8000e94:	68e1      	ldr	r1, [r4, #12]
 8000e96:	430b      	orrs	r3, r1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e9a:	b003      	add	sp, #12
 8000e9c:	bcc0      	pop	{r6, r7}
 8000e9e:	46b9      	mov	r9, r7
 8000ea0:	46b0      	mov	r8, r6
 8000ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea4:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea8:	4d1f      	ldr	r5, [pc, #124]	; (8000f28 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4311      	orrs	r1, r2
 8000eac:	61d9      	str	r1, [r3, #28]
 8000eae:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb0:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb8:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8000eba:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ebc:	4233      	tst	r3, r6
 8000ebe:	d1b5      	bne.n	8000e2c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	4333      	orrs	r3, r6
 8000ec4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fae7 	bl	8000498 <HAL_GetTick>
 8000eca:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ecc:	682b      	ldr	r3, [r5, #0]
 8000ece:	4233      	tst	r3, r6
 8000ed0:	d1ac      	bne.n	8000e2c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed2:	f7ff fae1 	bl	8000498 <HAL_GetTick>
 8000ed6:	4643      	mov	r3, r8
 8000ed8:	1ac0      	subs	r0, r0, r3
 8000eda:	2864      	cmp	r0, #100	; 0x64
 8000edc:	d9f6      	bls.n	8000ecc <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 8000ede:	2003      	movs	r0, #3
 8000ee0:	e7db      	b.n	8000e9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fad9 	bl	8000498 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 8000eec:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eee:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef0:	e004      	b.n	8000efc <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ef2:	f7ff fad1 	bl	8000498 <HAL_GetTick>
 8000ef6:	1b80      	subs	r0, r0, r6
 8000ef8:	4548      	cmp	r0, r9
 8000efa:	d8f0      	bhi.n	8000ede <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000efc:	4642      	mov	r2, r8
 8000efe:	6a2b      	ldr	r3, [r5, #32]
 8000f00:	421a      	tst	r2, r3
 8000f02:	d0f6      	beq.n	8000ef2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000f06:	4809      	ldr	r0, [pc, #36]	; (8000f2c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8000f08:	6a13      	ldr	r3, [r2, #32]
 8000f0a:	6861      	ldr	r1, [r4, #4]
 8000f0c:	4003      	ands	r3, r0
 8000f0e:	430b      	orrs	r3, r1
 8000f10:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 8000f12:	2f01      	cmp	r7, #1
 8000f14:	d1ad      	bne.n	8000e72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f16:	69d3      	ldr	r3, [r2, #28]
 8000f18:	4907      	ldr	r1, [pc, #28]	; (8000f38 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	e7a8      	b.n	8000e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40007000 	.word	0x40007000
 8000f2c:	fffffcff 	.word	0xfffffcff
 8000f30:	fffeffff 	.word	0xfffeffff
 8000f34:	00001388 	.word	0x00001388
 8000f38:	efffffff 	.word	0xefffffff

08000f3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3e:	4657      	mov	r7, sl
 8000f40:	464e      	mov	r6, r9
 8000f42:	4645      	mov	r5, r8
 8000f44:	46de      	mov	lr, fp
 8000f46:	b5e0      	push	{r5, r6, r7, lr}
 8000f48:	001e      	movs	r6, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000f4a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8000f4c:	0005      	movs	r5, r0
 8000f4e:	000f      	movs	r7, r1
 8000f50:	0014      	movs	r4, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000f52:	2b20      	cmp	r3, #32
 8000f54:	d000      	beq.n	8000f58 <HAL_UART_Transmit+0x1c>
 8000f56:	e0a8      	b.n	80010aa <HAL_UART_Transmit+0x16e>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f58:	2900      	cmp	r1, #0
 8000f5a:	d04a      	beq.n	8000ff2 <HAL_UART_Transmit+0xb6>
 8000f5c:	2a00      	cmp	r2, #0
 8000f5e:	d048      	beq.n	8000ff2 <HAL_UART_Transmit+0xb6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	6882      	ldr	r2, [r0, #8]
 8000f64:	015b      	lsls	r3, r3, #5
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d104      	bne.n	8000f74 <HAL_UART_Transmit+0x38>
 8000f6a:	6903      	ldr	r3, [r0, #16]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_UART_Transmit+0x38>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8000f70:	07cb      	lsls	r3, r1, #31
 8000f72:	d43e      	bmi.n	8000ff2 <HAL_UART_Transmit+0xb6>
      {
        return  HAL_ERROR;
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f74:	2200      	movs	r2, #0
 8000f76:	2384      	movs	r3, #132	; 0x84
 8000f78:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f7a:	3b63      	subs	r3, #99	; 0x63
 8000f7c:	67eb      	str	r3, [r5, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000f7e:	f7ff fa8b 	bl	8000498 <HAL_GetTick>

    huart->TxXferSize  = Size;
 8000f82:	2350      	movs	r3, #80	; 0x50
 8000f84:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 8000f86:	3302      	adds	r3, #2
      pdata16bits = (const uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 8000f88:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 8000f8a:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 8000f90:	4680      	mov	r8, r0
      pdata16bits = NULL;
 8000f92:	468a      	mov	sl, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f94:	015b      	lsls	r3, r3, #5
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d100      	bne.n	8000f9c <HAL_UART_Transmit+0x60>
 8000f9a:	e0a3      	b.n	80010e4 <HAL_UART_Transmit+0x1a8>
    }

    while (huart->TxXferCount > 0U)
 8000f9c:	2352      	movs	r3, #82	; 0x52
 8000f9e:	5aeb      	ldrh	r3, [r5, r3]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d100      	bne.n	8000fa6 <HAL_UART_Transmit+0x6a>
 8000fa4:	e0d6      	b.n	8001154 <HAL_UART_Transmit+0x218>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8000fa6:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000fa8:	2480      	movs	r4, #128	; 0x80
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8000faa:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000fac:	682b      	ldr	r3, [r5, #0]
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8000fae:	2208      	movs	r2, #8
 8000fb0:	4693      	mov	fp, r2
 8000fb2:	1c72      	adds	r2, r6, #1
 8000fb4:	d124      	bne.n	8001000 <HAL_UART_Transmit+0xc4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000fb6:	69da      	ldr	r2, [r3, #28]
 8000fb8:	4214      	tst	r4, r2
 8000fba:	d0fc      	beq.n	8000fb6 <HAL_UART_Transmit+0x7a>
      if (pdata8bits == NULL)
 8000fbc:	2f00      	cmp	r7, #0
 8000fbe:	d06b      	beq.n	8001098 <HAL_UART_Transmit+0x15c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000fc0:	783a      	ldrb	r2, [r7, #0]
        pdata8bits++;
 8000fc2:	3701      	adds	r7, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8000fc6:	2152      	movs	r1, #82	; 0x52
 8000fc8:	5a6a      	ldrh	r2, [r5, r1]
 8000fca:	3a01      	subs	r2, #1
 8000fcc:	b292      	uxth	r2, r2
 8000fce:	526a      	strh	r2, [r5, r1]
    while (huart->TxXferCount > 0U)
 8000fd0:	5a6a      	ldrh	r2, [r5, r1]
 8000fd2:	2a00      	cmp	r2, #0
 8000fd4:	d1eb      	bne.n	8000fae <HAL_UART_Transmit+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8000fd6:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000fd8:	2440      	movs	r4, #64	; 0x40
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8000fda:	4691      	mov	r9, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8000fdc:	2708      	movs	r7, #8
 8000fde:	1c72      	adds	r2, r6, #1
 8000fe0:	d165      	bne.n	80010ae <HAL_UART_Transmit+0x172>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	69da      	ldr	r2, [r3, #28]
 8000fe6:	4211      	tst	r1, r2
 8000fe8:	d0fc      	beq.n	8000fe4 <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 8000fea:	2320      	movs	r3, #32
    return HAL_OK;
 8000fec:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8000fee:	67eb      	str	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 8000ff0:	e000      	b.n	8000ff4 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8000ff2:	2001      	movs	r0, #1
}
 8000ff4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ff6:	46bb      	mov	fp, r7
 8000ff8:	46b2      	mov	sl, r6
 8000ffa:	46a9      	mov	r9, r5
 8000ffc:	46a0      	mov	r8, r4
 8000ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001000:	69da      	ldr	r2, [r3, #28]
 8001002:	4214      	tst	r4, r2
 8001004:	d1da      	bne.n	8000fbc <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001006:	f7ff fa47 	bl	8000498 <HAL_GetTick>
 800100a:	4643      	mov	r3, r8
 800100c:	1ac0      	subs	r0, r0, r3
 800100e:	4286      	cmp	r6, r0
 8001010:	d33e      	bcc.n	8001090 <HAL_UART_Transmit+0x154>
 8001012:	2e00      	cmp	r6, #0
 8001014:	d03c      	beq.n	8001090 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001016:	4649      	mov	r1, r9
 8001018:	682b      	ldr	r3, [r5, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4211      	tst	r1, r2
 800101e:	d0c8      	beq.n	8000fb2 <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001020:	4659      	mov	r1, fp
 8001022:	69da      	ldr	r2, [r3, #28]
 8001024:	4211      	tst	r1, r2
 8001026:	d164      	bne.n	80010f2 <HAL_UART_Transmit+0x1b6>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	69d9      	ldr	r1, [r3, #28]
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	4211      	tst	r1, r2
 8001030:	d0bf      	beq.n	8000fb2 <HAL_UART_Transmit+0x76>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001032:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001034:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001038:	2201      	movs	r2, #1
 800103a:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800103e:	6829      	ldr	r1, [r5, #0]
 8001040:	4c46      	ldr	r4, [pc, #280]	; (800115c <HAL_UART_Transmit+0x220>)
 8001042:	680b      	ldr	r3, [r1, #0]
 8001044:	4023      	ands	r3, r4
 8001046:	600b      	str	r3, [r1, #0]
 8001048:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800104c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001050:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001054:	6829      	ldr	r1, [r5, #0]
 8001056:	688b      	ldr	r3, [r1, #8]
 8001058:	4393      	bics	r3, r2
 800105a:	608b      	str	r3, [r1, #8]
 800105c:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001060:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001062:	2b01      	cmp	r3, #1
 8001064:	d10a      	bne.n	800107c <HAL_UART_Transmit+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001066:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800106a:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800106e:	2010      	movs	r0, #16
 8001070:	682a      	ldr	r2, [r5, #0]
 8001072:	6813      	ldr	r3, [r2, #0]
 8001074:	4383      	bics	r3, r0
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800107c:	2220      	movs	r2, #32
 800107e:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001080:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8001082:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001084:	2300      	movs	r3, #0
 8001086:	662b      	str	r3, [r5, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001088:	66ab      	str	r3, [r5, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800108a:	506a      	str	r2, [r5, r1]
          __HAL_UNLOCK(huart);
 800108c:	3258      	adds	r2, #88	; 0x58
 800108e:	54ab      	strb	r3, [r5, r2]
      huart->gState = HAL_UART_STATE_READY;
 8001090:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8001092:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8001094:	67eb      	str	r3, [r5, #124]	; 0x7c
      return HAL_TIMEOUT;
 8001096:	e7ad      	b.n	8000ff4 <HAL_UART_Transmit+0xb8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001098:	4652      	mov	r2, sl
 800109a:	8812      	ldrh	r2, [r2, #0]
 800109c:	05d2      	lsls	r2, r2, #23
 800109e:	0dd2      	lsrs	r2, r2, #23
 80010a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80010a2:	2202      	movs	r2, #2
 80010a4:	4694      	mov	ip, r2
 80010a6:	44e2      	add	sl, ip
      huart->TxXferCount--;
 80010a8:	e78d      	b.n	8000fc6 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 80010aa:	2002      	movs	r0, #2
 80010ac:	e7a2      	b.n	8000ff4 <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	421c      	tst	r4, r3
 80010b2:	d19a      	bne.n	8000fea <HAL_UART_Transmit+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010b4:	f7ff f9f0 	bl	8000498 <HAL_GetTick>
 80010b8:	4643      	mov	r3, r8
 80010ba:	1ac0      	subs	r0, r0, r3
 80010bc:	4286      	cmp	r6, r0
 80010be:	d3e7      	bcc.n	8001090 <HAL_UART_Transmit+0x154>
 80010c0:	2e00      	cmp	r6, #0
 80010c2:	d0e5      	beq.n	8001090 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80010c4:	4649      	mov	r1, r9
 80010c6:	682b      	ldr	r3, [r5, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4211      	tst	r1, r2
 80010cc:	d100      	bne.n	80010d0 <HAL_UART_Transmit+0x194>
 80010ce:	e786      	b.n	8000fde <HAL_UART_Transmit+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80010d0:	69da      	ldr	r2, [r3, #28]
 80010d2:	4217      	tst	r7, r2
 80010d4:	d140      	bne.n	8001158 <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	69d9      	ldr	r1, [r3, #28]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	4211      	tst	r1, r2
 80010de:	d100      	bne.n	80010e2 <HAL_UART_Transmit+0x1a6>
 80010e0:	e77d      	b.n	8000fde <HAL_UART_Transmit+0xa2>
 80010e2:	e7a6      	b.n	8001032 <HAL_UART_Transmit+0xf6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010e4:	692b      	ldr	r3, [r5, #16]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d000      	beq.n	80010ec <HAL_UART_Transmit+0x1b0>
 80010ea:	e757      	b.n	8000f9c <HAL_UART_Transmit+0x60>
 80010ec:	46ba      	mov	sl, r7
      pdata8bits  = NULL;
 80010ee:	2700      	movs	r7, #0
 80010f0:	e754      	b.n	8000f9c <HAL_UART_Transmit+0x60>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80010f2:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010f4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010f8:	2201      	movs	r2, #1
 80010fa:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80010fe:	6829      	ldr	r1, [r5, #0]
 8001100:	4c16      	ldr	r4, [pc, #88]	; (800115c <HAL_UART_Transmit+0x220>)
 8001102:	680b      	ldr	r3, [r1, #0]
 8001104:	4023      	ands	r3, r4
 8001106:	600b      	str	r3, [r1, #0]
 8001108:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800110c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001110:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001114:	6829      	ldr	r1, [r5, #0]
 8001116:	688b      	ldr	r3, [r1, #8]
 8001118:	4393      	bics	r3, r2
 800111a:	608b      	str	r3, [r1, #8]
 800111c:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001120:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10a      	bne.n	800113c <HAL_UART_Transmit+0x200>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001126:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800112a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800112e:	2010      	movs	r0, #16
 8001130:	682a      	ldr	r2, [r5, #0]
 8001132:	6813      	ldr	r3, [r2, #0]
 8001134:	4383      	bics	r3, r0
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001140:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8001142:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001144:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001146:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001148:	662b      	str	r3, [r5, #96]	; 0x60
  huart->RxISR = NULL;
 800114a:	66ab      	str	r3, [r5, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800114c:	50a9      	str	r1, [r5, r2]
           __HAL_UNLOCK(huart);
 800114e:	3a0c      	subs	r2, #12
 8001150:	54ab      	strb	r3, [r5, r2]
           return HAL_ERROR;
 8001152:	e79d      	b.n	8001090 <HAL_UART_Transmit+0x154>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001154:	682b      	ldr	r3, [r5, #0]
 8001156:	e73e      	b.n	8000fd6 <HAL_UART_Transmit+0x9a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001158:	621f      	str	r7, [r3, #32]
 800115a:	e7cb      	b.n	80010f4 <HAL_UART_Transmit+0x1b8>
 800115c:	fffffedf 	.word	0xfffffedf

08001160 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001160:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001162:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001164:	07da      	lsls	r2, r3, #31
 8001166:	d506      	bpl.n	8001176 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001168:	6801      	ldr	r1, [r0, #0]
 800116a:	4c28      	ldr	r4, [pc, #160]	; (800120c <UART_AdvFeatureConfig+0xac>)
 800116c:	684a      	ldr	r2, [r1, #4]
 800116e:	4022      	ands	r2, r4
 8001170:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001172:	4322      	orrs	r2, r4
 8001174:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001176:	079a      	lsls	r2, r3, #30
 8001178:	d506      	bpl.n	8001188 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800117a:	6801      	ldr	r1, [r0, #0]
 800117c:	4c24      	ldr	r4, [pc, #144]	; (8001210 <UART_AdvFeatureConfig+0xb0>)
 800117e:	684a      	ldr	r2, [r1, #4]
 8001180:	4022      	ands	r2, r4
 8001182:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001184:	4322      	orrs	r2, r4
 8001186:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001188:	075a      	lsls	r2, r3, #29
 800118a:	d506      	bpl.n	800119a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800118c:	6801      	ldr	r1, [r0, #0]
 800118e:	4c21      	ldr	r4, [pc, #132]	; (8001214 <UART_AdvFeatureConfig+0xb4>)
 8001190:	684a      	ldr	r2, [r1, #4]
 8001192:	4022      	ands	r2, r4
 8001194:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001196:	4322      	orrs	r2, r4
 8001198:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800119a:	071a      	lsls	r2, r3, #28
 800119c:	d506      	bpl.n	80011ac <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800119e:	6801      	ldr	r1, [r0, #0]
 80011a0:	4c1d      	ldr	r4, [pc, #116]	; (8001218 <UART_AdvFeatureConfig+0xb8>)
 80011a2:	684a      	ldr	r2, [r1, #4]
 80011a4:	4022      	ands	r2, r4
 80011a6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80011a8:	4322      	orrs	r2, r4
 80011aa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80011ac:	06da      	lsls	r2, r3, #27
 80011ae:	d506      	bpl.n	80011be <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80011b0:	6801      	ldr	r1, [r0, #0]
 80011b2:	4c1a      	ldr	r4, [pc, #104]	; (800121c <UART_AdvFeatureConfig+0xbc>)
 80011b4:	688a      	ldr	r2, [r1, #8]
 80011b6:	4022      	ands	r2, r4
 80011b8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80011ba:	4322      	orrs	r2, r4
 80011bc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80011be:	069a      	lsls	r2, r3, #26
 80011c0:	d506      	bpl.n	80011d0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80011c2:	6801      	ldr	r1, [r0, #0]
 80011c4:	4c16      	ldr	r4, [pc, #88]	; (8001220 <UART_AdvFeatureConfig+0xc0>)
 80011c6:	688a      	ldr	r2, [r1, #8]
 80011c8:	4022      	ands	r2, r4
 80011ca:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80011cc:	4322      	orrs	r2, r4
 80011ce:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80011d0:	065a      	lsls	r2, r3, #25
 80011d2:	d50a      	bpl.n	80011ea <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80011d4:	6801      	ldr	r1, [r0, #0]
 80011d6:	4d13      	ldr	r5, [pc, #76]	; (8001224 <UART_AdvFeatureConfig+0xc4>)
 80011d8:	684a      	ldr	r2, [r1, #4]
 80011da:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80011dc:	402a      	ands	r2, r5
 80011de:	4322      	orrs	r2, r4
 80011e0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	0352      	lsls	r2, r2, #13
 80011e6:	4294      	cmp	r4, r2
 80011e8:	d009      	beq.n	80011fe <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80011ea:	061b      	lsls	r3, r3, #24
 80011ec:	d506      	bpl.n	80011fc <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80011ee:	6802      	ldr	r2, [r0, #0]
 80011f0:	490d      	ldr	r1, [pc, #52]	; (8001228 <UART_AdvFeatureConfig+0xc8>)
 80011f2:	6853      	ldr	r3, [r2, #4]
 80011f4:	400b      	ands	r3, r1
 80011f6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80011f8:	430b      	orrs	r3, r1
 80011fa:	6053      	str	r3, [r2, #4]
}
 80011fc:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80011fe:	684a      	ldr	r2, [r1, #4]
 8001200:	4c0a      	ldr	r4, [pc, #40]	; (800122c <UART_AdvFeatureConfig+0xcc>)
 8001202:	4022      	ands	r2, r4
 8001204:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001206:	4322      	orrs	r2, r4
 8001208:	604a      	str	r2, [r1, #4]
 800120a:	e7ee      	b.n	80011ea <UART_AdvFeatureConfig+0x8a>
 800120c:	fffdffff 	.word	0xfffdffff
 8001210:	fffeffff 	.word	0xfffeffff
 8001214:	fffbffff 	.word	0xfffbffff
 8001218:	ffff7fff 	.word	0xffff7fff
 800121c:	ffffefff 	.word	0xffffefff
 8001220:	ffffdfff 	.word	0xffffdfff
 8001224:	ffefffff 	.word	0xffefffff
 8001228:	fff7ffff 	.word	0xfff7ffff
 800122c:	ff9fffff 	.word	0xff9fffff

08001230 <UART_CheckIdleState>:
{
 8001230:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001232:	2384      	movs	r3, #132	; 0x84
 8001234:	2200      	movs	r2, #0
{
 8001236:	46c6      	mov	lr, r8
 8001238:	0004      	movs	r4, r0
 800123a:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800123c:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800123e:	f7ff f92b 	bl	8000498 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001242:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001244:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	0712      	lsls	r2, r2, #28
 800124a:	d410      	bmi.n	800126e <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	0752      	lsls	r2, r2, #29
 8001250:	d43c      	bmi.n	80012cc <UART_CheckIdleState+0x9c>
  huart->gState = HAL_UART_STATE_READY;
 8001252:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8001254:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8001256:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001258:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800125a:	2300      	movs	r3, #0
  return HAL_OK;
 800125c:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800125e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001260:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8001262:	2378      	movs	r3, #120	; 0x78
 8001264:	2200      	movs	r2, #0
 8001266:	54e2      	strb	r2, [r4, r3]
}
 8001268:	bc80      	pop	{r7}
 800126a:	46b8      	mov	r8, r7
 800126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800126e:	69da      	ldr	r2, [r3, #28]
 8001270:	0292      	lsls	r2, r2, #10
 8001272:	d4eb      	bmi.n	800124c <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001274:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001276:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001278:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800127a:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800127c:	04b6      	lsls	r6, r6, #18
 800127e:	e010      	b.n	80012a2 <UART_CheckIdleState+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4217      	tst	r7, r2
 8001286:	d009      	beq.n	800129c <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001288:	4641      	mov	r1, r8
 800128a:	69da      	ldr	r2, [r3, #28]
 800128c:	4211      	tst	r1, r2
 800128e:	d158      	bne.n	8001342 <UART_CheckIdleState+0x112>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	69d9      	ldr	r1, [r3, #28]
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	4211      	tst	r1, r2
 8001298:	d000      	beq.n	800129c <UART_CheckIdleState+0x6c>
 800129a:	e083      	b.n	80013a4 <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800129c:	69da      	ldr	r2, [r3, #28]
 800129e:	0292      	lsls	r2, r2, #10
 80012a0:	d4d4      	bmi.n	800124c <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012a2:	f7ff f8f9 	bl	8000498 <HAL_GetTick>
 80012a6:	1b40      	subs	r0, r0, r5
 80012a8:	42b0      	cmp	r0, r6
 80012aa:	d3e9      	bcc.n	8001280 <UART_CheckIdleState+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012b0:	2301      	movs	r3, #1
 80012b2:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80012b6:	2080      	movs	r0, #128	; 0x80
 80012b8:	6822      	ldr	r2, [r4, #0]
 80012ba:	6813      	ldr	r3, [r2, #0]
 80012bc:	4383      	bics	r3, r0
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80012c4:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80012c6:	387d      	subs	r0, #125	; 0x7d
      huart->gState = HAL_UART_STATE_READY;
 80012c8:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80012ca:	e7ca      	b.n	8001262 <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	d4bf      	bmi.n	8001252 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012d2:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80012d4:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80012d6:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80012d8:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012da:	04b6      	lsls	r6, r6, #18
 80012dc:	e011      	b.n	8001302 <UART_CheckIdleState+0xd2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4217      	tst	r7, r2
 80012e4:	d00a      	beq.n	80012fc <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80012e6:	4641      	mov	r1, r8
 80012e8:	69da      	ldr	r2, [r3, #28]
 80012ea:	4211      	tst	r1, r2
 80012ec:	d000      	beq.n	80012f0 <UART_CheckIdleState+0xc0>
 80012ee:	e089      	b.n	8001404 <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	69d9      	ldr	r1, [r3, #28]
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	4211      	tst	r1, r2
 80012f8:	d000      	beq.n	80012fc <UART_CheckIdleState+0xcc>
 80012fa:	e0b4      	b.n	8001466 <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	025b      	lsls	r3, r3, #9
 8001300:	d4a7      	bmi.n	8001252 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001302:	f7ff f8c9 	bl	8000498 <HAL_GetTick>
 8001306:	1b40      	subs	r0, r0, r5
 8001308:	42b0      	cmp	r0, r6
 800130a:	d3e8      	bcc.n	80012de <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800130c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001310:	2201      	movs	r2, #1
 8001312:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001316:	6821      	ldr	r1, [r4, #0]
 8001318:	4d6b      	ldr	r5, [pc, #428]	; (80014c8 <UART_CheckIdleState+0x298>)
 800131a:	680b      	ldr	r3, [r1, #0]
 800131c:	402b      	ands	r3, r5
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001324:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001328:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800132c:	6821      	ldr	r1, [r4, #0]
 800132e:	688b      	ldr	r3, [r1, #8]
 8001330:	4393      	bics	r3, r2
 8001332:	608b      	str	r3, [r1, #8]
 8001334:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 800133c:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 800133e:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001340:	e78f      	b.n	8001262 <UART_CheckIdleState+0x32>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001342:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001344:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001348:	2201      	movs	r2, #1
 800134a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800134e:	6821      	ldr	r1, [r4, #0]
 8001350:	4d5d      	ldr	r5, [pc, #372]	; (80014c8 <UART_CheckIdleState+0x298>)
 8001352:	680b      	ldr	r3, [r1, #0]
 8001354:	402b      	ands	r3, r5
 8001356:	600b      	str	r3, [r1, #0]
 8001358:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800135c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001360:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001364:	6821      	ldr	r1, [r4, #0]
 8001366:	688b      	ldr	r3, [r1, #8]
 8001368:	4393      	bics	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
 800136c:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001370:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10a      	bne.n	800138c <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001376:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800137a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800137e:	2010      	movs	r0, #16
 8001380:	6822      	ldr	r2, [r4, #0]
 8001382:	6813      	ldr	r3, [r2, #0]
 8001384:	4383      	bics	r3, r0
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001390:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8001392:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001394:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001396:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001398:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 800139a:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800139c:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 800139e:	3a0c      	subs	r2, #12
 80013a0:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 80013a2:	e783      	b.n	80012ac <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80013a4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013a6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013aa:	2201      	movs	r2, #1
 80013ac:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013b0:	6821      	ldr	r1, [r4, #0]
 80013b2:	4d45      	ldr	r5, [pc, #276]	; (80014c8 <UART_CheckIdleState+0x298>)
 80013b4:	680b      	ldr	r3, [r1, #0]
 80013b6:	402b      	ands	r3, r5
 80013b8:	600b      	str	r3, [r1, #0]
 80013ba:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013be:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013c2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013c6:	6821      	ldr	r1, [r4, #0]
 80013c8:	688b      	ldr	r3, [r1, #8]
 80013ca:	4393      	bics	r3, r2
 80013cc:	608b      	str	r3, [r1, #8]
 80013ce:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80013d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d10a      	bne.n	80013ee <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013d8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013dc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80013e0:	2010      	movs	r0, #16
 80013e2:	6822      	ldr	r2, [r4, #0]
 80013e4:	6813      	ldr	r3, [r2, #0]
 80013e6:	4383      	bics	r3, r0
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80013ee:	2220      	movs	r2, #32
 80013f0:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80013f2:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80013f4:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013f6:	2300      	movs	r3, #0
 80013f8:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 80013fa:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80013fc:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80013fe:	3258      	adds	r2, #88	; 0x58
 8001400:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8001402:	e753      	b.n	80012ac <UART_CheckIdleState+0x7c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001404:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001406:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800140a:	2201      	movs	r2, #1
 800140c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001410:	6821      	ldr	r1, [r4, #0]
 8001412:	4d2d      	ldr	r5, [pc, #180]	; (80014c8 <UART_CheckIdleState+0x298>)
 8001414:	680b      	ldr	r3, [r1, #0]
 8001416:	402b      	ands	r3, r5
 8001418:	600b      	str	r3, [r1, #0]
 800141a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800141e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001422:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001426:	6821      	ldr	r1, [r4, #0]
 8001428:	688b      	ldr	r3, [r1, #8]
 800142a:	4393      	bics	r3, r2
 800142c:	608b      	str	r3, [r1, #8]
 800142e:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001432:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10a      	bne.n	800144e <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001438:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800143c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001440:	2010      	movs	r0, #16
 8001442:	6822      	ldr	r2, [r4, #0]
 8001444:	6813      	ldr	r3, [r2, #0]
 8001446:	4383      	bics	r3, r0
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001452:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8001454:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001456:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001458:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800145a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 800145c:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800145e:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8001460:	3a0c      	subs	r2, #12
 8001462:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8001464:	e752      	b.n	800130c <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001466:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001468:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800146c:	2201      	movs	r2, #1
 800146e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001472:	6821      	ldr	r1, [r4, #0]
 8001474:	4d14      	ldr	r5, [pc, #80]	; (80014c8 <UART_CheckIdleState+0x298>)
 8001476:	680b      	ldr	r3, [r1, #0]
 8001478:	402b      	ands	r3, r5
 800147a:	600b      	str	r3, [r1, #0]
 800147c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001480:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001484:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001488:	6821      	ldr	r1, [r4, #0]
 800148a:	688b      	ldr	r3, [r1, #8]
 800148c:	4393      	bics	r3, r2
 800148e:	608b      	str	r3, [r1, #8]
 8001490:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001494:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001496:	2b01      	cmp	r3, #1
 8001498:	d10a      	bne.n	80014b0 <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800149a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800149e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80014a2:	2010      	movs	r0, #16
 80014a4:	6822      	ldr	r2, [r4, #0]
 80014a6:	6813      	ldr	r3, [r2, #0]
 80014a8:	4383      	bics	r3, r0
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80014b0:	2220      	movs	r2, #32
 80014b2:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80014b4:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80014b6:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014b8:	2300      	movs	r3, #0
 80014ba:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 80014bc:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80014be:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80014c0:	3258      	adds	r2, #88	; 0x58
 80014c2:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80014c4:	e722      	b.n	800130c <UART_CheckIdleState+0xdc>
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	fffffedf 	.word	0xfffffedf

080014cc <HAL_UART_Init>:
{
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80014d0:	d100      	bne.n	80014d4 <HAL_UART_Init+0x8>
 80014d2:	e076      	b.n	80015c2 <HAL_UART_Init+0xf6>
  if (huart->gState == HAL_UART_STATE_RESET)
 80014d4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d067      	beq.n	80015aa <HAL_UART_Init+0xde>
  huart->gState = HAL_UART_STATE_BUSY;
 80014da:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80014dc:	2101      	movs	r1, #1
 80014de:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80014e0:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80014e2:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014e4:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80014e6:	438b      	bics	r3, r1
 80014e8:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014ea:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80014ec:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014ee:	432b      	orrs	r3, r5
 80014f0:	6965      	ldr	r5, [r4, #20]
 80014f2:	69e1      	ldr	r1, [r4, #28]
 80014f4:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80014f6:	4d49      	ldr	r5, [pc, #292]	; (800161c <HAL_UART_Init+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014f8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80014fa:	4028      	ands	r0, r5
 80014fc:	4303      	orrs	r3, r0
 80014fe:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001500:	6853      	ldr	r3, [r2, #4]
 8001502:	4847      	ldr	r0, [pc, #284]	; (8001620 <HAL_UART_Init+0x154>)
  tmpreg |= huart->Init.OneBitSampling;
 8001504:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001506:	4003      	ands	r3, r0
 8001508:	68e0      	ldr	r0, [r4, #12]
 800150a:	4303      	orrs	r3, r0
 800150c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800150e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001510:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001512:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001514:	4d43      	ldr	r5, [pc, #268]	; (8001624 <HAL_UART_Init+0x158>)
 8001516:	4028      	ands	r0, r5
 8001518:	4303      	orrs	r3, r0
 800151a:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800151c:	4b42      	ldr	r3, [pc, #264]	; (8001628 <HAL_UART_Init+0x15c>)
 800151e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001520:	2303      	movs	r3, #3
 8001522:	4013      	ands	r3, r2
 8001524:	3b01      	subs	r3, #1
 8001526:	2b02      	cmp	r3, #2
 8001528:	d91f      	bls.n	800156a <HAL_UART_Init+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	4299      	cmp	r1, r3
 8001530:	d100      	bne.n	8001534 <HAL_UART_Init+0x68>
 8001532:	e070      	b.n	8001616 <HAL_UART_Init+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001534:	f7ff fc54 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001538:	2800      	cmp	r0, #0
 800153a:	d124      	bne.n	8001586 <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 800153c:	2300      	movs	r3, #0
 800153e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8001540:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001544:	2b00      	cmp	r3, #0
 8001546:	d135      	bne.n	80015b4 <HAL_UART_Init+0xe8>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	4938      	ldr	r1, [pc, #224]	; (800162c <HAL_UART_Init+0x160>)
 800154c:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800154e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001550:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001552:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001554:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	438a      	bics	r2, r1
 800155a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	3907      	subs	r1, #7
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001564:	f7ff fe64 	bl	8001230 <UART_CheckIdleState>
 8001568:	e01b      	b.n	80015a2 <HAL_UART_Init+0xd6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800156a:	2080      	movs	r0, #128	; 0x80
 800156c:	4a30      	ldr	r2, [pc, #192]	; (8001630 <HAL_UART_Init+0x164>)
 800156e:	0200      	lsls	r0, r0, #8
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	4281      	cmp	r1, r0
 8001574:	d027      	beq.n	80015c6 <HAL_UART_Init+0xfa>
    switch (clocksource)
 8001576:	2b04      	cmp	r3, #4
 8001578:	d044      	beq.n	8001604 <HAL_UART_Init+0x138>
 800157a:	d813      	bhi.n	80015a4 <HAL_UART_Init+0xd8>
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0d9      	beq.n	8001534 <HAL_UART_Init+0x68>
 8001580:	2b02      	cmp	r3, #2
 8001582:	d10a      	bne.n	800159a <HAL_UART_Init+0xce>
        pclk = (uint32_t) HSI_VALUE;
 8001584:	482b      	ldr	r0, [pc, #172]	; (8001634 <HAL_UART_Init+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001586:	6861      	ldr	r1, [r4, #4]
 8001588:	084b      	lsrs	r3, r1, #1
 800158a:	1818      	adds	r0, r3, r0
 800158c:	f7fe fdbc 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001590:	0002      	movs	r2, r0
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <HAL_UART_Init+0x16c>)
 8001594:	3a10      	subs	r2, #16
 8001596:	429a      	cmp	r2, r3
 8001598:	d910      	bls.n	80015bc <HAL_UART_Init+0xf0>
  huart->RxISR = NULL;
 800159a:	2300      	movs	r3, #0
    return HAL_ERROR;
 800159c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800159e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80015a0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80015a2:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d0ee      	beq.n	8001586 <HAL_UART_Init+0xba>
 80015a8:	e7f7      	b.n	800159a <HAL_UART_Init+0xce>
    huart->Lock = HAL_UNLOCKED;
 80015aa:	2278      	movs	r2, #120	; 0x78
 80015ac:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80015ae:	f7fe fec5 	bl	800033c <HAL_UART_MspInit>
 80015b2:	e792      	b.n	80014da <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80015b4:	0020      	movs	r0, r4
 80015b6:	f7ff fdd3 	bl	8001160 <UART_AdvFeatureConfig>
 80015ba:	e7c5      	b.n	8001548 <HAL_UART_Init+0x7c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	60d8      	str	r0, [r3, #12]
  return ret;
 80015c0:	e7bc      	b.n	800153c <HAL_UART_Init+0x70>
    return HAL_ERROR;
 80015c2:	2001      	movs	r0, #1
 80015c4:	e7ed      	b.n	80015a2 <HAL_UART_Init+0xd6>
    switch (clocksource)
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d01f      	beq.n	800160a <HAL_UART_Init+0x13e>
 80015ca:	d816      	bhi.n	80015fa <HAL_UART_Init+0x12e>
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d022      	beq.n	8001616 <HAL_UART_Init+0x14a>
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d1e2      	bne.n	800159a <HAL_UART_Init+0xce>
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_UART_Init+0x170>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80015d6:	6861      	ldr	r1, [r4, #4]
 80015d8:	0848      	lsrs	r0, r1, #1
 80015da:	18c0      	adds	r0, r0, r3
 80015dc:	f7fe fd94 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80015e0:	0002      	movs	r2, r0
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_UART_Init+0x16c>)
 80015e4:	3a10      	subs	r2, #16
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d8d7      	bhi.n	800159a <HAL_UART_Init+0xce>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_UART_Init+0x174>)
        huart->Instance->BRR = brrtemp;
 80015ec:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80015ee:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80015f0:	0700      	lsls	r0, r0, #28
 80015f2:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80015f4:	4303      	orrs	r3, r0
 80015f6:	60d3      	str	r3, [r2, #12]
  return ret;
 80015f8:	e7a0      	b.n	800153c <HAL_UART_Init+0x70>
    switch (clocksource)
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d1cd      	bne.n	800159a <HAL_UART_Init+0xce>
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	025b      	lsls	r3, r3, #9
 8001602:	e7e8      	b.n	80015d6 <HAL_UART_Init+0x10a>
        pclk = HAL_RCC_GetSysClockFreq();
 8001604:	f7ff fbc2 	bl	8000d8c <HAL_RCC_GetSysClockFreq>
        break;
 8001608:	e796      	b.n	8001538 <HAL_UART_Init+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 800160a:	f7ff fbbf 	bl	8000d8c <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800160e:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8001610:	2800      	cmp	r0, #0
 8001612:	d1e0      	bne.n	80015d6 <HAL_UART_Init+0x10a>
 8001614:	e792      	b.n	800153c <HAL_UART_Init+0x70>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001616:	f7ff fbe3 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
        break;
 800161a:	e7f8      	b.n	800160e <HAL_UART_Init+0x142>
 800161c:	ffff69f3 	.word	0xffff69f3
 8001620:	ffffcfff 	.word	0xffffcfff
 8001624:	fffff4ff 	.word	0xfffff4ff
 8001628:	40021000 	.word	0x40021000
 800162c:	fffff7ff 	.word	0xfffff7ff
 8001630:	080016ec 	.word	0x080016ec
 8001634:	007a1200 	.word	0x007a1200
 8001638:	0000ffef 	.word	0x0000ffef
 800163c:	00f42400 	.word	0x00f42400
 8001640:	0000fff0 	.word	0x0000fff0

08001644 <memset>:
 8001644:	0003      	movs	r3, r0
 8001646:	1882      	adds	r2, r0, r2
 8001648:	4293      	cmp	r3, r2
 800164a:	d100      	bne.n	800164e <memset+0xa>
 800164c:	4770      	bx	lr
 800164e:	7019      	strb	r1, [r3, #0]
 8001650:	3301      	adds	r3, #1
 8001652:	e7f9      	b.n	8001648 <memset+0x4>

08001654 <__libc_init_array>:
 8001654:	b570      	push	{r4, r5, r6, lr}
 8001656:	2600      	movs	r6, #0
 8001658:	4c0c      	ldr	r4, [pc, #48]	; (800168c <__libc_init_array+0x38>)
 800165a:	4d0d      	ldr	r5, [pc, #52]	; (8001690 <__libc_init_array+0x3c>)
 800165c:	1b64      	subs	r4, r4, r5
 800165e:	10a4      	asrs	r4, r4, #2
 8001660:	42a6      	cmp	r6, r4
 8001662:	d109      	bne.n	8001678 <__libc_init_array+0x24>
 8001664:	2600      	movs	r6, #0
 8001666:	f000 f819 	bl	800169c <_init>
 800166a:	4c0a      	ldr	r4, [pc, #40]	; (8001694 <__libc_init_array+0x40>)
 800166c:	4d0a      	ldr	r5, [pc, #40]	; (8001698 <__libc_init_array+0x44>)
 800166e:	1b64      	subs	r4, r4, r5
 8001670:	10a4      	asrs	r4, r4, #2
 8001672:	42a6      	cmp	r6, r4
 8001674:	d105      	bne.n	8001682 <__libc_init_array+0x2e>
 8001676:	bd70      	pop	{r4, r5, r6, pc}
 8001678:	00b3      	lsls	r3, r6, #2
 800167a:	58eb      	ldr	r3, [r5, r3]
 800167c:	4798      	blx	r3
 800167e:	3601      	adds	r6, #1
 8001680:	e7ee      	b.n	8001660 <__libc_init_array+0xc>
 8001682:	00b3      	lsls	r3, r6, #2
 8001684:	58eb      	ldr	r3, [r5, r3]
 8001686:	4798      	blx	r3
 8001688:	3601      	adds	r6, #1
 800168a:	e7f2      	b.n	8001672 <__libc_init_array+0x1e>
 800168c:	080016f0 	.word	0x080016f0
 8001690:	080016f0 	.word	0x080016f0
 8001694:	080016f4 	.word	0x080016f4
 8001698:	080016f0 	.word	0x080016f0

0800169c <_init>:
 800169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016a2:	bc08      	pop	{r3}
 80016a4:	469e      	mov	lr, r3
 80016a6:	4770      	bx	lr

080016a8 <_fini>:
 80016a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ae:	bc08      	pop	{r3}
 80016b0:	469e      	mov	lr, r3
 80016b2:	4770      	bx	lr
