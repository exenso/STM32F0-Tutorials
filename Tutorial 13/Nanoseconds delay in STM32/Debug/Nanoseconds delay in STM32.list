
Nanoseconds delay in STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001060  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001120  08001120  00011120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001150  08001150  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001150  08001150  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001150  08001150  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001150  08001150  00011150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001154  08001154  00011154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001164  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001164  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a011  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e4  00000000  00000000  0002a088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  0002b970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4c  00000000  00000000  0002c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000eb9f  00000000  00000000  0002ca4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8fe  00000000  00000000  0003b5eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005bb7c  00000000  00000000  00048ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001468  00000000  00000000  000a4a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000067b9  00000000  00000000  000a5ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  000ac689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001108 	.word	0x08001108

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001108 	.word	0x08001108

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b500      	push	{lr}
 8000222:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000224:	2228      	movs	r2, #40	; 0x28
 8000226:	2100      	movs	r1, #0
 8000228:	a806      	add	r0, sp, #24
 800022a:	f000 ff41 	bl	80010b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022e:	2210      	movs	r2, #16
 8000230:	2100      	movs	r1, #0
 8000232:	4668      	mov	r0, sp
 8000234:	f000 ff3c 	bl	80010b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000238:	2201      	movs	r2, #1
 800023a:	2301      	movs	r3, #1
 800023c:	9204      	str	r2, [sp, #16]
 800023e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000240:	2380      	movs	r3, #128	; 0x80
 8000242:	2202      	movs	r2, #2
 8000244:	025b      	lsls	r3, r3, #9
 8000246:	920c      	str	r2, [sp, #48]	; 0x30
 8000248:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800024a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800024e:	02db      	lsls	r3, r3, #11
 8000250:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f000 faa1 	bl	8000798 <HAL_RCC_OscConfig>
 8000256:	2800      	cmp	r0, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x3e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800025a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800025c:	e7fe      	b.n	800025c <SystemClock_Config+0x3c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000260:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000262:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000264:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000266:	3b05      	subs	r3, #5
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000268:	2101      	movs	r1, #1
 800026a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800026e:	f000 fced 	bl	8000c4c <HAL_RCC_ClockConfig>
 8000272:	2800      	cmp	r0, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x5a>
 8000276:	b672      	cpsid	i
  while (1)
 8000278:	e7fe      	b.n	8000278 <SystemClock_Config+0x58>
}
 800027a:	b011      	add	sp, #68	; 0x44
 800027c:	bd00      	pop	{pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <main>:
{
 8000280:	b530      	push	{r4, r5, lr}
 8000282:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000284:	f000 f900 	bl	8000488 <HAL_Init>
  SystemClock_Config();
 8000288:	f7ff ffca 	bl	8000220 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028c:	2214      	movs	r2, #20
 800028e:	2100      	movs	r1, #0
 8000290:	a805      	add	r0, sp, #20
 8000292:	f000 ff0d 	bl	80010b0 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	4b31      	ldr	r3, [pc, #196]	; (8000360 <main+0xe0>)
 800029a:	03c9      	lsls	r1, r1, #15
 800029c:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800029e:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002a0:	430a      	orrs	r2, r1
 80002a2:	615a      	str	r2, [r3, #20]
 80002a4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002a6:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002a8:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002aa:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ac:	9200      	str	r2, [sp, #0]
 80002ae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b0:	695a      	ldr	r2, [r3, #20]
 80002b2:	0289      	lsls	r1, r1, #10
 80002b4:	430a      	orrs	r2, r1
 80002b6:	615a      	str	r2, [r3, #20]
 80002b8:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002ba:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	400b      	ands	r3, r1
 80002be:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002c0:	2104      	movs	r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002c4:	f000 fa5a 	bl	800077c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80002c8:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ca:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002cc:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80002ce:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	3b03      	subs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002da:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002dc:	f000 f942 	bl	8000564 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e0:	2210      	movs	r2, #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	a805      	add	r0, sp, #20
 80002e6:	f000 fee3 	bl	80010b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ea:	2208      	movs	r2, #8
 80002ec:	2100      	movs	r1, #0
 80002ee:	a802      	add	r0, sp, #8
 80002f0:	f000 fede 	bl	80010b0 <memset>
  htim3.Instance = TIM3;
 80002f4:	4c1b      	ldr	r4, [pc, #108]	; (8000364 <main+0xe4>)
 80002f6:	4b1c      	ldr	r3, [pc, #112]	; (8000368 <main+0xe8>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80002f8:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 80002fa:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 48-1;
 80002fc:	232f      	movs	r3, #47	; 0x2f
 80002fe:	6063      	str	r3, [r4, #4]
  htim3.Init.Period = 0xffff-1;
 8000300:	4b1a      	ldr	r3, [pc, #104]	; (800036c <main+0xec>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000302:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0xffff-1;
 8000304:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000306:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000308:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800030a:	f000 fd5b 	bl	8000dc4 <HAL_TIM_Base_Init>
 800030e:	2800      	cmp	r0, #0
 8000310:	d001      	beq.n	8000316 <main+0x96>
 8000312:	b672      	cpsid	i
  while (1)
 8000314:	e7fe      	b.n	8000314 <main+0x94>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000316:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000318:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800031a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800031c:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800031e:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000320:	f000 fde4 	bl	8000eec <HAL_TIM_ConfigClockSource>
 8000324:	2800      	cmp	r0, #0
 8000326:	d001      	beq.n	800032c <main+0xac>
 8000328:	b672      	cpsid	i
  while (1)
 800032a:	e7fe      	b.n	800032a <main+0xaa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000330:	0020      	movs	r0, r4
 8000332:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000334:	9202      	str	r2, [sp, #8]
 8000336:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000338:	f000 fe90 	bl	800105c <HAL_TIMEx_MasterConfigSynchronization>
 800033c:	1e05      	subs	r5, r0, #0
 800033e:	d001      	beq.n	8000344 <main+0xc4>
 8000340:	b672      	cpsid	i
  while (1)
 8000342:	e7fe      	b.n	8000342 <main+0xc2>
  HAL_TIM_Base_Start(&htim3);
 8000344:	0020      	movs	r0, r4
 8000346:	f000 fdab 	bl	8000ea0 <HAL_TIM_Base_Start>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800034a:	2090      	movs	r0, #144	; 0x90
 800034c:	2104      	movs	r1, #4
 800034e:	05c0      	lsls	r0, r0, #23
 8000350:	f000 fa1a 	bl	8000788 <HAL_GPIO_TogglePin>
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8000354:	6822      	ldr	r2, [r4, #0]
 8000356:	6255      	str	r5, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8000358:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800035a:	2b09      	cmp	r3, #9
 800035c:	d9fc      	bls.n	8000358 <main+0xd8>
 800035e:	e7f4      	b.n	800034a <main+0xca>
 8000360:	40021000 	.word	0x40021000
 8000364:	20000028 	.word	0x20000028
 8000368:	40000400 	.word	0x40000400
 800036c:	0000fffe 	.word	0x0000fffe

08000370 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000370:	2201      	movs	r2, #1
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <HAL_MspInit+0x2c>)
{
 8000374:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000376:	6999      	ldr	r1, [r3, #24]
 8000378:	4311      	orrs	r1, r2
 800037a:	6199      	str	r1, [r3, #24]
 800037c:	6999      	ldr	r1, [r3, #24]
 800037e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000380:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000386:	69da      	ldr	r2, [r3, #28]
 8000388:	0549      	lsls	r1, r1, #21
 800038a:	430a      	orrs	r2, r1
 800038c:	61da      	str	r2, [r3, #28]
 800038e:	69db      	ldr	r3, [r3, #28]
 8000390:	400b      	ands	r3, r1
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000396:	b002      	add	sp, #8
 8000398:	4770      	bx	lr
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	40021000 	.word	0x40021000

080003a0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 80003a0:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <HAL_TIM_Base_MspInit+0x24>)
 80003a2:	6802      	ldr	r2, [r0, #0]
{
 80003a4:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d001      	beq.n	80003ae <HAL_TIM_Base_MspInit+0xe>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80003aa:	b002      	add	sp, #8
 80003ac:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 80003ae:	2302      	movs	r3, #2
 80003b0:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <HAL_TIM_Base_MspInit+0x28>)
 80003b2:	69d1      	ldr	r1, [r2, #28]
 80003b4:	4319      	orrs	r1, r3
 80003b6:	61d1      	str	r1, [r2, #28]
 80003b8:	69d2      	ldr	r2, [r2, #28]
 80003ba:	4013      	ands	r3, r2
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	9b01      	ldr	r3, [sp, #4]
}
 80003c0:	e7f3      	b.n	80003aa <HAL_TIM_Base_MspInit+0xa>
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	40000400 	.word	0x40000400
 80003c8:	40021000 	.word	0x40021000

080003cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003cc:	e7fe      	b.n	80003cc <NMI_Handler>
 80003ce:	46c0      	nop			; (mov r8, r8)

080003d0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <HardFault_Handler>
 80003d2:	46c0      	nop			; (mov r8, r8)

080003d4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003d4:	4770      	bx	lr
 80003d6:	46c0      	nop			; (mov r8, r8)

080003d8 <PendSV_Handler>:
 80003d8:	4770      	bx	lr
 80003da:	46c0      	nop			; (mov r8, r8)

080003dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003de:	f000 f863 	bl	80004a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e2:	bd10      	pop	{r4, pc}

080003e4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80003e4:	4770      	bx	lr
 80003e6:	46c0      	nop			; (mov r8, r8)

080003e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ec:	f7ff fffa 	bl	80003e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f0:	480c      	ldr	r0, [pc, #48]	; (8000424 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f2:	490d      	ldr	r1, [pc, #52]	; (8000428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f4:	4a0d      	ldr	r2, [pc, #52]	; (800042c <LoopForever+0xe>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f8:	e002      	b.n	8000400 <LoopCopyDataInit>

080003fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fe:	3304      	adds	r3, #4

08000400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000404:	d3f9      	bcc.n	80003fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000406:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000408:	4c0a      	ldr	r4, [pc, #40]	; (8000434 <LoopForever+0x16>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800040c:	e001      	b.n	8000412 <LoopFillZerobss>

0800040e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000410:	3204      	adds	r2, #4

08000412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000414:	d3fb      	bcc.n	800040e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000416:	f000 fe53 	bl	80010c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041a:	f7ff ff31 	bl	8000280 <main>

0800041e <LoopForever>:

LoopForever:
    b LoopForever
 800041e:	e7fe      	b.n	800041e <LoopForever>
  ldr   r0, =_estack
 8000420:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000428:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800042c:	08001158 	.word	0x08001158
  ldr r2, =_sbss
 8000430:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000434:	20000074 	.word	0x20000074

08000438 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000438:	e7fe      	b.n	8000438 <ADC1_IRQHandler>
	...

0800043c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800043c:	b570      	push	{r4, r5, r6, lr}
 800043e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000440:	20fa      	movs	r0, #250	; 0xfa
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <HAL_InitTick+0x40>)
 8000444:	0080      	lsls	r0, r0, #2
 8000446:	7819      	ldrb	r1, [r3, #0]
 8000448:	f7ff fe5e 	bl	8000108 <__udivsi3>
 800044c:	4d0c      	ldr	r5, [pc, #48]	; (8000480 <HAL_InitTick+0x44>)
 800044e:	0001      	movs	r1, r0
 8000450:	6828      	ldr	r0, [r5, #0]
 8000452:	f7ff fe59 	bl	8000108 <__udivsi3>
 8000456:	f000 f86b 	bl	8000530 <HAL_SYSTICK_Config>
 800045a:	2800      	cmp	r0, #0
 800045c:	d10c      	bne.n	8000478 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 800045e:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000460:	2c03      	cmp	r4, #3
 8000462:	d900      	bls.n	8000466 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000464:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000466:	3802      	subs	r0, #2
 8000468:	2200      	movs	r2, #0
 800046a:	0021      	movs	r1, r4
 800046c:	f000 f82e 	bl	80004cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <HAL_InitTick+0x48>)
 8000472:	2000      	movs	r0, #0
 8000474:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000476:	e7f5      	b.n	8000464 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000478:	2001      	movs	r0, #1
 800047a:	e7f3      	b.n	8000464 <HAL_InitTick+0x28>
 800047c:	20000004 	.word	0x20000004
 8000480:	20000000 	.word	0x20000000
 8000484:	20000008 	.word	0x20000008

08000488 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000488:	2110      	movs	r1, #16
 800048a:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <HAL_Init+0x1c>)
{
 800048c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800048e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000490:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000492:	430b      	orrs	r3, r1
 8000494:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000496:	f7ff ffd1 	bl	800043c <HAL_InitTick>
  HAL_MspInit();
 800049a:	f7ff ff69 	bl	8000370 <HAL_MspInit>
}
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	40022000 	.word	0x40022000

080004a8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80004a8:	4a03      	ldr	r2, [pc, #12]	; (80004b8 <HAL_IncTick+0x10>)
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <HAL_IncTick+0x14>)
 80004ac:	6811      	ldr	r1, [r2, #0]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	185b      	adds	r3, r3, r1
 80004b2:	6013      	str	r3, [r2, #0]
}
 80004b4:	4770      	bx	lr
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	20000070 	.word	0x20000070
 80004bc:	20000004 	.word	0x20000004

080004c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004c0:	4b01      	ldr	r3, [pc, #4]	; (80004c8 <HAL_GetTick+0x8>)
 80004c2:	6818      	ldr	r0, [r3, #0]
}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	20000070 	.word	0x20000070

080004cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004cc:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db14      	blt.n	80004fc <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_NVIC_SetPriority+0x5c>)
 80004d4:	2203      	movs	r2, #3
 80004d6:	469c      	mov	ip, r3
 80004d8:	23ff      	movs	r3, #255	; 0xff
 80004da:	0884      	lsrs	r4, r0, #2
 80004dc:	4002      	ands	r2, r0
 80004de:	0018      	movs	r0, r3
 80004e0:	26c0      	movs	r6, #192	; 0xc0
 80004e2:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004e4:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e6:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004e8:	400b      	ands	r3, r1
 80004ea:	4093      	lsls	r3, r2
 80004ec:	00a4      	lsls	r4, r4, #2
 80004ee:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f0:	00b6      	lsls	r6, r6, #2
 80004f2:	59a5      	ldr	r5, [r4, r6]
 80004f4:	4385      	bics	r5, r0
 80004f6:	432b      	orrs	r3, r5
 80004f8:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004fc:	4a0b      	ldr	r2, [pc, #44]	; (800052c <HAL_NVIC_SetPriority+0x60>)
 80004fe:	230f      	movs	r3, #15
 8000500:	4694      	mov	ip, r2
 8000502:	2203      	movs	r2, #3
 8000504:	4003      	ands	r3, r0
 8000506:	4010      	ands	r0, r2
 8000508:	32fc      	adds	r2, #252	; 0xfc
 800050a:	0015      	movs	r5, r2
 800050c:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800050e:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000510:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000512:	400a      	ands	r2, r1
 8000514:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000516:	3b08      	subs	r3, #8
 8000518:	089b      	lsrs	r3, r3, #2
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	4463      	add	r3, ip
 800051e:	69dc      	ldr	r4, [r3, #28]
 8000520:	43ac      	bics	r4, r5
 8000522:	4322      	orrs	r2, r4
 8000524:	61da      	str	r2, [r3, #28]
 8000526:	e7e8      	b.n	80004fa <HAL_NVIC_SetPriority+0x2e>
 8000528:	e000e100 	.word	0xe000e100
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	1e43      	subs	r3, r0, #1
 8000534:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000536:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000538:	4293      	cmp	r3, r2
 800053a:	d20e      	bcs.n	800055a <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800053c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800053e:	4a07      	ldr	r2, [pc, #28]	; (800055c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000540:	4807      	ldr	r0, [pc, #28]	; (8000560 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000542:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000544:	6a03      	ldr	r3, [r0, #32]
 8000546:	0609      	lsls	r1, r1, #24
 8000548:	021b      	lsls	r3, r3, #8
 800054a:	0a1b      	lsrs	r3, r3, #8
 800054c:	430b      	orrs	r3, r1
 800054e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000550:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000552:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000554:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000556:	3307      	adds	r3, #7
 8000558:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800055a:	4770      	bx	lr
 800055c:	e000e010 	.word	0xe000e010
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000566:	46de      	mov	lr, fp
 8000568:	4657      	mov	r7, sl
 800056a:	464e      	mov	r6, r9
 800056c:	4645      	mov	r5, r8
 800056e:	b5e0      	push	{r5, r6, r7, lr}
 8000570:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000572:	6809      	ldr	r1, [r1, #0]
 8000574:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000576:	2300      	movs	r3, #0
{
 8000578:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800057a:	2900      	cmp	r1, #0
 800057c:	d07c      	beq.n	8000678 <HAL_GPIO_Init+0x114>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057e:	4c79      	ldr	r4, [pc, #484]	; (8000764 <HAL_GPIO_Init+0x200>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000580:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000582:	46a3      	mov	fp, r4
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000584:	2601      	movs	r6, #1
 8000586:	000c      	movs	r4, r1
 8000588:	409e      	lsls	r6, r3
 800058a:	4034      	ands	r4, r6
 800058c:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 800058e:	4231      	tst	r1, r6
 8000590:	d06c      	beq.n	800066c <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000592:	4654      	mov	r4, sl
 8000594:	2503      	movs	r5, #3
 8000596:	6864      	ldr	r4, [r4, #4]
 8000598:	4025      	ands	r5, r4
 800059a:	46ac      	mov	ip, r5
 800059c:	3d01      	subs	r5, #1
 800059e:	2d01      	cmp	r5, #1
 80005a0:	d800      	bhi.n	80005a4 <HAL_GPIO_Init+0x40>
 80005a2:	e070      	b.n	8000686 <HAL_GPIO_Init+0x122>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80005a4:	4665      	mov	r5, ip
 80005a6:	2d03      	cmp	r5, #3
 80005a8:	d000      	beq.n	80005ac <HAL_GPIO_Init+0x48>
 80005aa:	e0b3      	b.n	8000714 <HAL_GPIO_Init+0x1b0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80005ac:	4666      	mov	r6, ip
 80005ae:	4096      	lsls	r6, r2
 80005b0:	43f5      	mvns	r5, r6
 80005b2:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 80005b4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80005b6:	9d02      	ldr	r5, [sp, #8]
 80005b8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80005ba:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80005bc:	25c0      	movs	r5, #192	; 0xc0
 80005be:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 80005c0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80005c2:	422c      	tst	r4, r5
 80005c4:	d052      	beq.n	800066c <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c6:	465d      	mov	r5, fp
 80005c8:	2601      	movs	r6, #1
 80005ca:	465f      	mov	r7, fp
 80005cc:	69ad      	ldr	r5, [r5, #24]
 80005ce:	4335      	orrs	r5, r6
 80005d0:	61bd      	str	r5, [r7, #24]
 80005d2:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005d4:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4035      	ands	r5, r6
 80005d8:	4e63      	ldr	r6, [pc, #396]	; (8000768 <HAL_GPIO_Init+0x204>)
 80005da:	9505      	str	r5, [sp, #20]
 80005dc:	46b4      	mov	ip, r6
 80005de:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005e0:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 80005e2:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005e4:	00bf      	lsls	r7, r7, #2
 80005e6:	00ad      	lsls	r5, r5, #2
 80005e8:	4465      	add	r5, ip
 80005ea:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 80005ec:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005ee:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 80005f0:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005f2:	4666      	mov	r6, ip
 80005f4:	40b7      	lsls	r7, r6
 80005f6:	003e      	movs	r6, r7
 80005f8:	464f      	mov	r7, r9
 80005fa:	43b7      	bics	r7, r6
 80005fc:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005fe:	2790      	movs	r7, #144	; 0x90
 8000600:	05ff      	lsls	r7, r7, #23
 8000602:	42b8      	cmp	r0, r7
 8000604:	d012      	beq.n	800062c <HAL_GPIO_Init+0xc8>
 8000606:	4f59      	ldr	r7, [pc, #356]	; (800076c <HAL_GPIO_Init+0x208>)
 8000608:	42b8      	cmp	r0, r7
 800060a:	d100      	bne.n	800060e <HAL_GPIO_Init+0xaa>
 800060c:	e09b      	b.n	8000746 <HAL_GPIO_Init+0x1e2>
 800060e:	4f58      	ldr	r7, [pc, #352]	; (8000770 <HAL_GPIO_Init+0x20c>)
 8000610:	42b8      	cmp	r0, r7
 8000612:	d100      	bne.n	8000616 <HAL_GPIO_Init+0xb2>
 8000614:	e09f      	b.n	8000756 <HAL_GPIO_Init+0x1f2>
 8000616:	4f57      	ldr	r7, [pc, #348]	; (8000774 <HAL_GPIO_Init+0x210>)
 8000618:	42b8      	cmp	r0, r7
 800061a:	d100      	bne.n	800061e <HAL_GPIO_Init+0xba>
 800061c:	e08c      	b.n	8000738 <HAL_GPIO_Init+0x1d4>
 800061e:	4666      	mov	r6, ip
 8000620:	2705      	movs	r7, #5
 8000622:	40b7      	lsls	r7, r6
 8000624:	003e      	movs	r6, r7
 8000626:	464f      	mov	r7, r9
 8000628:	4337      	orrs	r7, r6
 800062a:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800062c:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800062e:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000630:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 8000632:	4d51      	ldr	r5, [pc, #324]	; (8000778 <HAL_GPIO_Init+0x214>)
        temp &= ~(iocurrent);
 8000634:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000636:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8000638:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 800063a:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800063c:	423c      	tst	r4, r7
 800063e:	d000      	beq.n	8000642 <HAL_GPIO_Init+0xde>
 8000640:	e077      	b.n	8000732 <HAL_GPIO_Init+0x1ce>
        temp &= ~(iocurrent);
 8000642:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000644:	4f4c      	ldr	r7, [pc, #304]	; (8000778 <HAL_GPIO_Init+0x214>)
 8000646:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8000648:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800064a:	02a7      	lsls	r7, r4, #10
 800064c:	d46e      	bmi.n	800072c <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 800064e:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000650:	4f49      	ldr	r7, [pc, #292]	; (8000778 <HAL_GPIO_Init+0x214>)
 8000652:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000654:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000656:	03a7      	lsls	r7, r4, #14
 8000658:	d465      	bmi.n	8000726 <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 800065a:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800065c:	4f46      	ldr	r7, [pc, #280]	; (8000778 <HAL_GPIO_Init+0x214>)
 800065e:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 8000660:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000662:	03e4      	lsls	r4, r4, #15
 8000664:	d45b      	bmi.n	800071e <HAL_GPIO_Init+0x1ba>
        temp &= ~(iocurrent);
 8000666:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000668:	4c43      	ldr	r4, [pc, #268]	; (8000778 <HAL_GPIO_Init+0x214>)
 800066a:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800066c:	000c      	movs	r4, r1
      }
    }

    position++;
 800066e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000670:	40dc      	lsrs	r4, r3
 8000672:	3202      	adds	r2, #2
 8000674:	2c00      	cmp	r4, #0
 8000676:	d185      	bne.n	8000584 <HAL_GPIO_Init+0x20>
  } 
}
 8000678:	b007      	add	sp, #28
 800067a:	bcf0      	pop	{r4, r5, r6, r7}
 800067c:	46bb      	mov	fp, r7
 800067e:	46b2      	mov	sl, r6
 8000680:	46a9      	mov	r9, r5
 8000682:	46a0      	mov	r8, r4
 8000684:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000686:	6885      	ldr	r5, [r0, #8]
 8000688:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800068a:	2503      	movs	r5, #3
 800068c:	4095      	lsls	r5, r2
 800068e:	46a8      	mov	r8, r5
 8000690:	43ed      	mvns	r5, r5
 8000692:	464f      	mov	r7, r9
 8000694:	9502      	str	r5, [sp, #8]
 8000696:	4645      	mov	r5, r8
 8000698:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800069a:	4655      	mov	r5, sl
 800069c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800069e:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006a0:	002f      	movs	r7, r5
 80006a2:	4097      	lsls	r7, r2
 80006a4:	46b8      	mov	r8, r7
 80006a6:	464f      	mov	r7, r9
 80006a8:	4645      	mov	r5, r8
 80006aa:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80006ac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006ae:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006b0:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006b2:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006b4:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006b6:	0926      	lsrs	r6, r4, #4
 80006b8:	402e      	ands	r6, r5
 80006ba:	409e      	lsls	r6, r3
 80006bc:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006be:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80006c0:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80006c2:	9d02      	ldr	r5, [sp, #8]
 80006c4:	402e      	ands	r6, r5
 80006c6:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80006c8:	4656      	mov	r6, sl
 80006ca:	68b6      	ldr	r6, [r6, #8]
 80006cc:	4647      	mov	r7, r8
 80006ce:	4096      	lsls	r6, r2
 80006d0:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80006d2:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006d4:	4667      	mov	r7, ip
 80006d6:	4666      	mov	r6, ip
 80006d8:	4096      	lsls	r6, r2
 80006da:	2f02      	cmp	r7, #2
 80006dc:	d000      	beq.n	80006e0 <HAL_GPIO_Init+0x17c>
 80006de:	e769      	b.n	80005b4 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 80006e0:	08dd      	lsrs	r5, r3, #3
 80006e2:	00ad      	lsls	r5, r5, #2
 80006e4:	46ac      	mov	ip, r5
 80006e6:	4484      	add	ip, r0
 80006e8:	4665      	mov	r5, ip
 80006ea:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006ec:	2507      	movs	r5, #7
 80006ee:	401d      	ands	r5, r3
 80006f0:	00ad      	lsls	r5, r5, #2
 80006f2:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 80006f4:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006f6:	250f      	movs	r5, #15
 80006f8:	4647      	mov	r7, r8
 80006fa:	40bd      	lsls	r5, r7
 80006fc:	9f03      	ldr	r7, [sp, #12]
 80006fe:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000700:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000702:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000704:	4647      	mov	r7, r8
 8000706:	692d      	ldr	r5, [r5, #16]
 8000708:	40bd      	lsls	r5, r7
 800070a:	9f03      	ldr	r7, [sp, #12]
 800070c:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 800070e:	4665      	mov	r5, ip
 8000710:	622f      	str	r7, [r5, #32]
 8000712:	e74f      	b.n	80005b4 <HAL_GPIO_Init+0x50>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000714:	2503      	movs	r5, #3
 8000716:	4095      	lsls	r5, r2
 8000718:	43ed      	mvns	r5, r5
 800071a:	9502      	str	r5, [sp, #8]
 800071c:	e7d0      	b.n	80006c0 <HAL_GPIO_Init+0x15c>
          temp |= iocurrent;
 800071e:	9c01      	ldr	r4, [sp, #4]
 8000720:	432c      	orrs	r4, r5
 8000722:	0025      	movs	r5, r4
 8000724:	e7a0      	b.n	8000668 <HAL_GPIO_Init+0x104>
          temp |= iocurrent;
 8000726:	9f01      	ldr	r7, [sp, #4]
 8000728:	433d      	orrs	r5, r7
 800072a:	e797      	b.n	800065c <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 800072c:	9f01      	ldr	r7, [sp, #4]
 800072e:	433d      	orrs	r5, r7
 8000730:	e78e      	b.n	8000650 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 8000732:	9f01      	ldr	r7, [sp, #4]
 8000734:	433d      	orrs	r5, r7
 8000736:	e785      	b.n	8000644 <HAL_GPIO_Init+0xe0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000738:	4667      	mov	r7, ip
 800073a:	2603      	movs	r6, #3
 800073c:	40be      	lsls	r6, r7
 800073e:	464f      	mov	r7, r9
 8000740:	4337      	orrs	r7, r6
 8000742:	46b9      	mov	r9, r7
 8000744:	e772      	b.n	800062c <HAL_GPIO_Init+0xc8>
 8000746:	4666      	mov	r6, ip
 8000748:	2701      	movs	r7, #1
 800074a:	40b7      	lsls	r7, r6
 800074c:	003e      	movs	r6, r7
 800074e:	464f      	mov	r7, r9
 8000750:	4337      	orrs	r7, r6
 8000752:	46b9      	mov	r9, r7
 8000754:	e76a      	b.n	800062c <HAL_GPIO_Init+0xc8>
 8000756:	4667      	mov	r7, ip
 8000758:	2602      	movs	r6, #2
 800075a:	40be      	lsls	r6, r7
 800075c:	464f      	mov	r7, r9
 800075e:	4337      	orrs	r7, r6
 8000760:	46b9      	mov	r9, r7
 8000762:	e763      	b.n	800062c <HAL_GPIO_Init+0xc8>
 8000764:	40021000 	.word	0x40021000
 8000768:	40010000 	.word	0x40010000
 800076c:	48000400 	.word	0x48000400
 8000770:	48000800 	.word	0x48000800
 8000774:	48000c00 	.word	0x48000c00
 8000778:	40010400 	.word	0x40010400

0800077c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800077c:	2a00      	cmp	r2, #0
 800077e:	d001      	beq.n	8000784 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000780:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000782:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000784:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000786:	e7fc      	b.n	8000782 <HAL_GPIO_WritePin+0x6>

08000788 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000788:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800078a:	0013      	movs	r3, r2
 800078c:	400b      	ands	r3, r1
 800078e:	041b      	lsls	r3, r3, #16
 8000790:	4391      	bics	r1, r2
 8000792:	430b      	orrs	r3, r1
 8000794:	6183      	str	r3, [r0, #24]
}
 8000796:	4770      	bx	lr

08000798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800079a:	46ce      	mov	lr, r9
 800079c:	4647      	mov	r7, r8
 800079e:	b580      	push	{r7, lr}
 80007a0:	0004      	movs	r4, r0
 80007a2:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007a4:	2800      	cmp	r0, #0
 80007a6:	d100      	bne.n	80007aa <HAL_RCC_OscConfig+0x12>
 80007a8:	e0ee      	b.n	8000988 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007aa:	6803      	ldr	r3, [r0, #0]
 80007ac:	07da      	lsls	r2, r3, #31
 80007ae:	d535      	bpl.n	800081c <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007b0:	210c      	movs	r1, #12
 80007b2:	48c3      	ldr	r0, [pc, #780]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007b4:	6842      	ldr	r2, [r0, #4]
 80007b6:	400a      	ands	r2, r1
 80007b8:	2a04      	cmp	r2, #4
 80007ba:	d100      	bne.n	80007be <HAL_RCC_OscConfig+0x26>
 80007bc:	e101      	b.n	80009c2 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007be:	6842      	ldr	r2, [r0, #4]
 80007c0:	4011      	ands	r1, r2
 80007c2:	2908      	cmp	r1, #8
 80007c4:	d100      	bne.n	80007c8 <HAL_RCC_OscConfig+0x30>
 80007c6:	e0f8      	b.n	80009ba <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007c8:	6863      	ldr	r3, [r4, #4]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d00f      	beq.n	80007ee <HAL_RCC_OscConfig+0x56>
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d100      	bne.n	80007d4 <HAL_RCC_OscConfig+0x3c>
 80007d2:	e11e      	b.n	8000a12 <HAL_RCC_OscConfig+0x27a>
 80007d4:	2b05      	cmp	r3, #5
 80007d6:	d100      	bne.n	80007da <HAL_RCC_OscConfig+0x42>
 80007d8:	e1a7      	b.n	8000b2a <HAL_RCC_OscConfig+0x392>
 80007da:	4bb9      	ldr	r3, [pc, #740]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007dc:	49b9      	ldr	r1, [pc, #740]	; (8000ac4 <HAL_RCC_OscConfig+0x32c>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	400a      	ands	r2, r1
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	49b8      	ldr	r1, [pc, #736]	; (8000ac8 <HAL_RCC_OscConfig+0x330>)
 80007e8:	400a      	ands	r2, r1
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	e005      	b.n	80007fa <HAL_RCC_OscConfig+0x62>
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	4ab3      	ldr	r2, [pc, #716]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007f2:	025b      	lsls	r3, r3, #9
 80007f4:	6811      	ldr	r1, [r2, #0]
 80007f6:	430b      	orrs	r3, r1
 80007f8:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007fa:	f7ff fe61 	bl	80004c0 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007fe:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000800:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000802:	4faf      	ldr	r7, [pc, #700]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000804:	02b6      	lsls	r6, r6, #10
 8000806:	e005      	b.n	8000814 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000808:	f7ff fe5a 	bl	80004c0 <HAL_GetTick>
 800080c:	1b40      	subs	r0, r0, r5
 800080e:	2864      	cmp	r0, #100	; 0x64
 8000810:	d900      	bls.n	8000814 <HAL_RCC_OscConfig+0x7c>
 8000812:	e0fc      	b.n	8000a0e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	4233      	tst	r3, r6
 8000818:	d0f6      	beq.n	8000808 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800081a:	6823      	ldr	r3, [r4, #0]
 800081c:	079a      	lsls	r2, r3, #30
 800081e:	d529      	bpl.n	8000874 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000820:	220c      	movs	r2, #12
 8000822:	49a7      	ldr	r1, [pc, #668]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000824:	6848      	ldr	r0, [r1, #4]
 8000826:	4202      	tst	r2, r0
 8000828:	d100      	bne.n	800082c <HAL_RCC_OscConfig+0x94>
 800082a:	e0a6      	b.n	800097a <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800082c:	6848      	ldr	r0, [r1, #4]
 800082e:	4002      	ands	r2, r0
 8000830:	2a08      	cmp	r2, #8
 8000832:	d100      	bne.n	8000836 <HAL_RCC_OscConfig+0x9e>
 8000834:	e09d      	b.n	8000972 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000836:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000838:	4da1      	ldr	r5, [pc, #644]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800083a:	2b00      	cmp	r3, #0
 800083c:	d100      	bne.n	8000840 <HAL_RCC_OscConfig+0xa8>
 800083e:	e11f      	b.n	8000a80 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8000840:	2201      	movs	r2, #1
 8000842:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000844:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000846:	4313      	orrs	r3, r2
 8000848:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800084a:	f7ff fe39 	bl	80004c0 <HAL_GetTick>
 800084e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000850:	e005      	b.n	800085e <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000852:	f7ff fe35 	bl	80004c0 <HAL_GetTick>
 8000856:	1b80      	subs	r0, r0, r6
 8000858:	2802      	cmp	r0, #2
 800085a:	d900      	bls.n	800085e <HAL_RCC_OscConfig+0xc6>
 800085c:	e0d7      	b.n	8000a0e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800085e:	682b      	ldr	r3, [r5, #0]
 8000860:	421f      	tst	r7, r3
 8000862:	d0f6      	beq.n	8000852 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000864:	21f8      	movs	r1, #248	; 0xf8
 8000866:	682a      	ldr	r2, [r5, #0]
 8000868:	6923      	ldr	r3, [r4, #16]
 800086a:	438a      	bics	r2, r1
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	4313      	orrs	r3, r2
 8000870:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000872:	6823      	ldr	r3, [r4, #0]
 8000874:	071a      	lsls	r2, r3, #28
 8000876:	d42d      	bmi.n	80008d4 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000878:	075a      	lsls	r2, r3, #29
 800087a:	d544      	bpl.n	8000906 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800087c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800087e:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000880:	4b8f      	ldr	r3, [pc, #572]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000882:	0552      	lsls	r2, r2, #21
 8000884:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000886:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000888:	4211      	tst	r1, r2
 800088a:	d108      	bne.n	800089e <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	69d9      	ldr	r1, [r3, #28]
 800088e:	4311      	orrs	r1, r2
 8000890:	61d9      	str	r1, [r3, #28]
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	4013      	ands	r3, r2
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800089a:	2301      	movs	r3, #1
 800089c:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800089e:	2780      	movs	r7, #128	; 0x80
 80008a0:	4e8a      	ldr	r6, [pc, #552]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 80008a2:	007f      	lsls	r7, r7, #1
 80008a4:	6833      	ldr	r3, [r6, #0]
 80008a6:	423b      	tst	r3, r7
 80008a8:	d100      	bne.n	80008ac <HAL_RCC_OscConfig+0x114>
 80008aa:	e094      	b.n	80009d6 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008ac:	68a3      	ldr	r3, [r4, #8]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d100      	bne.n	80008b4 <HAL_RCC_OscConfig+0x11c>
 80008b2:	e0f8      	b.n	8000aa6 <HAL_RCC_OscConfig+0x30e>
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d100      	bne.n	80008ba <HAL_RCC_OscConfig+0x122>
 80008b8:	e0c4      	b.n	8000a44 <HAL_RCC_OscConfig+0x2ac>
 80008ba:	2b05      	cmp	r3, #5
 80008bc:	d100      	bne.n	80008c0 <HAL_RCC_OscConfig+0x128>
 80008be:	e140      	b.n	8000b42 <HAL_RCC_OscConfig+0x3aa>
 80008c0:	2101      	movs	r1, #1
 80008c2:	4b7f      	ldr	r3, [pc, #508]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008c4:	6a1a      	ldr	r2, [r3, #32]
 80008c6:	438a      	bics	r2, r1
 80008c8:	621a      	str	r2, [r3, #32]
 80008ca:	6a1a      	ldr	r2, [r3, #32]
 80008cc:	3103      	adds	r1, #3
 80008ce:	438a      	bics	r2, r1
 80008d0:	621a      	str	r2, [r3, #32]
 80008d2:	e0ec      	b.n	8000aae <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008d4:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 80008d6:	4d7a      	ldr	r5, [pc, #488]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d05b      	beq.n	8000994 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 80008dc:	2201      	movs	r2, #1
 80008de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008e0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80008e2:	4313      	orrs	r3, r2
 80008e4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80008e6:	f7ff fdeb 	bl	80004c0 <HAL_GetTick>
 80008ea:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008ec:	e005      	b.n	80008fa <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008ee:	f7ff fde7 	bl	80004c0 <HAL_GetTick>
 80008f2:	1b80      	subs	r0, r0, r6
 80008f4:	2802      	cmp	r0, #2
 80008f6:	d900      	bls.n	80008fa <HAL_RCC_OscConfig+0x162>
 80008f8:	e089      	b.n	8000a0e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80008fc:	421f      	tst	r7, r3
 80008fe:	d0f6      	beq.n	80008ee <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000900:	6823      	ldr	r3, [r4, #0]
 8000902:	075a      	lsls	r2, r3, #29
 8000904:	d4ba      	bmi.n	800087c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000906:	06db      	lsls	r3, r3, #27
 8000908:	d512      	bpl.n	8000930 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800090a:	6963      	ldr	r3, [r4, #20]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d100      	bne.n	8000912 <HAL_RCC_OscConfig+0x17a>
 8000910:	e13d      	b.n	8000b8e <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000912:	3305      	adds	r3, #5
 8000914:	d000      	beq.n	8000918 <HAL_RCC_OscConfig+0x180>
 8000916:	e0e9      	b.n	8000aec <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000918:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800091a:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 800091c:	4a68      	ldr	r2, [pc, #416]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800091e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000920:	438b      	bics	r3, r1
 8000922:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000924:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000926:	69a3      	ldr	r3, [r4, #24]
 8000928:	4381      	bics	r1, r0
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	430b      	orrs	r3, r1
 800092e:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000930:	6a23      	ldr	r3, [r4, #32]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d01b      	beq.n	800096e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000936:	220c      	movs	r2, #12
 8000938:	4d61      	ldr	r5, [pc, #388]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800093a:	6869      	ldr	r1, [r5, #4]
 800093c:	400a      	ands	r2, r1
 800093e:	2a08      	cmp	r2, #8
 8000940:	d100      	bne.n	8000944 <HAL_RCC_OscConfig+0x1ac>
 8000942:	e108      	b.n	8000b56 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000944:	2b02      	cmp	r3, #2
 8000946:	d100      	bne.n	800094a <HAL_RCC_OscConfig+0x1b2>
 8000948:	e13f      	b.n	8000bca <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800094a:	682b      	ldr	r3, [r5, #0]
 800094c:	4a60      	ldr	r2, [pc, #384]	; (8000ad0 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800094e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000950:	4013      	ands	r3, r2
 8000952:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000954:	f7ff fdb4 	bl	80004c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000958:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800095a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800095c:	e004      	b.n	8000968 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800095e:	f7ff fdaf 	bl	80004c0 <HAL_GetTick>
 8000962:	1b00      	subs	r0, r0, r4
 8000964:	2802      	cmp	r0, #2
 8000966:	d852      	bhi.n	8000a0e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	4233      	tst	r3, r6
 800096c:	d1f7      	bne.n	800095e <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 800096e:	2000      	movs	r0, #0
 8000970:	e00b      	b.n	800098a <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000972:	684a      	ldr	r2, [r1, #4]
 8000974:	03d2      	lsls	r2, r2, #15
 8000976:	d500      	bpl.n	800097a <HAL_RCC_OscConfig+0x1e2>
 8000978:	e75d      	b.n	8000836 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800097a:	4a51      	ldr	r2, [pc, #324]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800097c:	6812      	ldr	r2, [r2, #0]
 800097e:	0792      	lsls	r2, r2, #30
 8000980:	d539      	bpl.n	80009f6 <HAL_RCC_OscConfig+0x25e>
 8000982:	68e2      	ldr	r2, [r4, #12]
 8000984:	2a01      	cmp	r2, #1
 8000986:	d036      	beq.n	80009f6 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8000988:	2001      	movs	r0, #1
}
 800098a:	b003      	add	sp, #12
 800098c:	bcc0      	pop	{r6, r7}
 800098e:	46b9      	mov	r9, r7
 8000990:	46b0      	mov	r8, r6
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8000994:	2201      	movs	r2, #1
 8000996:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000998:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800099a:	4393      	bics	r3, r2
 800099c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800099e:	f7ff fd8f 	bl	80004c0 <HAL_GetTick>
 80009a2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009a4:	e004      	b.n	80009b0 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009a6:	f7ff fd8b 	bl	80004c0 <HAL_GetTick>
 80009aa:	1b80      	subs	r0, r0, r6
 80009ac:	2802      	cmp	r0, #2
 80009ae:	d82e      	bhi.n	8000a0e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80009b2:	421f      	tst	r7, r3
 80009b4:	d1f7      	bne.n	80009a6 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	e7a3      	b.n	8000902 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009ba:	6842      	ldr	r2, [r0, #4]
 80009bc:	03d2      	lsls	r2, r2, #15
 80009be:	d400      	bmi.n	80009c2 <HAL_RCC_OscConfig+0x22a>
 80009c0:	e702      	b.n	80007c8 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009c2:	4a3f      	ldr	r2, [pc, #252]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	0392      	lsls	r2, r2, #14
 80009c8:	d400      	bmi.n	80009cc <HAL_RCC_OscConfig+0x234>
 80009ca:	e727      	b.n	800081c <HAL_RCC_OscConfig+0x84>
 80009cc:	6862      	ldr	r2, [r4, #4]
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d000      	beq.n	80009d4 <HAL_RCC_OscConfig+0x23c>
 80009d2:	e723      	b.n	800081c <HAL_RCC_OscConfig+0x84>
 80009d4:	e7d8      	b.n	8000988 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009d6:	6833      	ldr	r3, [r6, #0]
 80009d8:	433b      	orrs	r3, r7
 80009da:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80009dc:	f7ff fd70 	bl	80004c0 <HAL_GetTick>
 80009e0:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009e2:	e004      	b.n	80009ee <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009e4:	f7ff fd6c 	bl	80004c0 <HAL_GetTick>
 80009e8:	1b40      	subs	r0, r0, r5
 80009ea:	2864      	cmp	r0, #100	; 0x64
 80009ec:	d80f      	bhi.n	8000a0e <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ee:	6833      	ldr	r3, [r6, #0]
 80009f0:	423b      	tst	r3, r7
 80009f2:	d0f7      	beq.n	80009e4 <HAL_RCC_OscConfig+0x24c>
 80009f4:	e75a      	b.n	80008ac <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f6:	25f8      	movs	r5, #248	; 0xf8
 80009f8:	4831      	ldr	r0, [pc, #196]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009fa:	6922      	ldr	r2, [r4, #16]
 80009fc:	6801      	ldr	r1, [r0, #0]
 80009fe:	00d2      	lsls	r2, r2, #3
 8000a00:	43a9      	bics	r1, r5
 8000a02:	430a      	orrs	r2, r1
 8000a04:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a06:	071a      	lsls	r2, r3, #28
 8000a08:	d400      	bmi.n	8000a0c <HAL_RCC_OscConfig+0x274>
 8000a0a:	e735      	b.n	8000878 <HAL_RCC_OscConfig+0xe0>
 8000a0c:	e762      	b.n	80008d4 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8000a0e:	2003      	movs	r0, #3
 8000a10:	e7bb      	b.n	800098a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a12:	4d2b      	ldr	r5, [pc, #172]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a14:	4a2b      	ldr	r2, [pc, #172]	; (8000ac4 <HAL_RCC_OscConfig+0x32c>)
 8000a16:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a18:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	602b      	str	r3, [r5, #0]
 8000a1e:	682b      	ldr	r3, [r5, #0]
 8000a20:	4a29      	ldr	r2, [pc, #164]	; (8000ac8 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a22:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a24:	4013      	ands	r3, r2
 8000a26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a28:	f7ff fd4a 	bl	80004c0 <HAL_GetTick>
 8000a2c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a2e:	e004      	b.n	8000a3a <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a30:	f7ff fd46 	bl	80004c0 <HAL_GetTick>
 8000a34:	1b80      	subs	r0, r0, r6
 8000a36:	2864      	cmp	r0, #100	; 0x64
 8000a38:	d8e9      	bhi.n	8000a0e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	423b      	tst	r3, r7
 8000a3e:	d1f7      	bne.n	8000a30 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	e6eb      	b.n	800081c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a44:	2201      	movs	r2, #1
 8000a46:	4e1e      	ldr	r6, [pc, #120]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a48:	4d22      	ldr	r5, [pc, #136]	; (8000ad4 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a4a:	6a33      	ldr	r3, [r6, #32]
 8000a4c:	4393      	bics	r3, r2
 8000a4e:	6233      	str	r3, [r6, #32]
 8000a50:	6a33      	ldr	r3, [r6, #32]
 8000a52:	3203      	adds	r2, #3
 8000a54:	4393      	bics	r3, r2
 8000a56:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8000a58:	f7ff fd32 	bl	80004c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a5c:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8000a5e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a60:	4698      	mov	r8, r3
 8000a62:	e004      	b.n	8000a6e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a64:	f7ff fd2c 	bl	80004c0 <HAL_GetTick>
 8000a68:	1bc0      	subs	r0, r0, r7
 8000a6a:	42a8      	cmp	r0, r5
 8000a6c:	d8cf      	bhi.n	8000a0e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a6e:	4642      	mov	r2, r8
 8000a70:	6a33      	ldr	r3, [r6, #32]
 8000a72:	421a      	tst	r2, r3
 8000a74:	d1f6      	bne.n	8000a64 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8000a76:	464b      	mov	r3, r9
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d04f      	beq.n	8000b1c <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	e742      	b.n	8000906 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8000a80:	2201      	movs	r2, #1
 8000a82:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a84:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000a86:	4393      	bics	r3, r2
 8000a88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a8a:	f7ff fd19 	bl	80004c0 <HAL_GetTick>
 8000a8e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a90:	e004      	b.n	8000a9c <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a92:	f7ff fd15 	bl	80004c0 <HAL_GetTick>
 8000a96:	1b80      	subs	r0, r0, r6
 8000a98:	2802      	cmp	r0, #2
 8000a9a:	d8b8      	bhi.n	8000a0e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	421f      	tst	r7, r3
 8000aa0:	d1f7      	bne.n	8000a92 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	e6e6      	b.n	8000874 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa6:	4906      	ldr	r1, [pc, #24]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000aa8:	6a0a      	ldr	r2, [r1, #32]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000aae:	f7ff fd07 	bl	80004c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab2:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8000ab4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab6:	4698      	mov	r8, r3
 8000ab8:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aba:	4d06      	ldr	r5, [pc, #24]	; (8000ad4 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000abc:	e011      	b.n	8000ae2 <HAL_RCC_OscConfig+0x34a>
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	fffeffff 	.word	0xfffeffff
 8000ac8:	fffbffff 	.word	0xfffbffff
 8000acc:	40007000 	.word	0x40007000
 8000ad0:	feffffff 	.word	0xfeffffff
 8000ad4:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad8:	f7ff fcf2 	bl	80004c0 <HAL_GetTick>
 8000adc:	1b80      	subs	r0, r0, r6
 8000ade:	42a8      	cmp	r0, r5
 8000ae0:	d895      	bhi.n	8000a0e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae2:	4643      	mov	r3, r8
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	421f      	tst	r7, r3
 8000ae8:	d0f6      	beq.n	8000ad8 <HAL_RCC_OscConfig+0x340>
 8000aea:	e7c4      	b.n	8000a76 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000aec:	2204      	movs	r2, #4
 8000aee:	4d53      	ldr	r5, [pc, #332]	; (8000c3c <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000af0:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000af2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000af4:	4313      	orrs	r3, r2
 8000af6:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000af8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000afa:	3a03      	subs	r2, #3
 8000afc:	4393      	bics	r3, r2
 8000afe:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000b00:	f7ff fcde 	bl	80004c0 <HAL_GetTick>
 8000b04:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000b06:	e005      	b.n	8000b14 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b08:	f7ff fcda 	bl	80004c0 <HAL_GetTick>
 8000b0c:	1b80      	subs	r0, r0, r6
 8000b0e:	2802      	cmp	r0, #2
 8000b10:	d900      	bls.n	8000b14 <HAL_RCC_OscConfig+0x37c>
 8000b12:	e77c      	b.n	8000a0e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000b14:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000b16:	421f      	tst	r7, r3
 8000b18:	d1f6      	bne.n	8000b08 <HAL_RCC_OscConfig+0x370>
 8000b1a:	e709      	b.n	8000930 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b1c:	4a47      	ldr	r2, [pc, #284]	; (8000c3c <HAL_RCC_OscConfig+0x4a4>)
 8000b1e:	4948      	ldr	r1, [pc, #288]	; (8000c40 <HAL_RCC_OscConfig+0x4a8>)
 8000b20:	69d3      	ldr	r3, [r2, #28]
 8000b22:	400b      	ands	r3, r1
 8000b24:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	e6ed      	b.n	8000906 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <HAL_RCC_OscConfig+0x4a4>)
 8000b2e:	02d2      	lsls	r2, r2, #11
 8000b30:	6819      	ldr	r1, [r3, #0]
 8000b32:	430a      	orrs	r2, r1
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	6819      	ldr	r1, [r3, #0]
 8000b3a:	0252      	lsls	r2, r2, #9
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	e65b      	b.n	80007fa <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b42:	2104      	movs	r1, #4
 8000b44:	4b3d      	ldr	r3, [pc, #244]	; (8000c3c <HAL_RCC_OscConfig+0x4a4>)
 8000b46:	6a1a      	ldr	r2, [r3, #32]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	621a      	str	r2, [r3, #32]
 8000b4c:	6a1a      	ldr	r2, [r3, #32]
 8000b4e:	3903      	subs	r1, #3
 8000b50:	430a      	orrs	r2, r1
 8000b52:	621a      	str	r2, [r3, #32]
 8000b54:	e7ab      	b.n	8000aae <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d100      	bne.n	8000b5c <HAL_RCC_OscConfig+0x3c4>
 8000b5a:	e715      	b.n	8000988 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b5c:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8000b5e:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b62:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8000b64:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8000b66:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b68:	4013      	ands	r3, r2
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d000      	beq.n	8000b70 <HAL_RCC_OscConfig+0x3d8>
 8000b6e:	e70c      	b.n	800098a <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000b70:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000b74:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d000      	beq.n	8000b7c <HAL_RCC_OscConfig+0x3e4>
 8000b7a:	e706      	b.n	800098a <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000b7c:	23f0      	movs	r3, #240	; 0xf0
 8000b7e:	039b      	lsls	r3, r3, #14
 8000b80:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000b82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b84:	1ad2      	subs	r2, r2, r3
 8000b86:	1e53      	subs	r3, r2, #1
 8000b88:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 8000b8a:	b2d0      	uxtb	r0, r2
 8000b8c:	e6fd      	b.n	800098a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b8e:	2104      	movs	r1, #4
 8000b90:	4d2a      	ldr	r5, [pc, #168]	; (8000c3c <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b92:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b94:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000b96:	430a      	orrs	r2, r1
 8000b98:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000b9a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ba0:	f7ff fc8e 	bl	80004c0 <HAL_GetTick>
 8000ba4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ba6:	e005      	b.n	8000bb4 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ba8:	f7ff fc8a 	bl	80004c0 <HAL_GetTick>
 8000bac:	1b80      	subs	r0, r0, r6
 8000bae:	2802      	cmp	r0, #2
 8000bb0:	d900      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x41c>
 8000bb2:	e72c      	b.n	8000a0e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000bb4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000bb6:	421f      	tst	r7, r3
 8000bb8:	d0f6      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000bba:	21f8      	movs	r1, #248	; 0xf8
 8000bbc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000bbe:	69a3      	ldr	r3, [r4, #24]
 8000bc0:	438a      	bics	r2, r1
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	636b      	str	r3, [r5, #52]	; 0x34
 8000bc8:	e6b2      	b.n	8000930 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bce:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bd4:	f7ff fc74 	bl	80004c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd8:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8000bda:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bdc:	e005      	b.n	8000bea <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bde:	f7ff fc6f 	bl	80004c0 <HAL_GetTick>
 8000be2:	1b80      	subs	r0, r0, r6
 8000be4:	2802      	cmp	r0, #2
 8000be6:	d900      	bls.n	8000bea <HAL_RCC_OscConfig+0x452>
 8000be8:	e711      	b.n	8000a0e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bea:	682b      	ldr	r3, [r5, #0]
 8000bec:	423b      	tst	r3, r7
 8000bee:	d1f6      	bne.n	8000bde <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bf4:	4e11      	ldr	r6, [pc, #68]	; (8000c3c <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bf6:	4393      	bics	r3, r2
 8000bf8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000bfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000c00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c02:	686a      	ldr	r2, [r5, #4]
 8000c04:	430b      	orrs	r3, r1
 8000c06:	4910      	ldr	r1, [pc, #64]	; (8000c48 <HAL_RCC_OscConfig+0x4b0>)
 8000c08:	400a      	ands	r2, r1
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	682a      	ldr	r2, [r5, #0]
 8000c12:	045b      	lsls	r3, r3, #17
 8000c14:	4313      	orrs	r3, r2
 8000c16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c18:	f7ff fc52 	bl	80004c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c1c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c1e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c20:	04ad      	lsls	r5, r5, #18
 8000c22:	e005      	b.n	8000c30 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c24:	f7ff fc4c 	bl	80004c0 <HAL_GetTick>
 8000c28:	1b00      	subs	r0, r0, r4
 8000c2a:	2802      	cmp	r0, #2
 8000c2c:	d900      	bls.n	8000c30 <HAL_RCC_OscConfig+0x498>
 8000c2e:	e6ee      	b.n	8000a0e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c30:	6833      	ldr	r3, [r6, #0]
 8000c32:	422b      	tst	r3, r5
 8000c34:	d0f6      	beq.n	8000c24 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8000c36:	2000      	movs	r0, #0
 8000c38:	e6a7      	b.n	800098a <HAL_RCC_OscConfig+0x1f2>
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	efffffff 	.word	0xefffffff
 8000c44:	feffffff 	.word	0xfeffffff
 8000c48:	ffc2ffff 	.word	0xffc2ffff

08000c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4e:	46ce      	mov	lr, r9
 8000c50:	4647      	mov	r7, r8
 8000c52:	0004      	movs	r4, r0
 8000c54:	000d      	movs	r5, r1
 8000c56:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	d00d      	beq.n	8000c78 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	494f      	ldr	r1, [pc, #316]	; (8000d9c <HAL_RCC_ClockConfig+0x150>)
 8000c60:	680a      	ldr	r2, [r1, #0]
 8000c62:	401a      	ands	r2, r3
 8000c64:	42aa      	cmp	r2, r5
 8000c66:	d20c      	bcs.n	8000c82 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c68:	680a      	ldr	r2, [r1, #0]
 8000c6a:	439a      	bics	r2, r3
 8000c6c:	432a      	orrs	r2, r5
 8000c6e:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c70:	680a      	ldr	r2, [r1, #0]
 8000c72:	4013      	ands	r3, r2
 8000c74:	42ab      	cmp	r3, r5
 8000c76:	d004      	beq.n	8000c82 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8000c78:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8000c7a:	bcc0      	pop	{r6, r7}
 8000c7c:	46b9      	mov	r9, r7
 8000c7e:	46b0      	mov	r8, r6
 8000c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c82:	6823      	ldr	r3, [r4, #0]
 8000c84:	079a      	lsls	r2, r3, #30
 8000c86:	d50e      	bpl.n	8000ca6 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c88:	075a      	lsls	r2, r3, #29
 8000c8a:	d505      	bpl.n	8000c98 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000c8c:	22e0      	movs	r2, #224	; 0xe0
 8000c8e:	4944      	ldr	r1, [pc, #272]	; (8000da0 <HAL_RCC_ClockConfig+0x154>)
 8000c90:	00d2      	lsls	r2, r2, #3
 8000c92:	6848      	ldr	r0, [r1, #4]
 8000c94:	4302      	orrs	r2, r0
 8000c96:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c98:	20f0      	movs	r0, #240	; 0xf0
 8000c9a:	4941      	ldr	r1, [pc, #260]	; (8000da0 <HAL_RCC_ClockConfig+0x154>)
 8000c9c:	684a      	ldr	r2, [r1, #4]
 8000c9e:	4382      	bics	r2, r0
 8000ca0:	68a0      	ldr	r0, [r4, #8]
 8000ca2:	4302      	orrs	r2, r0
 8000ca4:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ca6:	07db      	lsls	r3, r3, #31
 8000ca8:	d522      	bpl.n	8000cf0 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <HAL_RCC_ClockConfig+0x154>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cac:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cae:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cb0:	2a01      	cmp	r2, #1
 8000cb2:	d065      	beq.n	8000d80 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cb4:	2a02      	cmp	r2, #2
 8000cb6:	d060      	beq.n	8000d7a <HAL_RCC_ClockConfig+0x12e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb8:	079b      	lsls	r3, r3, #30
 8000cba:	d5dd      	bpl.n	8000c78 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	4e38      	ldr	r6, [pc, #224]	; (8000da0 <HAL_RCC_ClockConfig+0x154>)
 8000cc0:	6873      	ldr	r3, [r6, #4]
 8000cc2:	438b      	bics	r3, r1
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000cc8:	f7ff fbfa 	bl	80004c0 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ccc:	230c      	movs	r3, #12
 8000cce:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cd0:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <HAL_RCC_ClockConfig+0x158>)
    tickstart = HAL_GetTick();
 8000cd2:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cd4:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cd6:	e004      	b.n	8000ce2 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cd8:	f7ff fbf2 	bl	80004c0 <HAL_GetTick>
 8000cdc:	1bc0      	subs	r0, r0, r7
 8000cde:	4548      	cmp	r0, r9
 8000ce0:	d851      	bhi.n	8000d86 <HAL_RCC_ClockConfig+0x13a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ce2:	4643      	mov	r3, r8
 8000ce4:	6872      	ldr	r2, [r6, #4]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	6863      	ldr	r3, [r4, #4]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d1f3      	bne.n	8000cd8 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4a2a      	ldr	r2, [pc, #168]	; (8000d9c <HAL_RCC_ClockConfig+0x150>)
 8000cf4:	6813      	ldr	r3, [r2, #0]
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	42ab      	cmp	r3, r5
 8000cfa:	d905      	bls.n	8000d08 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cfc:	6813      	ldr	r3, [r2, #0]
 8000cfe:	438b      	bics	r3, r1
 8000d00:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d02:	6813      	ldr	r3, [r2, #0]
 8000d04:	4219      	tst	r1, r3
 8000d06:	d1b7      	bne.n	8000c78 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	075b      	lsls	r3, r3, #29
 8000d0c:	d416      	bmi.n	8000d3c <HAL_RCC_ClockConfig+0xf0>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d0e:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8000d10:	4923      	ldr	r1, [pc, #140]	; (8000da0 <HAL_RCC_ClockConfig+0x154>)
 8000d12:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000d14:	4013      	ands	r3, r2
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d01d      	beq.n	8000d56 <HAL_RCC_ClockConfig+0x10a>
 8000d1a:	2b08      	cmp	r3, #8
 8000d1c:	d01d      	beq.n	8000d5a <HAL_RCC_ClockConfig+0x10e>
 8000d1e:	4822      	ldr	r0, [pc, #136]	; (8000da8 <HAL_RCC_ClockConfig+0x15c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <HAL_RCC_ClockConfig+0x154>)
 8000d22:	4a22      	ldr	r2, [pc, #136]	; (8000dac <HAL_RCC_ClockConfig+0x160>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	4922      	ldr	r1, [pc, #136]	; (8000db0 <HAL_RCC_ClockConfig+0x164>)
 8000d28:	061b      	lsls	r3, r3, #24
 8000d2a:	0f1b      	lsrs	r3, r3, #28
 8000d2c:	5cd3      	ldrb	r3, [r2, r3]
 8000d2e:	40d8      	lsrs	r0, r3
 8000d30:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d32:	2003      	movs	r0, #3
 8000d34:	f7ff fb82 	bl	800043c <HAL_InitTick>
  return HAL_OK;
 8000d38:	2000      	movs	r0, #0
 8000d3a:	e79e      	b.n	8000c7a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000d3c:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <HAL_RCC_ClockConfig+0x154>)
 8000d3e:	491d      	ldr	r1, [pc, #116]	; (8000db4 <HAL_RCC_ClockConfig+0x168>)
 8000d40:	6853      	ldr	r3, [r2, #4]
 8000d42:	400b      	ands	r3, r1
 8000d44:	68e1      	ldr	r1, [r4, #12]
 8000d46:	430b      	orrs	r3, r1
 8000d48:	6053      	str	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000d4a:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8000d4c:	4914      	ldr	r1, [pc, #80]	; (8000da0 <HAL_RCC_ClockConfig+0x154>)
 8000d4e:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d1e1      	bne.n	8000d1a <HAL_RCC_ClockConfig+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000d56:	4818      	ldr	r0, [pc, #96]	; (8000db8 <HAL_RCC_ClockConfig+0x16c>)
 8000d58:	e7e2      	b.n	8000d20 <HAL_RCC_ClockConfig+0xd4>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000d5a:	250f      	movs	r5, #15
 8000d5c:	4817      	ldr	r0, [pc, #92]	; (8000dbc <HAL_RCC_ClockConfig+0x170>)
 8000d5e:	0c93      	lsrs	r3, r2, #18
 8000d60:	402b      	ands	r3, r5
 8000d62:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000d64:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	d50f      	bpl.n	8000d8a <HAL_RCC_ClockConfig+0x13e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_RCC_ClockConfig+0x174>)
 8000d6c:	400d      	ands	r5, r1
 8000d6e:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000d70:	4811      	ldr	r0, [pc, #68]	; (8000db8 <HAL_RCC_ClockConfig+0x16c>)
 8000d72:	f7ff f9c9 	bl	8000108 <__udivsi3>
 8000d76:	4360      	muls	r0, r4
 8000d78:	e7d2      	b.n	8000d20 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d7a:	019b      	lsls	r3, r3, #6
 8000d7c:	d49e      	bmi.n	8000cbc <HAL_RCC_ClockConfig+0x70>
 8000d7e:	e77b      	b.n	8000c78 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d80:	039b      	lsls	r3, r3, #14
 8000d82:	d49b      	bmi.n	8000cbc <HAL_RCC_ClockConfig+0x70>
 8000d84:	e778      	b.n	8000c78 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8000d86:	2003      	movs	r0, #3
 8000d88:	e777      	b.n	8000c7a <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000d8a:	0162      	lsls	r2, r4, #5
 8000d8c:	1b12      	subs	r2, r2, r4
 8000d8e:	0193      	lsls	r3, r2, #6
 8000d90:	1a9b      	subs	r3, r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	191b      	adds	r3, r3, r4
 8000d96:	0218      	lsls	r0, r3, #8
 8000d98:	e7c2      	b.n	8000d20 <HAL_RCC_ClockConfig+0xd4>
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40022000 	.word	0x40022000
 8000da0:	40021000 	.word	0x40021000
 8000da4:	00001388 	.word	0x00001388
 8000da8:	007a1200 	.word	0x007a1200
 8000dac:	08001120 	.word	0x08001120
 8000db0:	20000000 	.word	0x20000000
 8000db4:	fffff8ff 	.word	0xfffff8ff
 8000db8:	00f42400 	.word	0x00f42400
 8000dbc:	08001130 	.word	0x08001130
 8000dc0:	08001140 	.word	0x08001140

08000dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000dc4:	b510      	push	{r4, lr}
 8000dc6:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000dc8:	d05b      	beq.n	8000e82 <HAL_TIM_Base_Init+0xbe>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000dca:	233d      	movs	r3, #61	; 0x3d
 8000dcc:	5cc3      	ldrb	r3, [r0, r3]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d048      	beq.n	8000e66 <HAL_TIM_Base_Init+0xa2>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000dd4:	233d      	movs	r3, #61	; 0x3d
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000dda:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ddc:	492a      	ldr	r1, [pc, #168]	; (8000e88 <HAL_TIM_Base_Init+0xc4>)
  tmpcr1 = TIMx->CR1;
 8000dde:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000de0:	428a      	cmp	r2, r1
 8000de2:	d015      	beq.n	8000e10 <HAL_TIM_Base_Init+0x4c>
 8000de4:	4929      	ldr	r1, [pc, #164]	; (8000e8c <HAL_TIM_Base_Init+0xc8>)
 8000de6:	428a      	cmp	r2, r1
 8000de8:	d042      	beq.n	8000e70 <HAL_TIM_Base_Init+0xac>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000dea:	4929      	ldr	r1, [pc, #164]	; (8000e90 <HAL_TIM_Base_Init+0xcc>)
 8000dec:	428a      	cmp	r2, r1
 8000dee:	d043      	beq.n	8000e78 <HAL_TIM_Base_Init+0xb4>
 8000df0:	4928      	ldr	r1, [pc, #160]	; (8000e94 <HAL_TIM_Base_Init+0xd0>)
 8000df2:	428a      	cmp	r2, r1
 8000df4:	d010      	beq.n	8000e18 <HAL_TIM_Base_Init+0x54>
 8000df6:	4928      	ldr	r1, [pc, #160]	; (8000e98 <HAL_TIM_Base_Init+0xd4>)
 8000df8:	428a      	cmp	r2, r1
 8000dfa:	d00d      	beq.n	8000e18 <HAL_TIM_Base_Init+0x54>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	438b      	bics	r3, r1
 8000e00:	69a1      	ldr	r1, [r4, #24]
 8000e02:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8000e04:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e06:	68e3      	ldr	r3, [r4, #12]
 8000e08:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000e0a:	6863      	ldr	r3, [r4, #4]
 8000e0c:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000e0e:	e012      	b.n	8000e36 <HAL_TIM_Base_Init+0x72>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e10:	2170      	movs	r1, #112	; 0x70
 8000e12:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8000e14:	68a1      	ldr	r1, [r4, #8]
 8000e16:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e18:	4920      	ldr	r1, [pc, #128]	; (8000e9c <HAL_TIM_Base_Init+0xd8>)
 8000e1a:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e1c:	6921      	ldr	r1, [r4, #16]
 8000e1e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	438b      	bics	r3, r1
 8000e24:	69a1      	ldr	r1, [r4, #24]
 8000e26:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8000e28:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e2a:	68e3      	ldr	r3, [r4, #12]
 8000e2c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8000e2e:	6863      	ldr	r3, [r4, #4]
 8000e30:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e32:	6963      	ldr	r3, [r4, #20]
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000e36:	2301      	movs	r3, #1
 8000e38:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000e3a:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8000e3c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000e3e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000e40:	3a08      	subs	r2, #8
 8000e42:	54a3      	strb	r3, [r4, r2]
 8000e44:	3201      	adds	r2, #1
 8000e46:	54a3      	strb	r3, [r4, r2]
 8000e48:	3201      	adds	r2, #1
 8000e4a:	54a3      	strb	r3, [r4, r2]
 8000e4c:	3201      	adds	r2, #1
 8000e4e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000e50:	3201      	adds	r2, #1
 8000e52:	54a3      	strb	r3, [r4, r2]
 8000e54:	3201      	adds	r2, #1
 8000e56:	54a3      	strb	r3, [r4, r2]
 8000e58:	3201      	adds	r2, #1
 8000e5a:	54a3      	strb	r3, [r4, r2]
 8000e5c:	3201      	adds	r2, #1
 8000e5e:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8000e60:	3a08      	subs	r2, #8
 8000e62:	54a3      	strb	r3, [r4, r2]
}
 8000e64:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8000e66:	333c      	adds	r3, #60	; 0x3c
 8000e68:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8000e6a:	f7ff fa99 	bl	80003a0 <HAL_TIM_Base_MspInit>
 8000e6e:	e7b1      	b.n	8000dd4 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e70:	2170      	movs	r1, #112	; 0x70
 8000e72:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8000e74:	68a1      	ldr	r1, [r4, #8]
 8000e76:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e78:	4908      	ldr	r1, [pc, #32]	; (8000e9c <HAL_TIM_Base_Init+0xd8>)
 8000e7a:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e7c:	6921      	ldr	r1, [r4, #16]
 8000e7e:	430b      	orrs	r3, r1
 8000e80:	e7bc      	b.n	8000dfc <HAL_TIM_Base_Init+0x38>
    return HAL_ERROR;
 8000e82:	2001      	movs	r0, #1
 8000e84:	e7ee      	b.n	8000e64 <HAL_TIM_Base_Init+0xa0>
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	40012c00 	.word	0x40012c00
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	40002000 	.word	0x40002000
 8000e94:	40014400 	.word	0x40014400
 8000e98:	40014800 	.word	0x40014800
 8000e9c:	fffffcff 	.word	0xfffffcff

08000ea0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8000ea0:	223d      	movs	r2, #61	; 0x3d
 8000ea2:	5c81      	ldrb	r1, [r0, r2]
{
 8000ea4:	0003      	movs	r3, r0
    return HAL_ERROR;
 8000ea6:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8000ea8:	2901      	cmp	r1, #1
 8000eaa:	d10c      	bne.n	8000ec6 <HAL_TIM_Base_Start+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8000eac:	3101      	adds	r1, #1
 8000eae:	5499      	strb	r1, [r3, r2]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <HAL_TIM_Base_Start+0x44>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d007      	beq.n	8000ec8 <HAL_TIM_Base_Start+0x28>
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <HAL_TIM_Base_Start+0x48>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d004      	beq.n	8000ec8 <HAL_TIM_Base_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4302      	orrs	r2, r0
  return HAL_OK;
 8000ec2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8000ec4:	601a      	str	r2, [r3, #0]
}
 8000ec6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000ec8:	2207      	movs	r2, #7
 8000eca:	6899      	ldr	r1, [r3, #8]
 8000ecc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000ece:	2a06      	cmp	r2, #6
 8000ed0:	d005      	beq.n	8000ede <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8000ed6:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e7f3      	b.n	8000ec6 <HAL_TIM_Base_Start+0x26>
  return HAL_OK;
 8000ede:	2000      	movs	r0, #0
 8000ee0:	e7f1      	b.n	8000ec6 <HAL_TIM_Base_Start+0x26>
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	40012c00 	.word	0x40012c00
 8000ee8:	40000400 	.word	0x40000400

08000eec <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000eec:	233c      	movs	r3, #60	; 0x3c
{
 8000eee:	b570      	push	{r4, r5, r6, lr}
 8000ef0:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8000ef2:	5cc0      	ldrb	r0, [r0, r3]
 8000ef4:	2801      	cmp	r0, #1
 8000ef6:	d100      	bne.n	8000efa <HAL_TIM_ConfigClockSource+0xe>
 8000ef8:	e075      	b.n	8000fe6 <HAL_TIM_ConfigClockSource+0xfa>
 8000efa:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000efc:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8000efe:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8000f00:	3301      	adds	r3, #1
 8000f02:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8000f04:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f06:	4d52      	ldr	r5, [pc, #328]	; (8001050 <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr = htim->Instance->SMCR;
 8000f08:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f0a:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8000f0c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000f0e:	680b      	ldr	r3, [r1, #0]
 8000f10:	2b60      	cmp	r3, #96	; 0x60
 8000f12:	d100      	bne.n	8000f16 <HAL_TIM_ConfigClockSource+0x2a>
 8000f14:	e069      	b.n	8000fea <HAL_TIM_ConfigClockSource+0xfe>
 8000f16:	d823      	bhi.n	8000f60 <HAL_TIM_ConfigClockSource+0x74>
 8000f18:	2b40      	cmp	r3, #64	; 0x40
 8000f1a:	d100      	bne.n	8000f1e <HAL_TIM_ConfigClockSource+0x32>
 8000f1c:	e07f      	b.n	800101e <HAL_TIM_ConfigClockSource+0x132>
 8000f1e:	d952      	bls.n	8000fc6 <HAL_TIM_ConfigClockSource+0xda>
 8000f20:	2b50      	cmp	r3, #80	; 0x50
 8000f22:	d13b      	bne.n	8000f9c <HAL_TIM_ConfigClockSource+0xb0>
                               sClockSourceConfig->ClockPolarity,
 8000f24:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8000f26:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000f28:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f2a:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f2c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f2e:	43a6      	bics	r6, r4
 8000f30:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f32:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8000f34:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f36:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f38:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f3a:	240a      	movs	r4, #10
 8000f3c:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8000f3e:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000f40:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f42:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f44:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8000f46:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f48:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000f4a:	3919      	subs	r1, #25
 8000f4c:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000f4e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8000f50:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000f52:	233d      	movs	r3, #61	; 0x3d
 8000f54:	2101      	movs	r1, #1
 8000f56:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	54d1      	strb	r1, [r2, r3]
}
 8000f5e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000f60:	2480      	movs	r4, #128	; 0x80
 8000f62:	0164      	lsls	r4, r4, #5
 8000f64:	42a3      	cmp	r3, r4
 8000f66:	d03c      	beq.n	8000fe2 <HAL_TIM_ConfigClockSource+0xf6>
 8000f68:	2480      	movs	r4, #128	; 0x80
 8000f6a:	01a4      	lsls	r4, r4, #6
 8000f6c:	42a3      	cmp	r3, r4
 8000f6e:	d117      	bne.n	8000fa0 <HAL_TIM_ConfigClockSource+0xb4>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8000f70:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f72:	4b38      	ldr	r3, [pc, #224]	; (8001054 <HAL_TIM_ConfigClockSource+0x168>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f74:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f76:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f78:	688b      	ldr	r3, [r1, #8]
 8000f7a:	68c9      	ldr	r1, [r1, #12]
 8000f7c:	432b      	orrs	r3, r5
 8000f7e:	0209      	lsls	r1, r1, #8
 8000f80:	430b      	orrs	r3, r1
 8000f82:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000f84:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	6881      	ldr	r1, [r0, #8]
 8000f8a:	01db      	lsls	r3, r3, #7
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8000f90:	2000      	movs	r0, #0
      break;
 8000f92:	e7de      	b.n	8000f52 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8000f94:	2110      	movs	r1, #16
 8000f96:	001c      	movs	r4, r3
 8000f98:	438c      	bics	r4, r1
 8000f9a:	d019      	beq.n	8000fd0 <HAL_TIM_ConfigClockSource+0xe4>
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	e7d8      	b.n	8000f52 <HAL_TIM_ConfigClockSource+0x66>
 8000fa0:	2b70      	cmp	r3, #112	; 0x70
 8000fa2:	d1fb      	bne.n	8000f9c <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr = TIMx->SMCR;
 8000fa4:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000fa8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000faa:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000fac:	688b      	ldr	r3, [r1, #8]
 8000fae:	68c9      	ldr	r1, [r1, #12]
 8000fb0:	432b      	orrs	r3, r5
 8000fb2:	0209      	lsls	r1, r1, #8
 8000fb4:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000fb6:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000fb8:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8000fba:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000fbc:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000fbe:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8000fc0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc2:	2000      	movs	r0, #0
      break;
 8000fc4:	e7c5      	b.n	8000f52 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8000fc6:	2b20      	cmp	r3, #32
 8000fc8:	d002      	beq.n	8000fd0 <HAL_TIM_ConfigClockSource+0xe4>
 8000fca:	d9e3      	bls.n	8000f94 <HAL_TIM_ConfigClockSource+0xa8>
 8000fcc:	2b30      	cmp	r3, #48	; 0x30
 8000fce:	d1e5      	bne.n	8000f9c <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr &= ~TIM_SMCR_TS;
 8000fd0:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8000fd2:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000fd4:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	2107      	movs	r1, #7
 8000fda:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8000fdc:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8000fde:	2000      	movs	r0, #0
}
 8000fe0:	e7b7      	b.n	8000f52 <HAL_TIM_ConfigClockSource+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	e7b5      	b.n	8000f52 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	e7b9      	b.n	8000f5e <HAL_TIM_ConfigClockSource+0x72>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000fea:	2510      	movs	r5, #16
 8000fec:	6a04      	ldr	r4, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8000fee:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ff0:	43ac      	bics	r4, r5
                               sClockSourceConfig->ClockFilter);
 8000ff2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ff4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ff6:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ff8:	4e17      	ldr	r6, [pc, #92]	; (8001058 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000ffa:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ffc:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000ffe:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001000:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001002:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001004:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001006:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001008:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 800100e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001010:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001012:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001014:	3909      	subs	r1, #9
 8001016:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001018:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800101a:	2000      	movs	r0, #0
}
 800101c:	e799      	b.n	8000f52 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 800101e:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001020:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001022:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001024:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001026:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001028:	43a6      	bics	r6, r4
 800102a:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800102c:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800102e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001030:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001032:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001034:	240a      	movs	r4, #10
 8001036:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001038:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 800103a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800103c:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800103e:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001040:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001042:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001044:	3929      	subs	r1, #41	; 0x29
 8001046:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001048:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800104a:	2000      	movs	r0, #0
}
 800104c:	e781      	b.n	8000f52 <HAL_TIM_ConfigClockSource+0x66>
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	ffff0088 	.word	0xffff0088
 8001054:	ffff00ff 	.word	0xffff00ff
 8001058:	ffff0fff 	.word	0xffff0fff

0800105c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800105c:	233c      	movs	r3, #60	; 0x3c
{
 800105e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001060:	5cc3      	ldrb	r3, [r0, r3]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d01e      	beq.n	80010a4 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001066:	233d      	movs	r3, #61	; 0x3d
 8001068:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800106a:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800106c:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 800106e:	6803      	ldr	r3, [r0, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001072:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001074:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001076:	680d      	ldr	r5, [r1, #0]
 8001078:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800107a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00a      	beq.n	8001098 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d007      	beq.n	8001098 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001088:	233d      	movs	r3, #61	; 0x3d
 800108a:	2201      	movs	r2, #1
 800108c:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800108e:	2200      	movs	r2, #0
 8001090:	3b01      	subs	r3, #1
 8001092:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8001094:	2000      	movs	r0, #0
}
 8001096:	bd30      	pop	{r4, r5, pc}
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	4394      	bics	r4, r2
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800109c:	684a      	ldr	r2, [r1, #4]
 800109e:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 80010a0:	609c      	str	r4, [r3, #8]
 80010a2:	e7f1      	b.n	8001088 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 80010a4:	2002      	movs	r0, #2
 80010a6:	e7f6      	b.n	8001096 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80010a8:	40012c00 	.word	0x40012c00
 80010ac:	40000400 	.word	0x40000400

080010b0 <memset>:
 80010b0:	0003      	movs	r3, r0
 80010b2:	1882      	adds	r2, r0, r2
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d100      	bne.n	80010ba <memset+0xa>
 80010b8:	4770      	bx	lr
 80010ba:	7019      	strb	r1, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	e7f9      	b.n	80010b4 <memset+0x4>

080010c0 <__libc_init_array>:
 80010c0:	b570      	push	{r4, r5, r6, lr}
 80010c2:	2600      	movs	r6, #0
 80010c4:	4c0c      	ldr	r4, [pc, #48]	; (80010f8 <__libc_init_array+0x38>)
 80010c6:	4d0d      	ldr	r5, [pc, #52]	; (80010fc <__libc_init_array+0x3c>)
 80010c8:	1b64      	subs	r4, r4, r5
 80010ca:	10a4      	asrs	r4, r4, #2
 80010cc:	42a6      	cmp	r6, r4
 80010ce:	d109      	bne.n	80010e4 <__libc_init_array+0x24>
 80010d0:	2600      	movs	r6, #0
 80010d2:	f000 f819 	bl	8001108 <_init>
 80010d6:	4c0a      	ldr	r4, [pc, #40]	; (8001100 <__libc_init_array+0x40>)
 80010d8:	4d0a      	ldr	r5, [pc, #40]	; (8001104 <__libc_init_array+0x44>)
 80010da:	1b64      	subs	r4, r4, r5
 80010dc:	10a4      	asrs	r4, r4, #2
 80010de:	42a6      	cmp	r6, r4
 80010e0:	d105      	bne.n	80010ee <__libc_init_array+0x2e>
 80010e2:	bd70      	pop	{r4, r5, r6, pc}
 80010e4:	00b3      	lsls	r3, r6, #2
 80010e6:	58eb      	ldr	r3, [r5, r3]
 80010e8:	4798      	blx	r3
 80010ea:	3601      	adds	r6, #1
 80010ec:	e7ee      	b.n	80010cc <__libc_init_array+0xc>
 80010ee:	00b3      	lsls	r3, r6, #2
 80010f0:	58eb      	ldr	r3, [r5, r3]
 80010f2:	4798      	blx	r3
 80010f4:	3601      	adds	r6, #1
 80010f6:	e7f2      	b.n	80010de <__libc_init_array+0x1e>
 80010f8:	08001150 	.word	0x08001150
 80010fc:	08001150 	.word	0x08001150
 8001100:	08001154 	.word	0x08001154
 8001104:	08001150 	.word	0x08001150

08001108 <_init>:
 8001108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110e:	bc08      	pop	{r3}
 8001110:	469e      	mov	lr, r3
 8001112:	4770      	bx	lr

08001114 <_fini>:
 8001114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800111a:	bc08      	pop	{r3}
 800111c:	469e      	mov	lr, r3
 800111e:	4770      	bx	lr
