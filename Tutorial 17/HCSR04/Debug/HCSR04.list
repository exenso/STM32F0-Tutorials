
HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002d74  08002d74  00012d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db0  08002db0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002db0  08002db0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002db0  08002db0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db0  08002db0  00012db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002db4  08002db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002dc4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002dc4  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c8e2  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e87  00000000  00000000  0002c959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00007659  00000000  00000000  0002e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000738  00000000  00000000  00035e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c6c  00000000  00000000  00036578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000f8fc  00000000  00000000  000371e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000eef6  00000000  00000000  00046ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0005f6c3  00000000  00000000  000559d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001840  00000000  00000000  000b509c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000b68dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d5c 	.word	0x08002d5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d5c 	.word	0x08002d5c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_d2uiz>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	2200      	movs	r2, #0
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <__aeabi_d2uiz+0x38>)
 80003fa:	0004      	movs	r4, r0
 80003fc:	000d      	movs	r5, r1
 80003fe:	f000 feeb 	bl	80011d8 <__aeabi_dcmpge>
 8000402:	2800      	cmp	r0, #0
 8000404:	d104      	bne.n	8000410 <__aeabi_d2uiz+0x1c>
 8000406:	0020      	movs	r0, r4
 8000408:	0029      	movs	r1, r5
 800040a:	f000 fe55 	bl	80010b8 <__aeabi_d2iz>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <__aeabi_d2uiz+0x38>)
 8000412:	2200      	movs	r2, #0
 8000414:	0020      	movs	r0, r4
 8000416:	0029      	movs	r1, r5
 8000418:	f000 facc 	bl	80009b4 <__aeabi_dsub>
 800041c:	f000 fe4c 	bl	80010b8 <__aeabi_d2iz>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	061b      	lsls	r3, r3, #24
 8000424:	469c      	mov	ip, r3
 8000426:	4460      	add	r0, ip
 8000428:	e7f1      	b.n	800040e <__aeabi_d2uiz+0x1a>
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	41e00000 	.word	0x41e00000

08000430 <__aeabi_dmul>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4645      	mov	r5, r8
 8000434:	46de      	mov	lr, fp
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	001f      	movs	r7, r3
 800043e:	030b      	lsls	r3, r1, #12
 8000440:	0b1b      	lsrs	r3, r3, #12
 8000442:	469b      	mov	fp, r3
 8000444:	004d      	lsls	r5, r1, #1
 8000446:	0fcb      	lsrs	r3, r1, #31
 8000448:	0004      	movs	r4, r0
 800044a:	4691      	mov	r9, r2
 800044c:	4698      	mov	r8, r3
 800044e:	b087      	sub	sp, #28
 8000450:	0d6d      	lsrs	r5, r5, #21
 8000452:	d100      	bne.n	8000456 <__aeabi_dmul+0x26>
 8000454:	e1cd      	b.n	80007f2 <__aeabi_dmul+0x3c2>
 8000456:	4bce      	ldr	r3, [pc, #824]	; (8000790 <__aeabi_dmul+0x360>)
 8000458:	429d      	cmp	r5, r3
 800045a:	d100      	bne.n	800045e <__aeabi_dmul+0x2e>
 800045c:	e1e9      	b.n	8000832 <__aeabi_dmul+0x402>
 800045e:	465a      	mov	r2, fp
 8000460:	0f43      	lsrs	r3, r0, #29
 8000462:	00d2      	lsls	r2, r2, #3
 8000464:	4313      	orrs	r3, r2
 8000466:	2280      	movs	r2, #128	; 0x80
 8000468:	0412      	lsls	r2, r2, #16
 800046a:	431a      	orrs	r2, r3
 800046c:	00c3      	lsls	r3, r0, #3
 800046e:	469a      	mov	sl, r3
 8000470:	4bc8      	ldr	r3, [pc, #800]	; (8000794 <__aeabi_dmul+0x364>)
 8000472:	4693      	mov	fp, r2
 8000474:	469c      	mov	ip, r3
 8000476:	2300      	movs	r3, #0
 8000478:	2600      	movs	r6, #0
 800047a:	4465      	add	r5, ip
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	033c      	lsls	r4, r7, #12
 8000480:	007b      	lsls	r3, r7, #1
 8000482:	4648      	mov	r0, r9
 8000484:	0b24      	lsrs	r4, r4, #12
 8000486:	0d5b      	lsrs	r3, r3, #21
 8000488:	0fff      	lsrs	r7, r7, #31
 800048a:	2b00      	cmp	r3, #0
 800048c:	d100      	bne.n	8000490 <__aeabi_dmul+0x60>
 800048e:	e189      	b.n	80007a4 <__aeabi_dmul+0x374>
 8000490:	4abf      	ldr	r2, [pc, #764]	; (8000790 <__aeabi_dmul+0x360>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x9a>
 8000496:	0f42      	lsrs	r2, r0, #29
 8000498:	00e4      	lsls	r4, r4, #3
 800049a:	4322      	orrs	r2, r4
 800049c:	2480      	movs	r4, #128	; 0x80
 800049e:	0424      	lsls	r4, r4, #16
 80004a0:	4314      	orrs	r4, r2
 80004a2:	4abc      	ldr	r2, [pc, #752]	; (8000794 <__aeabi_dmul+0x364>)
 80004a4:	2100      	movs	r1, #0
 80004a6:	4694      	mov	ip, r2
 80004a8:	4642      	mov	r2, r8
 80004aa:	4463      	add	r3, ip
 80004ac:	195b      	adds	r3, r3, r5
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	407a      	eors	r2, r7
 80004b4:	3301      	adds	r3, #1
 80004b6:	00c0      	lsls	r0, r0, #3
 80004b8:	b2d2      	uxtb	r2, r2
 80004ba:	9302      	str	r3, [sp, #8]
 80004bc:	2e0a      	cmp	r6, #10
 80004be:	dd1c      	ble.n	80004fa <__aeabi_dmul+0xca>
 80004c0:	003a      	movs	r2, r7
 80004c2:	2e0b      	cmp	r6, #11
 80004c4:	d05e      	beq.n	8000584 <__aeabi_dmul+0x154>
 80004c6:	4647      	mov	r7, r8
 80004c8:	e056      	b.n	8000578 <__aeabi_dmul+0x148>
 80004ca:	4649      	mov	r1, r9
 80004cc:	4bb0      	ldr	r3, [pc, #704]	; (8000790 <__aeabi_dmul+0x360>)
 80004ce:	4321      	orrs	r1, r4
 80004d0:	18eb      	adds	r3, r5, r3
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	2900      	cmp	r1, #0
 80004d6:	d12a      	bne.n	800052e <__aeabi_dmul+0xfe>
 80004d8:	2080      	movs	r0, #128	; 0x80
 80004da:	2202      	movs	r2, #2
 80004dc:	0100      	lsls	r0, r0, #4
 80004de:	002b      	movs	r3, r5
 80004e0:	4684      	mov	ip, r0
 80004e2:	4316      	orrs	r6, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	4463      	add	r3, ip
 80004e8:	407a      	eors	r2, r7
 80004ea:	b2d2      	uxtb	r2, r2
 80004ec:	9302      	str	r3, [sp, #8]
 80004ee:	2e0a      	cmp	r6, #10
 80004f0:	dd00      	ble.n	80004f4 <__aeabi_dmul+0xc4>
 80004f2:	e231      	b.n	8000958 <__aeabi_dmul+0x528>
 80004f4:	2000      	movs	r0, #0
 80004f6:	2400      	movs	r4, #0
 80004f8:	2102      	movs	r1, #2
 80004fa:	2e02      	cmp	r6, #2
 80004fc:	dc26      	bgt.n	800054c <__aeabi_dmul+0x11c>
 80004fe:	3e01      	subs	r6, #1
 8000500:	2e01      	cmp	r6, #1
 8000502:	d852      	bhi.n	80005aa <__aeabi_dmul+0x17a>
 8000504:	2902      	cmp	r1, #2
 8000506:	d04c      	beq.n	80005a2 <__aeabi_dmul+0x172>
 8000508:	2901      	cmp	r1, #1
 800050a:	d000      	beq.n	800050e <__aeabi_dmul+0xde>
 800050c:	e118      	b.n	8000740 <__aeabi_dmul+0x310>
 800050e:	2300      	movs	r3, #0
 8000510:	2400      	movs	r4, #0
 8000512:	2500      	movs	r5, #0
 8000514:	051b      	lsls	r3, r3, #20
 8000516:	4323      	orrs	r3, r4
 8000518:	07d2      	lsls	r2, r2, #31
 800051a:	4313      	orrs	r3, r2
 800051c:	0028      	movs	r0, r5
 800051e:	0019      	movs	r1, r3
 8000520:	b007      	add	sp, #28
 8000522:	bcf0      	pop	{r4, r5, r6, r7}
 8000524:	46bb      	mov	fp, r7
 8000526:	46b2      	mov	sl, r6
 8000528:	46a9      	mov	r9, r5
 800052a:	46a0      	mov	r8, r4
 800052c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	2203      	movs	r2, #3
 8000532:	0109      	lsls	r1, r1, #4
 8000534:	002b      	movs	r3, r5
 8000536:	468c      	mov	ip, r1
 8000538:	4316      	orrs	r6, r2
 800053a:	4642      	mov	r2, r8
 800053c:	4463      	add	r3, ip
 800053e:	407a      	eors	r2, r7
 8000540:	b2d2      	uxtb	r2, r2
 8000542:	9302      	str	r3, [sp, #8]
 8000544:	2e0a      	cmp	r6, #10
 8000546:	dd00      	ble.n	800054a <__aeabi_dmul+0x11a>
 8000548:	e228      	b.n	800099c <__aeabi_dmul+0x56c>
 800054a:	2103      	movs	r1, #3
 800054c:	2501      	movs	r5, #1
 800054e:	40b5      	lsls	r5, r6
 8000550:	46ac      	mov	ip, r5
 8000552:	26a6      	movs	r6, #166	; 0xa6
 8000554:	4663      	mov	r3, ip
 8000556:	00f6      	lsls	r6, r6, #3
 8000558:	4035      	ands	r5, r6
 800055a:	4233      	tst	r3, r6
 800055c:	d10b      	bne.n	8000576 <__aeabi_dmul+0x146>
 800055e:	2690      	movs	r6, #144	; 0x90
 8000560:	00b6      	lsls	r6, r6, #2
 8000562:	4233      	tst	r3, r6
 8000564:	d118      	bne.n	8000598 <__aeabi_dmul+0x168>
 8000566:	3eb9      	subs	r6, #185	; 0xb9
 8000568:	3eff      	subs	r6, #255	; 0xff
 800056a:	421e      	tst	r6, r3
 800056c:	d01d      	beq.n	80005aa <__aeabi_dmul+0x17a>
 800056e:	46a3      	mov	fp, r4
 8000570:	4682      	mov	sl, r0
 8000572:	9100      	str	r1, [sp, #0]
 8000574:	e000      	b.n	8000578 <__aeabi_dmul+0x148>
 8000576:	0017      	movs	r7, r2
 8000578:	9900      	ldr	r1, [sp, #0]
 800057a:	003a      	movs	r2, r7
 800057c:	2902      	cmp	r1, #2
 800057e:	d010      	beq.n	80005a2 <__aeabi_dmul+0x172>
 8000580:	465c      	mov	r4, fp
 8000582:	4650      	mov	r0, sl
 8000584:	2903      	cmp	r1, #3
 8000586:	d1bf      	bne.n	8000508 <__aeabi_dmul+0xd8>
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	031b      	lsls	r3, r3, #12
 800058c:	431c      	orrs	r4, r3
 800058e:	0324      	lsls	r4, r4, #12
 8000590:	0005      	movs	r5, r0
 8000592:	4b7f      	ldr	r3, [pc, #508]	; (8000790 <__aeabi_dmul+0x360>)
 8000594:	0b24      	lsrs	r4, r4, #12
 8000596:	e7bd      	b.n	8000514 <__aeabi_dmul+0xe4>
 8000598:	2480      	movs	r4, #128	; 0x80
 800059a:	2200      	movs	r2, #0
 800059c:	4b7c      	ldr	r3, [pc, #496]	; (8000790 <__aeabi_dmul+0x360>)
 800059e:	0324      	lsls	r4, r4, #12
 80005a0:	e7b8      	b.n	8000514 <__aeabi_dmul+0xe4>
 80005a2:	2400      	movs	r4, #0
 80005a4:	2500      	movs	r5, #0
 80005a6:	4b7a      	ldr	r3, [pc, #488]	; (8000790 <__aeabi_dmul+0x360>)
 80005a8:	e7b4      	b.n	8000514 <__aeabi_dmul+0xe4>
 80005aa:	4653      	mov	r3, sl
 80005ac:	041e      	lsls	r6, r3, #16
 80005ae:	0c36      	lsrs	r6, r6, #16
 80005b0:	0c1f      	lsrs	r7, r3, #16
 80005b2:	0033      	movs	r3, r6
 80005b4:	0c01      	lsrs	r1, r0, #16
 80005b6:	0400      	lsls	r0, r0, #16
 80005b8:	0c00      	lsrs	r0, r0, #16
 80005ba:	4343      	muls	r3, r0
 80005bc:	4698      	mov	r8, r3
 80005be:	0003      	movs	r3, r0
 80005c0:	437b      	muls	r3, r7
 80005c2:	4699      	mov	r9, r3
 80005c4:	0033      	movs	r3, r6
 80005c6:	434b      	muls	r3, r1
 80005c8:	469c      	mov	ip, r3
 80005ca:	4643      	mov	r3, r8
 80005cc:	000d      	movs	r5, r1
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	469a      	mov	sl, r3
 80005d2:	437d      	muls	r5, r7
 80005d4:	44cc      	add	ip, r9
 80005d6:	44d4      	add	ip, sl
 80005d8:	9500      	str	r5, [sp, #0]
 80005da:	45e1      	cmp	r9, ip
 80005dc:	d904      	bls.n	80005e8 <__aeabi_dmul+0x1b8>
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	025b      	lsls	r3, r3, #9
 80005e2:	4699      	mov	r9, r3
 80005e4:	444d      	add	r5, r9
 80005e6:	9500      	str	r5, [sp, #0]
 80005e8:	4663      	mov	r3, ip
 80005ea:	0c1b      	lsrs	r3, r3, #16
 80005ec:	001d      	movs	r5, r3
 80005ee:	4663      	mov	r3, ip
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	469c      	mov	ip, r3
 80005f4:	4643      	mov	r3, r8
 80005f6:	041b      	lsls	r3, r3, #16
 80005f8:	0c1b      	lsrs	r3, r3, #16
 80005fa:	4698      	mov	r8, r3
 80005fc:	4663      	mov	r3, ip
 80005fe:	4443      	add	r3, r8
 8000600:	9303      	str	r3, [sp, #12]
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	4698      	mov	r8, r3
 8000606:	0033      	movs	r3, r6
 8000608:	0424      	lsls	r4, r4, #16
 800060a:	0c24      	lsrs	r4, r4, #16
 800060c:	4363      	muls	r3, r4
 800060e:	469c      	mov	ip, r3
 8000610:	0023      	movs	r3, r4
 8000612:	437b      	muls	r3, r7
 8000614:	4699      	mov	r9, r3
 8000616:	4643      	mov	r3, r8
 8000618:	435e      	muls	r6, r3
 800061a:	435f      	muls	r7, r3
 800061c:	444e      	add	r6, r9
 800061e:	4663      	mov	r3, ip
 8000620:	46b2      	mov	sl, r6
 8000622:	0c1e      	lsrs	r6, r3, #16
 8000624:	4456      	add	r6, sl
 8000626:	45b1      	cmp	r9, r6
 8000628:	d903      	bls.n	8000632 <__aeabi_dmul+0x202>
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	025b      	lsls	r3, r3, #9
 800062e:	4699      	mov	r9, r3
 8000630:	444f      	add	r7, r9
 8000632:	0c33      	lsrs	r3, r6, #16
 8000634:	4699      	mov	r9, r3
 8000636:	003b      	movs	r3, r7
 8000638:	444b      	add	r3, r9
 800063a:	9305      	str	r3, [sp, #20]
 800063c:	4663      	mov	r3, ip
 800063e:	46ac      	mov	ip, r5
 8000640:	041f      	lsls	r7, r3, #16
 8000642:	0c3f      	lsrs	r7, r7, #16
 8000644:	0436      	lsls	r6, r6, #16
 8000646:	19f6      	adds	r6, r6, r7
 8000648:	44b4      	add	ip, r6
 800064a:	4663      	mov	r3, ip
 800064c:	9304      	str	r3, [sp, #16]
 800064e:	465b      	mov	r3, fp
 8000650:	0c1b      	lsrs	r3, r3, #16
 8000652:	469c      	mov	ip, r3
 8000654:	465b      	mov	r3, fp
 8000656:	041f      	lsls	r7, r3, #16
 8000658:	0c3f      	lsrs	r7, r7, #16
 800065a:	003b      	movs	r3, r7
 800065c:	4343      	muls	r3, r0
 800065e:	4699      	mov	r9, r3
 8000660:	4663      	mov	r3, ip
 8000662:	4343      	muls	r3, r0
 8000664:	469a      	mov	sl, r3
 8000666:	464b      	mov	r3, r9
 8000668:	4660      	mov	r0, ip
 800066a:	0c1b      	lsrs	r3, r3, #16
 800066c:	469b      	mov	fp, r3
 800066e:	4348      	muls	r0, r1
 8000670:	4379      	muls	r1, r7
 8000672:	4451      	add	r1, sl
 8000674:	4459      	add	r1, fp
 8000676:	458a      	cmp	sl, r1
 8000678:	d903      	bls.n	8000682 <__aeabi_dmul+0x252>
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	025b      	lsls	r3, r3, #9
 800067e:	469a      	mov	sl, r3
 8000680:	4450      	add	r0, sl
 8000682:	0c0b      	lsrs	r3, r1, #16
 8000684:	469a      	mov	sl, r3
 8000686:	464b      	mov	r3, r9
 8000688:	041b      	lsls	r3, r3, #16
 800068a:	0c1b      	lsrs	r3, r3, #16
 800068c:	4699      	mov	r9, r3
 800068e:	003b      	movs	r3, r7
 8000690:	4363      	muls	r3, r4
 8000692:	0409      	lsls	r1, r1, #16
 8000694:	4645      	mov	r5, r8
 8000696:	4449      	add	r1, r9
 8000698:	4699      	mov	r9, r3
 800069a:	4663      	mov	r3, ip
 800069c:	435c      	muls	r4, r3
 800069e:	436b      	muls	r3, r5
 80006a0:	469c      	mov	ip, r3
 80006a2:	464b      	mov	r3, r9
 80006a4:	0c1b      	lsrs	r3, r3, #16
 80006a6:	4698      	mov	r8, r3
 80006a8:	436f      	muls	r7, r5
 80006aa:	193f      	adds	r7, r7, r4
 80006ac:	4447      	add	r7, r8
 80006ae:	4450      	add	r0, sl
 80006b0:	42bc      	cmp	r4, r7
 80006b2:	d903      	bls.n	80006bc <__aeabi_dmul+0x28c>
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	025b      	lsls	r3, r3, #9
 80006b8:	4698      	mov	r8, r3
 80006ba:	44c4      	add	ip, r8
 80006bc:	9b04      	ldr	r3, [sp, #16]
 80006be:	9d00      	ldr	r5, [sp, #0]
 80006c0:	4698      	mov	r8, r3
 80006c2:	4445      	add	r5, r8
 80006c4:	42b5      	cmp	r5, r6
 80006c6:	41b6      	sbcs	r6, r6
 80006c8:	4273      	negs	r3, r6
 80006ca:	4698      	mov	r8, r3
 80006cc:	464b      	mov	r3, r9
 80006ce:	041e      	lsls	r6, r3, #16
 80006d0:	9b05      	ldr	r3, [sp, #20]
 80006d2:	043c      	lsls	r4, r7, #16
 80006d4:	4699      	mov	r9, r3
 80006d6:	0c36      	lsrs	r6, r6, #16
 80006d8:	19a4      	adds	r4, r4, r6
 80006da:	444c      	add	r4, r9
 80006dc:	46a1      	mov	r9, r4
 80006de:	4683      	mov	fp, r0
 80006e0:	186e      	adds	r6, r5, r1
 80006e2:	44c1      	add	r9, r8
 80006e4:	428e      	cmp	r6, r1
 80006e6:	4189      	sbcs	r1, r1
 80006e8:	44cb      	add	fp, r9
 80006ea:	465d      	mov	r5, fp
 80006ec:	4249      	negs	r1, r1
 80006ee:	186d      	adds	r5, r5, r1
 80006f0:	429c      	cmp	r4, r3
 80006f2:	41a4      	sbcs	r4, r4
 80006f4:	45c1      	cmp	r9, r8
 80006f6:	419b      	sbcs	r3, r3
 80006f8:	4583      	cmp	fp, r0
 80006fa:	4180      	sbcs	r0, r0
 80006fc:	428d      	cmp	r5, r1
 80006fe:	4189      	sbcs	r1, r1
 8000700:	425b      	negs	r3, r3
 8000702:	4264      	negs	r4, r4
 8000704:	431c      	orrs	r4, r3
 8000706:	4240      	negs	r0, r0
 8000708:	9b03      	ldr	r3, [sp, #12]
 800070a:	4249      	negs	r1, r1
 800070c:	4301      	orrs	r1, r0
 800070e:	0270      	lsls	r0, r6, #9
 8000710:	0c3f      	lsrs	r7, r7, #16
 8000712:	4318      	orrs	r0, r3
 8000714:	19e4      	adds	r4, r4, r7
 8000716:	1e47      	subs	r7, r0, #1
 8000718:	41b8      	sbcs	r0, r7
 800071a:	1864      	adds	r4, r4, r1
 800071c:	4464      	add	r4, ip
 800071e:	0df6      	lsrs	r6, r6, #23
 8000720:	0261      	lsls	r1, r4, #9
 8000722:	4330      	orrs	r0, r6
 8000724:	0dec      	lsrs	r4, r5, #23
 8000726:	026e      	lsls	r6, r5, #9
 8000728:	430c      	orrs	r4, r1
 800072a:	4330      	orrs	r0, r6
 800072c:	01c9      	lsls	r1, r1, #7
 800072e:	d400      	bmi.n	8000732 <__aeabi_dmul+0x302>
 8000730:	e0f1      	b.n	8000916 <__aeabi_dmul+0x4e6>
 8000732:	2101      	movs	r1, #1
 8000734:	0843      	lsrs	r3, r0, #1
 8000736:	4001      	ands	r1, r0
 8000738:	430b      	orrs	r3, r1
 800073a:	07e0      	lsls	r0, r4, #31
 800073c:	4318      	orrs	r0, r3
 800073e:	0864      	lsrs	r4, r4, #1
 8000740:	4915      	ldr	r1, [pc, #84]	; (8000798 <__aeabi_dmul+0x368>)
 8000742:	9b02      	ldr	r3, [sp, #8]
 8000744:	468c      	mov	ip, r1
 8000746:	4463      	add	r3, ip
 8000748:	2b00      	cmp	r3, #0
 800074a:	dc00      	bgt.n	800074e <__aeabi_dmul+0x31e>
 800074c:	e097      	b.n	800087e <__aeabi_dmul+0x44e>
 800074e:	0741      	lsls	r1, r0, #29
 8000750:	d009      	beq.n	8000766 <__aeabi_dmul+0x336>
 8000752:	210f      	movs	r1, #15
 8000754:	4001      	ands	r1, r0
 8000756:	2904      	cmp	r1, #4
 8000758:	d005      	beq.n	8000766 <__aeabi_dmul+0x336>
 800075a:	1d01      	adds	r1, r0, #4
 800075c:	4281      	cmp	r1, r0
 800075e:	4180      	sbcs	r0, r0
 8000760:	4240      	negs	r0, r0
 8000762:	1824      	adds	r4, r4, r0
 8000764:	0008      	movs	r0, r1
 8000766:	01e1      	lsls	r1, r4, #7
 8000768:	d506      	bpl.n	8000778 <__aeabi_dmul+0x348>
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	00c9      	lsls	r1, r1, #3
 800076e:	468c      	mov	ip, r1
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <__aeabi_dmul+0x36c>)
 8000772:	401c      	ands	r4, r3
 8000774:	9b02      	ldr	r3, [sp, #8]
 8000776:	4463      	add	r3, ip
 8000778:	4909      	ldr	r1, [pc, #36]	; (80007a0 <__aeabi_dmul+0x370>)
 800077a:	428b      	cmp	r3, r1
 800077c:	dd00      	ble.n	8000780 <__aeabi_dmul+0x350>
 800077e:	e710      	b.n	80005a2 <__aeabi_dmul+0x172>
 8000780:	0761      	lsls	r1, r4, #29
 8000782:	08c5      	lsrs	r5, r0, #3
 8000784:	0264      	lsls	r4, r4, #9
 8000786:	055b      	lsls	r3, r3, #21
 8000788:	430d      	orrs	r5, r1
 800078a:	0b24      	lsrs	r4, r4, #12
 800078c:	0d5b      	lsrs	r3, r3, #21
 800078e:	e6c1      	b.n	8000514 <__aeabi_dmul+0xe4>
 8000790:	000007ff 	.word	0x000007ff
 8000794:	fffffc01 	.word	0xfffffc01
 8000798:	000003ff 	.word	0x000003ff
 800079c:	feffffff 	.word	0xfeffffff
 80007a0:	000007fe 	.word	0x000007fe
 80007a4:	464b      	mov	r3, r9
 80007a6:	4323      	orrs	r3, r4
 80007a8:	d059      	beq.n	800085e <__aeabi_dmul+0x42e>
 80007aa:	2c00      	cmp	r4, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dmul+0x380>
 80007ae:	e0a3      	b.n	80008f8 <__aeabi_dmul+0x4c8>
 80007b0:	0020      	movs	r0, r4
 80007b2:	f000 fd1b 	bl	80011ec <__clzsi2>
 80007b6:	0001      	movs	r1, r0
 80007b8:	0003      	movs	r3, r0
 80007ba:	390b      	subs	r1, #11
 80007bc:	221d      	movs	r2, #29
 80007be:	1a52      	subs	r2, r2, r1
 80007c0:	4649      	mov	r1, r9
 80007c2:	0018      	movs	r0, r3
 80007c4:	40d1      	lsrs	r1, r2
 80007c6:	464a      	mov	r2, r9
 80007c8:	3808      	subs	r0, #8
 80007ca:	4082      	lsls	r2, r0
 80007cc:	4084      	lsls	r4, r0
 80007ce:	0010      	movs	r0, r2
 80007d0:	430c      	orrs	r4, r1
 80007d2:	4a74      	ldr	r2, [pc, #464]	; (80009a4 <__aeabi_dmul+0x574>)
 80007d4:	1aeb      	subs	r3, r5, r3
 80007d6:	4694      	mov	ip, r2
 80007d8:	4642      	mov	r2, r8
 80007da:	4463      	add	r3, ip
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	9b01      	ldr	r3, [sp, #4]
 80007e0:	407a      	eors	r2, r7
 80007e2:	3301      	adds	r3, #1
 80007e4:	2100      	movs	r1, #0
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	9302      	str	r3, [sp, #8]
 80007ea:	2e0a      	cmp	r6, #10
 80007ec:	dd00      	ble.n	80007f0 <__aeabi_dmul+0x3c0>
 80007ee:	e667      	b.n	80004c0 <__aeabi_dmul+0x90>
 80007f0:	e683      	b.n	80004fa <__aeabi_dmul+0xca>
 80007f2:	465b      	mov	r3, fp
 80007f4:	4303      	orrs	r3, r0
 80007f6:	469a      	mov	sl, r3
 80007f8:	d02a      	beq.n	8000850 <__aeabi_dmul+0x420>
 80007fa:	465b      	mov	r3, fp
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d06d      	beq.n	80008dc <__aeabi_dmul+0x4ac>
 8000800:	4658      	mov	r0, fp
 8000802:	f000 fcf3 	bl	80011ec <__clzsi2>
 8000806:	0001      	movs	r1, r0
 8000808:	0003      	movs	r3, r0
 800080a:	390b      	subs	r1, #11
 800080c:	221d      	movs	r2, #29
 800080e:	1a52      	subs	r2, r2, r1
 8000810:	0021      	movs	r1, r4
 8000812:	0018      	movs	r0, r3
 8000814:	465d      	mov	r5, fp
 8000816:	40d1      	lsrs	r1, r2
 8000818:	3808      	subs	r0, #8
 800081a:	4085      	lsls	r5, r0
 800081c:	000a      	movs	r2, r1
 800081e:	4084      	lsls	r4, r0
 8000820:	432a      	orrs	r2, r5
 8000822:	4693      	mov	fp, r2
 8000824:	46a2      	mov	sl, r4
 8000826:	4d5f      	ldr	r5, [pc, #380]	; (80009a4 <__aeabi_dmul+0x574>)
 8000828:	2600      	movs	r6, #0
 800082a:	1aed      	subs	r5, r5, r3
 800082c:	2300      	movs	r3, #0
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	e625      	b.n	800047e <__aeabi_dmul+0x4e>
 8000832:	465b      	mov	r3, fp
 8000834:	4303      	orrs	r3, r0
 8000836:	469a      	mov	sl, r3
 8000838:	d105      	bne.n	8000846 <__aeabi_dmul+0x416>
 800083a:	2300      	movs	r3, #0
 800083c:	469b      	mov	fp, r3
 800083e:	3302      	adds	r3, #2
 8000840:	2608      	movs	r6, #8
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	e61b      	b.n	800047e <__aeabi_dmul+0x4e>
 8000846:	2303      	movs	r3, #3
 8000848:	4682      	mov	sl, r0
 800084a:	260c      	movs	r6, #12
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	e616      	b.n	800047e <__aeabi_dmul+0x4e>
 8000850:	2300      	movs	r3, #0
 8000852:	469b      	mov	fp, r3
 8000854:	3301      	adds	r3, #1
 8000856:	2604      	movs	r6, #4
 8000858:	2500      	movs	r5, #0
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	e60f      	b.n	800047e <__aeabi_dmul+0x4e>
 800085e:	4642      	mov	r2, r8
 8000860:	3301      	adds	r3, #1
 8000862:	9501      	str	r5, [sp, #4]
 8000864:	431e      	orrs	r6, r3
 8000866:	9b01      	ldr	r3, [sp, #4]
 8000868:	407a      	eors	r2, r7
 800086a:	3301      	adds	r3, #1
 800086c:	2400      	movs	r4, #0
 800086e:	2000      	movs	r0, #0
 8000870:	2101      	movs	r1, #1
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	9302      	str	r3, [sp, #8]
 8000876:	2e0a      	cmp	r6, #10
 8000878:	dd00      	ble.n	800087c <__aeabi_dmul+0x44c>
 800087a:	e621      	b.n	80004c0 <__aeabi_dmul+0x90>
 800087c:	e63d      	b.n	80004fa <__aeabi_dmul+0xca>
 800087e:	2101      	movs	r1, #1
 8000880:	1ac9      	subs	r1, r1, r3
 8000882:	2938      	cmp	r1, #56	; 0x38
 8000884:	dd00      	ble.n	8000888 <__aeabi_dmul+0x458>
 8000886:	e642      	b.n	800050e <__aeabi_dmul+0xde>
 8000888:	291f      	cmp	r1, #31
 800088a:	dd47      	ble.n	800091c <__aeabi_dmul+0x4ec>
 800088c:	261f      	movs	r6, #31
 800088e:	0025      	movs	r5, r4
 8000890:	4276      	negs	r6, r6
 8000892:	1af3      	subs	r3, r6, r3
 8000894:	40dd      	lsrs	r5, r3
 8000896:	002b      	movs	r3, r5
 8000898:	2920      	cmp	r1, #32
 800089a:	d005      	beq.n	80008a8 <__aeabi_dmul+0x478>
 800089c:	4942      	ldr	r1, [pc, #264]	; (80009a8 <__aeabi_dmul+0x578>)
 800089e:	9d02      	ldr	r5, [sp, #8]
 80008a0:	468c      	mov	ip, r1
 80008a2:	4465      	add	r5, ip
 80008a4:	40ac      	lsls	r4, r5
 80008a6:	4320      	orrs	r0, r4
 80008a8:	1e41      	subs	r1, r0, #1
 80008aa:	4188      	sbcs	r0, r1
 80008ac:	4318      	orrs	r0, r3
 80008ae:	2307      	movs	r3, #7
 80008b0:	001d      	movs	r5, r3
 80008b2:	2400      	movs	r4, #0
 80008b4:	4005      	ands	r5, r0
 80008b6:	4203      	tst	r3, r0
 80008b8:	d04a      	beq.n	8000950 <__aeabi_dmul+0x520>
 80008ba:	230f      	movs	r3, #15
 80008bc:	2400      	movs	r4, #0
 80008be:	4003      	ands	r3, r0
 80008c0:	2b04      	cmp	r3, #4
 80008c2:	d042      	beq.n	800094a <__aeabi_dmul+0x51a>
 80008c4:	1d03      	adds	r3, r0, #4
 80008c6:	4283      	cmp	r3, r0
 80008c8:	4180      	sbcs	r0, r0
 80008ca:	4240      	negs	r0, r0
 80008cc:	1824      	adds	r4, r4, r0
 80008ce:	0018      	movs	r0, r3
 80008d0:	0223      	lsls	r3, r4, #8
 80008d2:	d53a      	bpl.n	800094a <__aeabi_dmul+0x51a>
 80008d4:	2301      	movs	r3, #1
 80008d6:	2400      	movs	r4, #0
 80008d8:	2500      	movs	r5, #0
 80008da:	e61b      	b.n	8000514 <__aeabi_dmul+0xe4>
 80008dc:	f000 fc86 	bl	80011ec <__clzsi2>
 80008e0:	0001      	movs	r1, r0
 80008e2:	0003      	movs	r3, r0
 80008e4:	3115      	adds	r1, #21
 80008e6:	3320      	adds	r3, #32
 80008e8:	291c      	cmp	r1, #28
 80008ea:	dd8f      	ble.n	800080c <__aeabi_dmul+0x3dc>
 80008ec:	3808      	subs	r0, #8
 80008ee:	2200      	movs	r2, #0
 80008f0:	4084      	lsls	r4, r0
 80008f2:	4692      	mov	sl, r2
 80008f4:	46a3      	mov	fp, r4
 80008f6:	e796      	b.n	8000826 <__aeabi_dmul+0x3f6>
 80008f8:	f000 fc78 	bl	80011ec <__clzsi2>
 80008fc:	0001      	movs	r1, r0
 80008fe:	0003      	movs	r3, r0
 8000900:	3115      	adds	r1, #21
 8000902:	3320      	adds	r3, #32
 8000904:	291c      	cmp	r1, #28
 8000906:	dc00      	bgt.n	800090a <__aeabi_dmul+0x4da>
 8000908:	e758      	b.n	80007bc <__aeabi_dmul+0x38c>
 800090a:	0002      	movs	r2, r0
 800090c:	464c      	mov	r4, r9
 800090e:	3a08      	subs	r2, #8
 8000910:	2000      	movs	r0, #0
 8000912:	4094      	lsls	r4, r2
 8000914:	e75d      	b.n	80007d2 <__aeabi_dmul+0x3a2>
 8000916:	9b01      	ldr	r3, [sp, #4]
 8000918:	9302      	str	r3, [sp, #8]
 800091a:	e711      	b.n	8000740 <__aeabi_dmul+0x310>
 800091c:	4b23      	ldr	r3, [pc, #140]	; (80009ac <__aeabi_dmul+0x57c>)
 800091e:	0026      	movs	r6, r4
 8000920:	469c      	mov	ip, r3
 8000922:	0003      	movs	r3, r0
 8000924:	9d02      	ldr	r5, [sp, #8]
 8000926:	40cb      	lsrs	r3, r1
 8000928:	4465      	add	r5, ip
 800092a:	40ae      	lsls	r6, r5
 800092c:	431e      	orrs	r6, r3
 800092e:	0003      	movs	r3, r0
 8000930:	40ab      	lsls	r3, r5
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4183      	sbcs	r3, r0
 8000936:	0030      	movs	r0, r6
 8000938:	4318      	orrs	r0, r3
 800093a:	40cc      	lsrs	r4, r1
 800093c:	0743      	lsls	r3, r0, #29
 800093e:	d0c7      	beq.n	80008d0 <__aeabi_dmul+0x4a0>
 8000940:	230f      	movs	r3, #15
 8000942:	4003      	ands	r3, r0
 8000944:	2b04      	cmp	r3, #4
 8000946:	d1bd      	bne.n	80008c4 <__aeabi_dmul+0x494>
 8000948:	e7c2      	b.n	80008d0 <__aeabi_dmul+0x4a0>
 800094a:	0765      	lsls	r5, r4, #29
 800094c:	0264      	lsls	r4, r4, #9
 800094e:	0b24      	lsrs	r4, r4, #12
 8000950:	08c0      	lsrs	r0, r0, #3
 8000952:	2300      	movs	r3, #0
 8000954:	4305      	orrs	r5, r0
 8000956:	e5dd      	b.n	8000514 <__aeabi_dmul+0xe4>
 8000958:	2500      	movs	r5, #0
 800095a:	2302      	movs	r3, #2
 800095c:	2e0f      	cmp	r6, #15
 800095e:	d10c      	bne.n	800097a <__aeabi_dmul+0x54a>
 8000960:	2480      	movs	r4, #128	; 0x80
 8000962:	465b      	mov	r3, fp
 8000964:	0324      	lsls	r4, r4, #12
 8000966:	4223      	tst	r3, r4
 8000968:	d00e      	beq.n	8000988 <__aeabi_dmul+0x558>
 800096a:	4221      	tst	r1, r4
 800096c:	d10c      	bne.n	8000988 <__aeabi_dmul+0x558>
 800096e:	430c      	orrs	r4, r1
 8000970:	0324      	lsls	r4, r4, #12
 8000972:	003a      	movs	r2, r7
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <__aeabi_dmul+0x580>)
 8000976:	0b24      	lsrs	r4, r4, #12
 8000978:	e5cc      	b.n	8000514 <__aeabi_dmul+0xe4>
 800097a:	2e0b      	cmp	r6, #11
 800097c:	d000      	beq.n	8000980 <__aeabi_dmul+0x550>
 800097e:	e5a2      	b.n	80004c6 <__aeabi_dmul+0x96>
 8000980:	468b      	mov	fp, r1
 8000982:	46aa      	mov	sl, r5
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	e5f7      	b.n	8000578 <__aeabi_dmul+0x148>
 8000988:	2480      	movs	r4, #128	; 0x80
 800098a:	465b      	mov	r3, fp
 800098c:	0324      	lsls	r4, r4, #12
 800098e:	431c      	orrs	r4, r3
 8000990:	0324      	lsls	r4, r4, #12
 8000992:	4642      	mov	r2, r8
 8000994:	4655      	mov	r5, sl
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <__aeabi_dmul+0x580>)
 8000998:	0b24      	lsrs	r4, r4, #12
 800099a:	e5bb      	b.n	8000514 <__aeabi_dmul+0xe4>
 800099c:	464d      	mov	r5, r9
 800099e:	0021      	movs	r1, r4
 80009a0:	2303      	movs	r3, #3
 80009a2:	e7db      	b.n	800095c <__aeabi_dmul+0x52c>
 80009a4:	fffffc0d 	.word	0xfffffc0d
 80009a8:	0000043e 	.word	0x0000043e
 80009ac:	0000041e 	.word	0x0000041e
 80009b0:	000007ff 	.word	0x000007ff

080009b4 <__aeabi_dsub>:
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	4657      	mov	r7, sl
 80009b8:	464e      	mov	r6, r9
 80009ba:	4645      	mov	r5, r8
 80009bc:	46de      	mov	lr, fp
 80009be:	b5e0      	push	{r5, r6, r7, lr}
 80009c0:	000d      	movs	r5, r1
 80009c2:	0004      	movs	r4, r0
 80009c4:	0019      	movs	r1, r3
 80009c6:	0010      	movs	r0, r2
 80009c8:	032b      	lsls	r3, r5, #12
 80009ca:	0a5b      	lsrs	r3, r3, #9
 80009cc:	0f62      	lsrs	r2, r4, #29
 80009ce:	431a      	orrs	r2, r3
 80009d0:	00e3      	lsls	r3, r4, #3
 80009d2:	030c      	lsls	r4, r1, #12
 80009d4:	0a64      	lsrs	r4, r4, #9
 80009d6:	0f47      	lsrs	r7, r0, #29
 80009d8:	4327      	orrs	r7, r4
 80009da:	4cd0      	ldr	r4, [pc, #832]	; (8000d1c <__aeabi_dsub+0x368>)
 80009dc:	006e      	lsls	r6, r5, #1
 80009de:	4691      	mov	r9, r2
 80009e0:	b083      	sub	sp, #12
 80009e2:	004a      	lsls	r2, r1, #1
 80009e4:	00c0      	lsls	r0, r0, #3
 80009e6:	4698      	mov	r8, r3
 80009e8:	46a2      	mov	sl, r4
 80009ea:	0d76      	lsrs	r6, r6, #21
 80009ec:	0fed      	lsrs	r5, r5, #31
 80009ee:	0d52      	lsrs	r2, r2, #21
 80009f0:	0fc9      	lsrs	r1, r1, #31
 80009f2:	9001      	str	r0, [sp, #4]
 80009f4:	42a2      	cmp	r2, r4
 80009f6:	d100      	bne.n	80009fa <__aeabi_dsub+0x46>
 80009f8:	e0b9      	b.n	8000b6e <__aeabi_dsub+0x1ba>
 80009fa:	2401      	movs	r4, #1
 80009fc:	4061      	eors	r1, r4
 80009fe:	468b      	mov	fp, r1
 8000a00:	428d      	cmp	r5, r1
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dsub+0x52>
 8000a04:	e08d      	b.n	8000b22 <__aeabi_dsub+0x16e>
 8000a06:	1ab4      	subs	r4, r6, r2
 8000a08:	46a4      	mov	ip, r4
 8000a0a:	2c00      	cmp	r4, #0
 8000a0c:	dc00      	bgt.n	8000a10 <__aeabi_dsub+0x5c>
 8000a0e:	e0b7      	b.n	8000b80 <__aeabi_dsub+0x1cc>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dsub+0x62>
 8000a14:	e0cb      	b.n	8000bae <__aeabi_dsub+0x1fa>
 8000a16:	4ac1      	ldr	r2, [pc, #772]	; (8000d1c <__aeabi_dsub+0x368>)
 8000a18:	4296      	cmp	r6, r2
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dsub+0x6a>
 8000a1c:	e186      	b.n	8000d2c <__aeabi_dsub+0x378>
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	0412      	lsls	r2, r2, #16
 8000a22:	4317      	orrs	r7, r2
 8000a24:	4662      	mov	r2, ip
 8000a26:	2a38      	cmp	r2, #56	; 0x38
 8000a28:	dd00      	ble.n	8000a2c <__aeabi_dsub+0x78>
 8000a2a:	e1a4      	b.n	8000d76 <__aeabi_dsub+0x3c2>
 8000a2c:	2a1f      	cmp	r2, #31
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_dsub+0x7e>
 8000a30:	e21d      	b.n	8000e6e <__aeabi_dsub+0x4ba>
 8000a32:	4661      	mov	r1, ip
 8000a34:	2220      	movs	r2, #32
 8000a36:	003c      	movs	r4, r7
 8000a38:	1a52      	subs	r2, r2, r1
 8000a3a:	0001      	movs	r1, r0
 8000a3c:	4090      	lsls	r0, r2
 8000a3e:	4094      	lsls	r4, r2
 8000a40:	1e42      	subs	r2, r0, #1
 8000a42:	4190      	sbcs	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	46a0      	mov	r8, r4
 8000a48:	4664      	mov	r4, ip
 8000a4a:	40d7      	lsrs	r7, r2
 8000a4c:	464a      	mov	r2, r9
 8000a4e:	40e1      	lsrs	r1, r4
 8000a50:	4644      	mov	r4, r8
 8000a52:	1bd2      	subs	r2, r2, r7
 8000a54:	4691      	mov	r9, r2
 8000a56:	430c      	orrs	r4, r1
 8000a58:	4304      	orrs	r4, r0
 8000a5a:	1b1c      	subs	r4, r3, r4
 8000a5c:	42a3      	cmp	r3, r4
 8000a5e:	4192      	sbcs	r2, r2
 8000a60:	464b      	mov	r3, r9
 8000a62:	4252      	negs	r2, r2
 8000a64:	1a9b      	subs	r3, r3, r2
 8000a66:	469a      	mov	sl, r3
 8000a68:	4653      	mov	r3, sl
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	d400      	bmi.n	8000a70 <__aeabi_dsub+0xbc>
 8000a6e:	e12b      	b.n	8000cc8 <__aeabi_dsub+0x314>
 8000a70:	4653      	mov	r3, sl
 8000a72:	025a      	lsls	r2, r3, #9
 8000a74:	0a53      	lsrs	r3, r2, #9
 8000a76:	469a      	mov	sl, r3
 8000a78:	4653      	mov	r3, sl
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dsub+0xcc>
 8000a7e:	e166      	b.n	8000d4e <__aeabi_dsub+0x39a>
 8000a80:	4650      	mov	r0, sl
 8000a82:	f000 fbb3 	bl	80011ec <__clzsi2>
 8000a86:	0003      	movs	r3, r0
 8000a88:	3b08      	subs	r3, #8
 8000a8a:	2220      	movs	r2, #32
 8000a8c:	0020      	movs	r0, r4
 8000a8e:	1ad2      	subs	r2, r2, r3
 8000a90:	4651      	mov	r1, sl
 8000a92:	40d0      	lsrs	r0, r2
 8000a94:	4099      	lsls	r1, r3
 8000a96:	0002      	movs	r2, r0
 8000a98:	409c      	lsls	r4, r3
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	429e      	cmp	r6, r3
 8000a9e:	dd00      	ble.n	8000aa2 <__aeabi_dsub+0xee>
 8000aa0:	e164      	b.n	8000d6c <__aeabi_dsub+0x3b8>
 8000aa2:	1b9b      	subs	r3, r3, r6
 8000aa4:	1c59      	adds	r1, r3, #1
 8000aa6:	291f      	cmp	r1, #31
 8000aa8:	dd00      	ble.n	8000aac <__aeabi_dsub+0xf8>
 8000aaa:	e0fe      	b.n	8000caa <__aeabi_dsub+0x2f6>
 8000aac:	2320      	movs	r3, #32
 8000aae:	0010      	movs	r0, r2
 8000ab0:	0026      	movs	r6, r4
 8000ab2:	1a5b      	subs	r3, r3, r1
 8000ab4:	409c      	lsls	r4, r3
 8000ab6:	4098      	lsls	r0, r3
 8000ab8:	40ce      	lsrs	r6, r1
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	1e63      	subs	r3, r4, #1
 8000abe:	419c      	sbcs	r4, r3
 8000ac0:	4330      	orrs	r0, r6
 8000ac2:	4692      	mov	sl, r2
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	4304      	orrs	r4, r0
 8000ac8:	0763      	lsls	r3, r4, #29
 8000aca:	d009      	beq.n	8000ae0 <__aeabi_dsub+0x12c>
 8000acc:	230f      	movs	r3, #15
 8000ace:	4023      	ands	r3, r4
 8000ad0:	2b04      	cmp	r3, #4
 8000ad2:	d005      	beq.n	8000ae0 <__aeabi_dsub+0x12c>
 8000ad4:	1d23      	adds	r3, r4, #4
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	41a4      	sbcs	r4, r4
 8000ada:	4264      	negs	r4, r4
 8000adc:	44a2      	add	sl, r4
 8000ade:	001c      	movs	r4, r3
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	d400      	bmi.n	8000ae8 <__aeabi_dsub+0x134>
 8000ae6:	e0f2      	b.n	8000cce <__aeabi_dsub+0x31a>
 8000ae8:	4b8c      	ldr	r3, [pc, #560]	; (8000d1c <__aeabi_dsub+0x368>)
 8000aea:	3601      	adds	r6, #1
 8000aec:	429e      	cmp	r6, r3
 8000aee:	d100      	bne.n	8000af2 <__aeabi_dsub+0x13e>
 8000af0:	e10f      	b.n	8000d12 <__aeabi_dsub+0x35e>
 8000af2:	4653      	mov	r3, sl
 8000af4:	498a      	ldr	r1, [pc, #552]	; (8000d20 <__aeabi_dsub+0x36c>)
 8000af6:	08e4      	lsrs	r4, r4, #3
 8000af8:	400b      	ands	r3, r1
 8000afa:	0019      	movs	r1, r3
 8000afc:	075b      	lsls	r3, r3, #29
 8000afe:	4323      	orrs	r3, r4
 8000b00:	0572      	lsls	r2, r6, #21
 8000b02:	024c      	lsls	r4, r1, #9
 8000b04:	0b24      	lsrs	r4, r4, #12
 8000b06:	0d52      	lsrs	r2, r2, #21
 8000b08:	0512      	lsls	r2, r2, #20
 8000b0a:	4322      	orrs	r2, r4
 8000b0c:	07ed      	lsls	r5, r5, #31
 8000b0e:	432a      	orrs	r2, r5
 8000b10:	0018      	movs	r0, r3
 8000b12:	0011      	movs	r1, r2
 8000b14:	b003      	add	sp, #12
 8000b16:	bcf0      	pop	{r4, r5, r6, r7}
 8000b18:	46bb      	mov	fp, r7
 8000b1a:	46b2      	mov	sl, r6
 8000b1c:	46a9      	mov	r9, r5
 8000b1e:	46a0      	mov	r8, r4
 8000b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b22:	1ab4      	subs	r4, r6, r2
 8000b24:	46a4      	mov	ip, r4
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	dd59      	ble.n	8000bde <__aeabi_dsub+0x22a>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dsub+0x17c>
 8000b2e:	e0b0      	b.n	8000c92 <__aeabi_dsub+0x2de>
 8000b30:	4556      	cmp	r6, sl
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dsub+0x182>
 8000b34:	e0fa      	b.n	8000d2c <__aeabi_dsub+0x378>
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	0412      	lsls	r2, r2, #16
 8000b3a:	4317      	orrs	r7, r2
 8000b3c:	4662      	mov	r2, ip
 8000b3e:	2a38      	cmp	r2, #56	; 0x38
 8000b40:	dd00      	ble.n	8000b44 <__aeabi_dsub+0x190>
 8000b42:	e0d4      	b.n	8000cee <__aeabi_dsub+0x33a>
 8000b44:	2a1f      	cmp	r2, #31
 8000b46:	dc00      	bgt.n	8000b4a <__aeabi_dsub+0x196>
 8000b48:	e1c0      	b.n	8000ecc <__aeabi_dsub+0x518>
 8000b4a:	0039      	movs	r1, r7
 8000b4c:	3a20      	subs	r2, #32
 8000b4e:	40d1      	lsrs	r1, r2
 8000b50:	4662      	mov	r2, ip
 8000b52:	2a20      	cmp	r2, #32
 8000b54:	d006      	beq.n	8000b64 <__aeabi_dsub+0x1b0>
 8000b56:	4664      	mov	r4, ip
 8000b58:	2240      	movs	r2, #64	; 0x40
 8000b5a:	1b12      	subs	r2, r2, r4
 8000b5c:	003c      	movs	r4, r7
 8000b5e:	4094      	lsls	r4, r2
 8000b60:	4304      	orrs	r4, r0
 8000b62:	9401      	str	r4, [sp, #4]
 8000b64:	9c01      	ldr	r4, [sp, #4]
 8000b66:	1e62      	subs	r2, r4, #1
 8000b68:	4194      	sbcs	r4, r2
 8000b6a:	430c      	orrs	r4, r1
 8000b6c:	e0c3      	b.n	8000cf6 <__aeabi_dsub+0x342>
 8000b6e:	003c      	movs	r4, r7
 8000b70:	4304      	orrs	r4, r0
 8000b72:	d02b      	beq.n	8000bcc <__aeabi_dsub+0x218>
 8000b74:	468b      	mov	fp, r1
 8000b76:	428d      	cmp	r5, r1
 8000b78:	d02e      	beq.n	8000bd8 <__aeabi_dsub+0x224>
 8000b7a:	4c6a      	ldr	r4, [pc, #424]	; (8000d24 <__aeabi_dsub+0x370>)
 8000b7c:	46a4      	mov	ip, r4
 8000b7e:	44b4      	add	ip, r6
 8000b80:	4664      	mov	r4, ip
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d05f      	beq.n	8000c46 <__aeabi_dsub+0x292>
 8000b86:	1b94      	subs	r4, r2, r6
 8000b88:	46a4      	mov	ip, r4
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d000      	beq.n	8000b90 <__aeabi_dsub+0x1dc>
 8000b8e:	e120      	b.n	8000dd2 <__aeabi_dsub+0x41e>
 8000b90:	464c      	mov	r4, r9
 8000b92:	431c      	orrs	r4, r3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_dsub+0x1e4>
 8000b96:	e1c7      	b.n	8000f28 <__aeabi_dsub+0x574>
 8000b98:	4661      	mov	r1, ip
 8000b9a:	1e4c      	subs	r4, r1, #1
 8000b9c:	2901      	cmp	r1, #1
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dsub+0x1ee>
 8000ba0:	e223      	b.n	8000fea <__aeabi_dsub+0x636>
 8000ba2:	4d5e      	ldr	r5, [pc, #376]	; (8000d1c <__aeabi_dsub+0x368>)
 8000ba4:	45ac      	cmp	ip, r5
 8000ba6:	d100      	bne.n	8000baa <__aeabi_dsub+0x1f6>
 8000ba8:	e1d8      	b.n	8000f5c <__aeabi_dsub+0x5a8>
 8000baa:	46a4      	mov	ip, r4
 8000bac:	e11a      	b.n	8000de4 <__aeabi_dsub+0x430>
 8000bae:	003a      	movs	r2, r7
 8000bb0:	4302      	orrs	r2, r0
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_dsub+0x202>
 8000bb4:	e0e4      	b.n	8000d80 <__aeabi_dsub+0x3cc>
 8000bb6:	0022      	movs	r2, r4
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	2c01      	cmp	r4, #1
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dsub+0x20c>
 8000bbe:	e1c3      	b.n	8000f48 <__aeabi_dsub+0x594>
 8000bc0:	4956      	ldr	r1, [pc, #344]	; (8000d1c <__aeabi_dsub+0x368>)
 8000bc2:	428c      	cmp	r4, r1
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_dsub+0x214>
 8000bc6:	e0b1      	b.n	8000d2c <__aeabi_dsub+0x378>
 8000bc8:	4694      	mov	ip, r2
 8000bca:	e72b      	b.n	8000a24 <__aeabi_dsub+0x70>
 8000bcc:	2401      	movs	r4, #1
 8000bce:	4061      	eors	r1, r4
 8000bd0:	468b      	mov	fp, r1
 8000bd2:	428d      	cmp	r5, r1
 8000bd4:	d000      	beq.n	8000bd8 <__aeabi_dsub+0x224>
 8000bd6:	e716      	b.n	8000a06 <__aeabi_dsub+0x52>
 8000bd8:	4952      	ldr	r1, [pc, #328]	; (8000d24 <__aeabi_dsub+0x370>)
 8000bda:	468c      	mov	ip, r1
 8000bdc:	44b4      	add	ip, r6
 8000bde:	4664      	mov	r4, ip
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d100      	bne.n	8000be6 <__aeabi_dsub+0x232>
 8000be4:	e0d3      	b.n	8000d8e <__aeabi_dsub+0x3da>
 8000be6:	1b91      	subs	r1, r2, r6
 8000be8:	468c      	mov	ip, r1
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dsub+0x23c>
 8000bee:	e15e      	b.n	8000eae <__aeabi_dsub+0x4fa>
 8000bf0:	494a      	ldr	r1, [pc, #296]	; (8000d1c <__aeabi_dsub+0x368>)
 8000bf2:	428a      	cmp	r2, r1
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_dsub+0x244>
 8000bf6:	e1be      	b.n	8000f76 <__aeabi_dsub+0x5c2>
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	464c      	mov	r4, r9
 8000bfc:	0409      	lsls	r1, r1, #16
 8000bfe:	430c      	orrs	r4, r1
 8000c00:	46a1      	mov	r9, r4
 8000c02:	4661      	mov	r1, ip
 8000c04:	2938      	cmp	r1, #56	; 0x38
 8000c06:	dd00      	ble.n	8000c0a <__aeabi_dsub+0x256>
 8000c08:	e1ba      	b.n	8000f80 <__aeabi_dsub+0x5cc>
 8000c0a:	291f      	cmp	r1, #31
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_dsub+0x25c>
 8000c0e:	e227      	b.n	8001060 <__aeabi_dsub+0x6ac>
 8000c10:	2420      	movs	r4, #32
 8000c12:	1a64      	subs	r4, r4, r1
 8000c14:	4649      	mov	r1, r9
 8000c16:	40a1      	lsls	r1, r4
 8000c18:	001e      	movs	r6, r3
 8000c1a:	4688      	mov	r8, r1
 8000c1c:	4661      	mov	r1, ip
 8000c1e:	40a3      	lsls	r3, r4
 8000c20:	40ce      	lsrs	r6, r1
 8000c22:	4641      	mov	r1, r8
 8000c24:	1e5c      	subs	r4, r3, #1
 8000c26:	41a3      	sbcs	r3, r4
 8000c28:	4331      	orrs	r1, r6
 8000c2a:	4319      	orrs	r1, r3
 8000c2c:	000c      	movs	r4, r1
 8000c2e:	4663      	mov	r3, ip
 8000c30:	4649      	mov	r1, r9
 8000c32:	40d9      	lsrs	r1, r3
 8000c34:	187f      	adds	r7, r7, r1
 8000c36:	1824      	adds	r4, r4, r0
 8000c38:	4284      	cmp	r4, r0
 8000c3a:	419b      	sbcs	r3, r3
 8000c3c:	425b      	negs	r3, r3
 8000c3e:	469a      	mov	sl, r3
 8000c40:	0016      	movs	r6, r2
 8000c42:	44ba      	add	sl, r7
 8000c44:	e05d      	b.n	8000d02 <__aeabi_dsub+0x34e>
 8000c46:	4c38      	ldr	r4, [pc, #224]	; (8000d28 <__aeabi_dsub+0x374>)
 8000c48:	1c72      	adds	r2, r6, #1
 8000c4a:	4222      	tst	r2, r4
 8000c4c:	d000      	beq.n	8000c50 <__aeabi_dsub+0x29c>
 8000c4e:	e0df      	b.n	8000e10 <__aeabi_dsub+0x45c>
 8000c50:	464a      	mov	r2, r9
 8000c52:	431a      	orrs	r2, r3
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	d000      	beq.n	8000c5a <__aeabi_dsub+0x2a6>
 8000c58:	e15c      	b.n	8000f14 <__aeabi_dsub+0x560>
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_dsub+0x2ac>
 8000c5e:	e1cf      	b.n	8001000 <__aeabi_dsub+0x64c>
 8000c60:	003a      	movs	r2, r7
 8000c62:	4302      	orrs	r2, r0
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dsub+0x2b4>
 8000c66:	e17f      	b.n	8000f68 <__aeabi_dsub+0x5b4>
 8000c68:	1a1c      	subs	r4, r3, r0
 8000c6a:	464a      	mov	r2, r9
 8000c6c:	42a3      	cmp	r3, r4
 8000c6e:	4189      	sbcs	r1, r1
 8000c70:	1bd2      	subs	r2, r2, r7
 8000c72:	4249      	negs	r1, r1
 8000c74:	1a52      	subs	r2, r2, r1
 8000c76:	4692      	mov	sl, r2
 8000c78:	0212      	lsls	r2, r2, #8
 8000c7a:	d400      	bmi.n	8000c7e <__aeabi_dsub+0x2ca>
 8000c7c:	e20a      	b.n	8001094 <__aeabi_dsub+0x6e0>
 8000c7e:	1ac4      	subs	r4, r0, r3
 8000c80:	42a0      	cmp	r0, r4
 8000c82:	4180      	sbcs	r0, r0
 8000c84:	464b      	mov	r3, r9
 8000c86:	4240      	negs	r0, r0
 8000c88:	1aff      	subs	r7, r7, r3
 8000c8a:	1a3b      	subs	r3, r7, r0
 8000c8c:	469a      	mov	sl, r3
 8000c8e:	465d      	mov	r5, fp
 8000c90:	e71a      	b.n	8000ac8 <__aeabi_dsub+0x114>
 8000c92:	003a      	movs	r2, r7
 8000c94:	4302      	orrs	r2, r0
 8000c96:	d073      	beq.n	8000d80 <__aeabi_dsub+0x3cc>
 8000c98:	0022      	movs	r2, r4
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	2c01      	cmp	r4, #1
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dsub+0x2ee>
 8000ca0:	e0cb      	b.n	8000e3a <__aeabi_dsub+0x486>
 8000ca2:	4554      	cmp	r4, sl
 8000ca4:	d042      	beq.n	8000d2c <__aeabi_dsub+0x378>
 8000ca6:	4694      	mov	ip, r2
 8000ca8:	e748      	b.n	8000b3c <__aeabi_dsub+0x188>
 8000caa:	0010      	movs	r0, r2
 8000cac:	3b1f      	subs	r3, #31
 8000cae:	40d8      	lsrs	r0, r3
 8000cb0:	2920      	cmp	r1, #32
 8000cb2:	d003      	beq.n	8000cbc <__aeabi_dsub+0x308>
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	1a5b      	subs	r3, r3, r1
 8000cb8:	409a      	lsls	r2, r3
 8000cba:	4314      	orrs	r4, r2
 8000cbc:	1e63      	subs	r3, r4, #1
 8000cbe:	419c      	sbcs	r4, r3
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	2600      	movs	r6, #0
 8000cc4:	469a      	mov	sl, r3
 8000cc6:	4304      	orrs	r4, r0
 8000cc8:	0763      	lsls	r3, r4, #29
 8000cca:	d000      	beq.n	8000cce <__aeabi_dsub+0x31a>
 8000ccc:	e6fe      	b.n	8000acc <__aeabi_dsub+0x118>
 8000cce:	4652      	mov	r2, sl
 8000cd0:	08e3      	lsrs	r3, r4, #3
 8000cd2:	0752      	lsls	r2, r2, #29
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	4652      	mov	r2, sl
 8000cd8:	46b4      	mov	ip, r6
 8000cda:	08d2      	lsrs	r2, r2, #3
 8000cdc:	490f      	ldr	r1, [pc, #60]	; (8000d1c <__aeabi_dsub+0x368>)
 8000cde:	458c      	cmp	ip, r1
 8000ce0:	d02a      	beq.n	8000d38 <__aeabi_dsub+0x384>
 8000ce2:	0312      	lsls	r2, r2, #12
 8000ce4:	0b14      	lsrs	r4, r2, #12
 8000ce6:	4662      	mov	r2, ip
 8000ce8:	0552      	lsls	r2, r2, #21
 8000cea:	0d52      	lsrs	r2, r2, #21
 8000cec:	e70c      	b.n	8000b08 <__aeabi_dsub+0x154>
 8000cee:	003c      	movs	r4, r7
 8000cf0:	4304      	orrs	r4, r0
 8000cf2:	1e62      	subs	r2, r4, #1
 8000cf4:	4194      	sbcs	r4, r2
 8000cf6:	18e4      	adds	r4, r4, r3
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	4192      	sbcs	r2, r2
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	444a      	add	r2, r9
 8000d00:	4692      	mov	sl, r2
 8000d02:	4653      	mov	r3, sl
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	d5df      	bpl.n	8000cc8 <__aeabi_dsub+0x314>
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__aeabi_dsub+0x368>)
 8000d0a:	3601      	adds	r6, #1
 8000d0c:	429e      	cmp	r6, r3
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_dsub+0x35e>
 8000d10:	e0a0      	b.n	8000e54 <__aeabi_dsub+0x4a0>
 8000d12:	0032      	movs	r2, r6
 8000d14:	2400      	movs	r4, #0
 8000d16:	2300      	movs	r3, #0
 8000d18:	e6f6      	b.n	8000b08 <__aeabi_dsub+0x154>
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	000007ff 	.word	0x000007ff
 8000d20:	ff7fffff 	.word	0xff7fffff
 8000d24:	fffff801 	.word	0xfffff801
 8000d28:	000007fe 	.word	0x000007fe
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	464a      	mov	r2, r9
 8000d30:	0752      	lsls	r2, r2, #29
 8000d32:	4313      	orrs	r3, r2
 8000d34:	464a      	mov	r2, r9
 8000d36:	08d2      	lsrs	r2, r2, #3
 8000d38:	0019      	movs	r1, r3
 8000d3a:	4311      	orrs	r1, r2
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_dsub+0x38c>
 8000d3e:	e1b5      	b.n	80010ac <__aeabi_dsub+0x6f8>
 8000d40:	2480      	movs	r4, #128	; 0x80
 8000d42:	0324      	lsls	r4, r4, #12
 8000d44:	4314      	orrs	r4, r2
 8000d46:	0324      	lsls	r4, r4, #12
 8000d48:	4ad5      	ldr	r2, [pc, #852]	; (80010a0 <__aeabi_dsub+0x6ec>)
 8000d4a:	0b24      	lsrs	r4, r4, #12
 8000d4c:	e6dc      	b.n	8000b08 <__aeabi_dsub+0x154>
 8000d4e:	0020      	movs	r0, r4
 8000d50:	f000 fa4c 	bl	80011ec <__clzsi2>
 8000d54:	0003      	movs	r3, r0
 8000d56:	3318      	adds	r3, #24
 8000d58:	2b1f      	cmp	r3, #31
 8000d5a:	dc00      	bgt.n	8000d5e <__aeabi_dsub+0x3aa>
 8000d5c:	e695      	b.n	8000a8a <__aeabi_dsub+0xd6>
 8000d5e:	0022      	movs	r2, r4
 8000d60:	3808      	subs	r0, #8
 8000d62:	4082      	lsls	r2, r0
 8000d64:	2400      	movs	r4, #0
 8000d66:	429e      	cmp	r6, r3
 8000d68:	dc00      	bgt.n	8000d6c <__aeabi_dsub+0x3b8>
 8000d6a:	e69a      	b.n	8000aa2 <__aeabi_dsub+0xee>
 8000d6c:	1af6      	subs	r6, r6, r3
 8000d6e:	4bcd      	ldr	r3, [pc, #820]	; (80010a4 <__aeabi_dsub+0x6f0>)
 8000d70:	401a      	ands	r2, r3
 8000d72:	4692      	mov	sl, r2
 8000d74:	e6a8      	b.n	8000ac8 <__aeabi_dsub+0x114>
 8000d76:	003c      	movs	r4, r7
 8000d78:	4304      	orrs	r4, r0
 8000d7a:	1e62      	subs	r2, r4, #1
 8000d7c:	4194      	sbcs	r4, r2
 8000d7e:	e66c      	b.n	8000a5a <__aeabi_dsub+0xa6>
 8000d80:	464a      	mov	r2, r9
 8000d82:	08db      	lsrs	r3, r3, #3
 8000d84:	0752      	lsls	r2, r2, #29
 8000d86:	4313      	orrs	r3, r2
 8000d88:	464a      	mov	r2, r9
 8000d8a:	08d2      	lsrs	r2, r2, #3
 8000d8c:	e7a6      	b.n	8000cdc <__aeabi_dsub+0x328>
 8000d8e:	4cc6      	ldr	r4, [pc, #792]	; (80010a8 <__aeabi_dsub+0x6f4>)
 8000d90:	1c72      	adds	r2, r6, #1
 8000d92:	4222      	tst	r2, r4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_dsub+0x3e4>
 8000d96:	e0ac      	b.n	8000ef2 <__aeabi_dsub+0x53e>
 8000d98:	464a      	mov	r2, r9
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_dsub+0x3ee>
 8000da0:	e105      	b.n	8000fae <__aeabi_dsub+0x5fa>
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dsub+0x3f4>
 8000da6:	e156      	b.n	8001056 <__aeabi_dsub+0x6a2>
 8000da8:	003a      	movs	r2, r7
 8000daa:	4302      	orrs	r2, r0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dsub+0x3fc>
 8000dae:	e0db      	b.n	8000f68 <__aeabi_dsub+0x5b4>
 8000db0:	181c      	adds	r4, r3, r0
 8000db2:	429c      	cmp	r4, r3
 8000db4:	419b      	sbcs	r3, r3
 8000db6:	444f      	add	r7, r9
 8000db8:	46ba      	mov	sl, r7
 8000dba:	425b      	negs	r3, r3
 8000dbc:	449a      	add	sl, r3
 8000dbe:	4653      	mov	r3, sl
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	d400      	bmi.n	8000dc6 <__aeabi_dsub+0x412>
 8000dc4:	e780      	b.n	8000cc8 <__aeabi_dsub+0x314>
 8000dc6:	4652      	mov	r2, sl
 8000dc8:	4bb6      	ldr	r3, [pc, #728]	; (80010a4 <__aeabi_dsub+0x6f0>)
 8000dca:	2601      	movs	r6, #1
 8000dcc:	401a      	ands	r2, r3
 8000dce:	4692      	mov	sl, r2
 8000dd0:	e77a      	b.n	8000cc8 <__aeabi_dsub+0x314>
 8000dd2:	4cb3      	ldr	r4, [pc, #716]	; (80010a0 <__aeabi_dsub+0x6ec>)
 8000dd4:	42a2      	cmp	r2, r4
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dsub+0x426>
 8000dd8:	e0c0      	b.n	8000f5c <__aeabi_dsub+0x5a8>
 8000dda:	2480      	movs	r4, #128	; 0x80
 8000ddc:	464d      	mov	r5, r9
 8000dde:	0424      	lsls	r4, r4, #16
 8000de0:	4325      	orrs	r5, r4
 8000de2:	46a9      	mov	r9, r5
 8000de4:	4664      	mov	r4, ip
 8000de6:	2c38      	cmp	r4, #56	; 0x38
 8000de8:	dc53      	bgt.n	8000e92 <__aeabi_dsub+0x4de>
 8000dea:	4661      	mov	r1, ip
 8000dec:	2c1f      	cmp	r4, #31
 8000dee:	dd00      	ble.n	8000df2 <__aeabi_dsub+0x43e>
 8000df0:	e0cd      	b.n	8000f8e <__aeabi_dsub+0x5da>
 8000df2:	2520      	movs	r5, #32
 8000df4:	001e      	movs	r6, r3
 8000df6:	1b2d      	subs	r5, r5, r4
 8000df8:	464c      	mov	r4, r9
 8000dfa:	40ab      	lsls	r3, r5
 8000dfc:	40ac      	lsls	r4, r5
 8000dfe:	40ce      	lsrs	r6, r1
 8000e00:	1e5d      	subs	r5, r3, #1
 8000e02:	41ab      	sbcs	r3, r5
 8000e04:	4334      	orrs	r4, r6
 8000e06:	4323      	orrs	r3, r4
 8000e08:	464c      	mov	r4, r9
 8000e0a:	40cc      	lsrs	r4, r1
 8000e0c:	1b3f      	subs	r7, r7, r4
 8000e0e:	e045      	b.n	8000e9c <__aeabi_dsub+0x4e8>
 8000e10:	464a      	mov	r2, r9
 8000e12:	1a1c      	subs	r4, r3, r0
 8000e14:	1bd1      	subs	r1, r2, r7
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	4192      	sbcs	r2, r2
 8000e1a:	4252      	negs	r2, r2
 8000e1c:	4692      	mov	sl, r2
 8000e1e:	000a      	movs	r2, r1
 8000e20:	4651      	mov	r1, sl
 8000e22:	1a52      	subs	r2, r2, r1
 8000e24:	4692      	mov	sl, r2
 8000e26:	0212      	lsls	r2, r2, #8
 8000e28:	d500      	bpl.n	8000e2c <__aeabi_dsub+0x478>
 8000e2a:	e083      	b.n	8000f34 <__aeabi_dsub+0x580>
 8000e2c:	4653      	mov	r3, sl
 8000e2e:	4323      	orrs	r3, r4
 8000e30:	d000      	beq.n	8000e34 <__aeabi_dsub+0x480>
 8000e32:	e621      	b.n	8000a78 <__aeabi_dsub+0xc4>
 8000e34:	2200      	movs	r2, #0
 8000e36:	2500      	movs	r5, #0
 8000e38:	e753      	b.n	8000ce2 <__aeabi_dsub+0x32e>
 8000e3a:	181c      	adds	r4, r3, r0
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	419b      	sbcs	r3, r3
 8000e40:	444f      	add	r7, r9
 8000e42:	46ba      	mov	sl, r7
 8000e44:	425b      	negs	r3, r3
 8000e46:	449a      	add	sl, r3
 8000e48:	4653      	mov	r3, sl
 8000e4a:	2601      	movs	r6, #1
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	d400      	bmi.n	8000e52 <__aeabi_dsub+0x49e>
 8000e50:	e73a      	b.n	8000cc8 <__aeabi_dsub+0x314>
 8000e52:	2602      	movs	r6, #2
 8000e54:	4652      	mov	r2, sl
 8000e56:	4b93      	ldr	r3, [pc, #588]	; (80010a4 <__aeabi_dsub+0x6f0>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	4021      	ands	r1, r4
 8000e60:	0862      	lsrs	r2, r4, #1
 8000e62:	430a      	orrs	r2, r1
 8000e64:	07dc      	lsls	r4, r3, #31
 8000e66:	085b      	lsrs	r3, r3, #1
 8000e68:	469a      	mov	sl, r3
 8000e6a:	4314      	orrs	r4, r2
 8000e6c:	e62c      	b.n	8000ac8 <__aeabi_dsub+0x114>
 8000e6e:	0039      	movs	r1, r7
 8000e70:	3a20      	subs	r2, #32
 8000e72:	40d1      	lsrs	r1, r2
 8000e74:	4662      	mov	r2, ip
 8000e76:	2a20      	cmp	r2, #32
 8000e78:	d006      	beq.n	8000e88 <__aeabi_dsub+0x4d4>
 8000e7a:	4664      	mov	r4, ip
 8000e7c:	2240      	movs	r2, #64	; 0x40
 8000e7e:	1b12      	subs	r2, r2, r4
 8000e80:	003c      	movs	r4, r7
 8000e82:	4094      	lsls	r4, r2
 8000e84:	4304      	orrs	r4, r0
 8000e86:	9401      	str	r4, [sp, #4]
 8000e88:	9c01      	ldr	r4, [sp, #4]
 8000e8a:	1e62      	subs	r2, r4, #1
 8000e8c:	4194      	sbcs	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	e5e3      	b.n	8000a5a <__aeabi_dsub+0xa6>
 8000e92:	4649      	mov	r1, r9
 8000e94:	4319      	orrs	r1, r3
 8000e96:	000b      	movs	r3, r1
 8000e98:	1e5c      	subs	r4, r3, #1
 8000e9a:	41a3      	sbcs	r3, r4
 8000e9c:	1ac4      	subs	r4, r0, r3
 8000e9e:	42a0      	cmp	r0, r4
 8000ea0:	419b      	sbcs	r3, r3
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	1afb      	subs	r3, r7, r3
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	465d      	mov	r5, fp
 8000eaa:	0016      	movs	r6, r2
 8000eac:	e5dc      	b.n	8000a68 <__aeabi_dsub+0xb4>
 8000eae:	4649      	mov	r1, r9
 8000eb0:	4319      	orrs	r1, r3
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_dsub+0x502>
 8000eb4:	e0ae      	b.n	8001014 <__aeabi_dsub+0x660>
 8000eb6:	4661      	mov	r1, ip
 8000eb8:	4664      	mov	r4, ip
 8000eba:	3901      	subs	r1, #1
 8000ebc:	2c01      	cmp	r4, #1
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_dsub+0x50e>
 8000ec0:	e0e0      	b.n	8001084 <__aeabi_dsub+0x6d0>
 8000ec2:	4c77      	ldr	r4, [pc, #476]	; (80010a0 <__aeabi_dsub+0x6ec>)
 8000ec4:	45a4      	cmp	ip, r4
 8000ec6:	d056      	beq.n	8000f76 <__aeabi_dsub+0x5c2>
 8000ec8:	468c      	mov	ip, r1
 8000eca:	e69a      	b.n	8000c02 <__aeabi_dsub+0x24e>
 8000ecc:	4661      	mov	r1, ip
 8000ece:	2220      	movs	r2, #32
 8000ed0:	003c      	movs	r4, r7
 8000ed2:	1a52      	subs	r2, r2, r1
 8000ed4:	4094      	lsls	r4, r2
 8000ed6:	0001      	movs	r1, r0
 8000ed8:	4090      	lsls	r0, r2
 8000eda:	46a0      	mov	r8, r4
 8000edc:	4664      	mov	r4, ip
 8000ede:	1e42      	subs	r2, r0, #1
 8000ee0:	4190      	sbcs	r0, r2
 8000ee2:	4662      	mov	r2, ip
 8000ee4:	40e1      	lsrs	r1, r4
 8000ee6:	4644      	mov	r4, r8
 8000ee8:	40d7      	lsrs	r7, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	4304      	orrs	r4, r0
 8000eee:	44b9      	add	r9, r7
 8000ef0:	e701      	b.n	8000cf6 <__aeabi_dsub+0x342>
 8000ef2:	496b      	ldr	r1, [pc, #428]	; (80010a0 <__aeabi_dsub+0x6ec>)
 8000ef4:	428a      	cmp	r2, r1
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dsub+0x546>
 8000ef8:	e70c      	b.n	8000d14 <__aeabi_dsub+0x360>
 8000efa:	1818      	adds	r0, r3, r0
 8000efc:	4298      	cmp	r0, r3
 8000efe:	419b      	sbcs	r3, r3
 8000f00:	444f      	add	r7, r9
 8000f02:	425b      	negs	r3, r3
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	07dc      	lsls	r4, r3, #31
 8000f08:	0840      	lsrs	r0, r0, #1
 8000f0a:	085b      	lsrs	r3, r3, #1
 8000f0c:	469a      	mov	sl, r3
 8000f0e:	0016      	movs	r6, r2
 8000f10:	4304      	orrs	r4, r0
 8000f12:	e6d9      	b.n	8000cc8 <__aeabi_dsub+0x314>
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	d000      	beq.n	8000f1a <__aeabi_dsub+0x566>
 8000f18:	e081      	b.n	800101e <__aeabi_dsub+0x66a>
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	4303      	orrs	r3, r0
 8000f1e:	d11d      	bne.n	8000f5c <__aeabi_dsub+0x5a8>
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	2500      	movs	r5, #0
 8000f24:	0312      	lsls	r2, r2, #12
 8000f26:	e70b      	b.n	8000d40 <__aeabi_dsub+0x38c>
 8000f28:	08c0      	lsrs	r0, r0, #3
 8000f2a:	077b      	lsls	r3, r7, #29
 8000f2c:	465d      	mov	r5, fp
 8000f2e:	4303      	orrs	r3, r0
 8000f30:	08fa      	lsrs	r2, r7, #3
 8000f32:	e6d3      	b.n	8000cdc <__aeabi_dsub+0x328>
 8000f34:	1ac4      	subs	r4, r0, r3
 8000f36:	42a0      	cmp	r0, r4
 8000f38:	4180      	sbcs	r0, r0
 8000f3a:	464b      	mov	r3, r9
 8000f3c:	4240      	negs	r0, r0
 8000f3e:	1aff      	subs	r7, r7, r3
 8000f40:	1a3b      	subs	r3, r7, r0
 8000f42:	469a      	mov	sl, r3
 8000f44:	465d      	mov	r5, fp
 8000f46:	e597      	b.n	8000a78 <__aeabi_dsub+0xc4>
 8000f48:	1a1c      	subs	r4, r3, r0
 8000f4a:	464a      	mov	r2, r9
 8000f4c:	42a3      	cmp	r3, r4
 8000f4e:	419b      	sbcs	r3, r3
 8000f50:	1bd7      	subs	r7, r2, r7
 8000f52:	425b      	negs	r3, r3
 8000f54:	1afb      	subs	r3, r7, r3
 8000f56:	469a      	mov	sl, r3
 8000f58:	2601      	movs	r6, #1
 8000f5a:	e585      	b.n	8000a68 <__aeabi_dsub+0xb4>
 8000f5c:	08c0      	lsrs	r0, r0, #3
 8000f5e:	077b      	lsls	r3, r7, #29
 8000f60:	465d      	mov	r5, fp
 8000f62:	4303      	orrs	r3, r0
 8000f64:	08fa      	lsrs	r2, r7, #3
 8000f66:	e6e7      	b.n	8000d38 <__aeabi_dsub+0x384>
 8000f68:	464a      	mov	r2, r9
 8000f6a:	08db      	lsrs	r3, r3, #3
 8000f6c:	0752      	lsls	r2, r2, #29
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	464a      	mov	r2, r9
 8000f72:	08d2      	lsrs	r2, r2, #3
 8000f74:	e6b5      	b.n	8000ce2 <__aeabi_dsub+0x32e>
 8000f76:	08c0      	lsrs	r0, r0, #3
 8000f78:	077b      	lsls	r3, r7, #29
 8000f7a:	4303      	orrs	r3, r0
 8000f7c:	08fa      	lsrs	r2, r7, #3
 8000f7e:	e6db      	b.n	8000d38 <__aeabi_dsub+0x384>
 8000f80:	4649      	mov	r1, r9
 8000f82:	4319      	orrs	r1, r3
 8000f84:	000b      	movs	r3, r1
 8000f86:	1e59      	subs	r1, r3, #1
 8000f88:	418b      	sbcs	r3, r1
 8000f8a:	001c      	movs	r4, r3
 8000f8c:	e653      	b.n	8000c36 <__aeabi_dsub+0x282>
 8000f8e:	464d      	mov	r5, r9
 8000f90:	3c20      	subs	r4, #32
 8000f92:	40e5      	lsrs	r5, r4
 8000f94:	2920      	cmp	r1, #32
 8000f96:	d005      	beq.n	8000fa4 <__aeabi_dsub+0x5f0>
 8000f98:	2440      	movs	r4, #64	; 0x40
 8000f9a:	1a64      	subs	r4, r4, r1
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	40a1      	lsls	r1, r4
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	4698      	mov	r8, r3
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	1e5c      	subs	r4, r3, #1
 8000fa8:	41a3      	sbcs	r3, r4
 8000faa:	432b      	orrs	r3, r5
 8000fac:	e776      	b.n	8000e9c <__aeabi_dsub+0x4e8>
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d0e1      	beq.n	8000f76 <__aeabi_dsub+0x5c2>
 8000fb2:	003a      	movs	r2, r7
 8000fb4:	08db      	lsrs	r3, r3, #3
 8000fb6:	4302      	orrs	r2, r0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_dsub+0x608>
 8000fba:	e6b8      	b.n	8000d2e <__aeabi_dsub+0x37a>
 8000fbc:	464a      	mov	r2, r9
 8000fbe:	0752      	lsls	r2, r2, #29
 8000fc0:	2480      	movs	r4, #128	; 0x80
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	464a      	mov	r2, r9
 8000fc6:	0324      	lsls	r4, r4, #12
 8000fc8:	08d2      	lsrs	r2, r2, #3
 8000fca:	4222      	tst	r2, r4
 8000fcc:	d007      	beq.n	8000fde <__aeabi_dsub+0x62a>
 8000fce:	08fe      	lsrs	r6, r7, #3
 8000fd0:	4226      	tst	r6, r4
 8000fd2:	d104      	bne.n	8000fde <__aeabi_dsub+0x62a>
 8000fd4:	465d      	mov	r5, fp
 8000fd6:	0032      	movs	r2, r6
 8000fd8:	08c3      	lsrs	r3, r0, #3
 8000fda:	077f      	lsls	r7, r7, #29
 8000fdc:	433b      	orrs	r3, r7
 8000fde:	0f59      	lsrs	r1, r3, #29
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	0749      	lsls	r1, r1, #29
 8000fe4:	08db      	lsrs	r3, r3, #3
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	e6a6      	b.n	8000d38 <__aeabi_dsub+0x384>
 8000fea:	1ac4      	subs	r4, r0, r3
 8000fec:	42a0      	cmp	r0, r4
 8000fee:	4180      	sbcs	r0, r0
 8000ff0:	464b      	mov	r3, r9
 8000ff2:	4240      	negs	r0, r0
 8000ff4:	1aff      	subs	r7, r7, r3
 8000ff6:	1a3b      	subs	r3, r7, r0
 8000ff8:	469a      	mov	sl, r3
 8000ffa:	465d      	mov	r5, fp
 8000ffc:	2601      	movs	r6, #1
 8000ffe:	e533      	b.n	8000a68 <__aeabi_dsub+0xb4>
 8001000:	003b      	movs	r3, r7
 8001002:	4303      	orrs	r3, r0
 8001004:	d100      	bne.n	8001008 <__aeabi_dsub+0x654>
 8001006:	e715      	b.n	8000e34 <__aeabi_dsub+0x480>
 8001008:	08c0      	lsrs	r0, r0, #3
 800100a:	077b      	lsls	r3, r7, #29
 800100c:	465d      	mov	r5, fp
 800100e:	4303      	orrs	r3, r0
 8001010:	08fa      	lsrs	r2, r7, #3
 8001012:	e666      	b.n	8000ce2 <__aeabi_dsub+0x32e>
 8001014:	08c0      	lsrs	r0, r0, #3
 8001016:	077b      	lsls	r3, r7, #29
 8001018:	4303      	orrs	r3, r0
 800101a:	08fa      	lsrs	r2, r7, #3
 800101c:	e65e      	b.n	8000cdc <__aeabi_dsub+0x328>
 800101e:	003a      	movs	r2, r7
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	4302      	orrs	r2, r0
 8001024:	d100      	bne.n	8001028 <__aeabi_dsub+0x674>
 8001026:	e682      	b.n	8000d2e <__aeabi_dsub+0x37a>
 8001028:	464a      	mov	r2, r9
 800102a:	0752      	lsls	r2, r2, #29
 800102c:	2480      	movs	r4, #128	; 0x80
 800102e:	4313      	orrs	r3, r2
 8001030:	464a      	mov	r2, r9
 8001032:	0324      	lsls	r4, r4, #12
 8001034:	08d2      	lsrs	r2, r2, #3
 8001036:	4222      	tst	r2, r4
 8001038:	d007      	beq.n	800104a <__aeabi_dsub+0x696>
 800103a:	08fe      	lsrs	r6, r7, #3
 800103c:	4226      	tst	r6, r4
 800103e:	d104      	bne.n	800104a <__aeabi_dsub+0x696>
 8001040:	465d      	mov	r5, fp
 8001042:	0032      	movs	r2, r6
 8001044:	08c3      	lsrs	r3, r0, #3
 8001046:	077f      	lsls	r7, r7, #29
 8001048:	433b      	orrs	r3, r7
 800104a:	0f59      	lsrs	r1, r3, #29
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	0749      	lsls	r1, r1, #29
 8001052:	430b      	orrs	r3, r1
 8001054:	e670      	b.n	8000d38 <__aeabi_dsub+0x384>
 8001056:	08c0      	lsrs	r0, r0, #3
 8001058:	077b      	lsls	r3, r7, #29
 800105a:	4303      	orrs	r3, r0
 800105c:	08fa      	lsrs	r2, r7, #3
 800105e:	e640      	b.n	8000ce2 <__aeabi_dsub+0x32e>
 8001060:	464c      	mov	r4, r9
 8001062:	3920      	subs	r1, #32
 8001064:	40cc      	lsrs	r4, r1
 8001066:	4661      	mov	r1, ip
 8001068:	2920      	cmp	r1, #32
 800106a:	d006      	beq.n	800107a <__aeabi_dsub+0x6c6>
 800106c:	4666      	mov	r6, ip
 800106e:	2140      	movs	r1, #64	; 0x40
 8001070:	1b89      	subs	r1, r1, r6
 8001072:	464e      	mov	r6, r9
 8001074:	408e      	lsls	r6, r1
 8001076:	4333      	orrs	r3, r6
 8001078:	4698      	mov	r8, r3
 800107a:	4643      	mov	r3, r8
 800107c:	1e59      	subs	r1, r3, #1
 800107e:	418b      	sbcs	r3, r1
 8001080:	431c      	orrs	r4, r3
 8001082:	e5d8      	b.n	8000c36 <__aeabi_dsub+0x282>
 8001084:	181c      	adds	r4, r3, r0
 8001086:	4284      	cmp	r4, r0
 8001088:	4180      	sbcs	r0, r0
 800108a:	444f      	add	r7, r9
 800108c:	46ba      	mov	sl, r7
 800108e:	4240      	negs	r0, r0
 8001090:	4482      	add	sl, r0
 8001092:	e6d9      	b.n	8000e48 <__aeabi_dsub+0x494>
 8001094:	4653      	mov	r3, sl
 8001096:	4323      	orrs	r3, r4
 8001098:	d100      	bne.n	800109c <__aeabi_dsub+0x6e8>
 800109a:	e6cb      	b.n	8000e34 <__aeabi_dsub+0x480>
 800109c:	e614      	b.n	8000cc8 <__aeabi_dsub+0x314>
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	000007ff 	.word	0x000007ff
 80010a4:	ff7fffff 	.word	0xff7fffff
 80010a8:	000007fe 	.word	0x000007fe
 80010ac:	2300      	movs	r3, #0
 80010ae:	4a01      	ldr	r2, [pc, #4]	; (80010b4 <__aeabi_dsub+0x700>)
 80010b0:	001c      	movs	r4, r3
 80010b2:	e529      	b.n	8000b08 <__aeabi_dsub+0x154>
 80010b4:	000007ff 	.word	0x000007ff

080010b8 <__aeabi_d2iz>:
 80010b8:	000a      	movs	r2, r1
 80010ba:	b530      	push	{r4, r5, lr}
 80010bc:	4c13      	ldr	r4, [pc, #76]	; (800110c <__aeabi_d2iz+0x54>)
 80010be:	0053      	lsls	r3, r2, #1
 80010c0:	0309      	lsls	r1, r1, #12
 80010c2:	0005      	movs	r5, r0
 80010c4:	0b09      	lsrs	r1, r1, #12
 80010c6:	2000      	movs	r0, #0
 80010c8:	0d5b      	lsrs	r3, r3, #21
 80010ca:	0fd2      	lsrs	r2, r2, #31
 80010cc:	42a3      	cmp	r3, r4
 80010ce:	dd04      	ble.n	80010da <__aeabi_d2iz+0x22>
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <__aeabi_d2iz+0x58>)
 80010d2:	4283      	cmp	r3, r0
 80010d4:	dd02      	ble.n	80010dc <__aeabi_d2iz+0x24>
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <__aeabi_d2iz+0x5c>)
 80010d8:	18d0      	adds	r0, r2, r3
 80010da:	bd30      	pop	{r4, r5, pc}
 80010dc:	2080      	movs	r0, #128	; 0x80
 80010de:	0340      	lsls	r0, r0, #13
 80010e0:	4301      	orrs	r1, r0
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <__aeabi_d2iz+0x60>)
 80010e4:	1ac0      	subs	r0, r0, r3
 80010e6:	281f      	cmp	r0, #31
 80010e8:	dd08      	ble.n	80010fc <__aeabi_d2iz+0x44>
 80010ea:	480c      	ldr	r0, [pc, #48]	; (800111c <__aeabi_d2iz+0x64>)
 80010ec:	1ac3      	subs	r3, r0, r3
 80010ee:	40d9      	lsrs	r1, r3
 80010f0:	000b      	movs	r3, r1
 80010f2:	4258      	negs	r0, r3
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	d1f0      	bne.n	80010da <__aeabi_d2iz+0x22>
 80010f8:	0018      	movs	r0, r3
 80010fa:	e7ee      	b.n	80010da <__aeabi_d2iz+0x22>
 80010fc:	4c08      	ldr	r4, [pc, #32]	; (8001120 <__aeabi_d2iz+0x68>)
 80010fe:	40c5      	lsrs	r5, r0
 8001100:	46a4      	mov	ip, r4
 8001102:	4463      	add	r3, ip
 8001104:	4099      	lsls	r1, r3
 8001106:	000b      	movs	r3, r1
 8001108:	432b      	orrs	r3, r5
 800110a:	e7f2      	b.n	80010f2 <__aeabi_d2iz+0x3a>
 800110c:	000003fe 	.word	0x000003fe
 8001110:	0000041d 	.word	0x0000041d
 8001114:	7fffffff 	.word	0x7fffffff
 8001118:	00000433 	.word	0x00000433
 800111c:	00000413 	.word	0x00000413
 8001120:	fffffbed 	.word	0xfffffbed

08001124 <__aeabi_ui2d>:
 8001124:	b510      	push	{r4, lr}
 8001126:	1e04      	subs	r4, r0, #0
 8001128:	d010      	beq.n	800114c <__aeabi_ui2d+0x28>
 800112a:	f000 f85f 	bl	80011ec <__clzsi2>
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <__aeabi_ui2d+0x48>)
 8001130:	1a1b      	subs	r3, r3, r0
 8001132:	280a      	cmp	r0, #10
 8001134:	dc11      	bgt.n	800115a <__aeabi_ui2d+0x36>
 8001136:	220b      	movs	r2, #11
 8001138:	0021      	movs	r1, r4
 800113a:	1a12      	subs	r2, r2, r0
 800113c:	40d1      	lsrs	r1, r2
 800113e:	3015      	adds	r0, #21
 8001140:	030a      	lsls	r2, r1, #12
 8001142:	055b      	lsls	r3, r3, #21
 8001144:	4084      	lsls	r4, r0
 8001146:	0b12      	lsrs	r2, r2, #12
 8001148:	0d5b      	lsrs	r3, r3, #21
 800114a:	e001      	b.n	8001150 <__aeabi_ui2d+0x2c>
 800114c:	2300      	movs	r3, #0
 800114e:	2200      	movs	r2, #0
 8001150:	051b      	lsls	r3, r3, #20
 8001152:	4313      	orrs	r3, r2
 8001154:	0020      	movs	r0, r4
 8001156:	0019      	movs	r1, r3
 8001158:	bd10      	pop	{r4, pc}
 800115a:	0022      	movs	r2, r4
 800115c:	380b      	subs	r0, #11
 800115e:	4082      	lsls	r2, r0
 8001160:	055b      	lsls	r3, r3, #21
 8001162:	0312      	lsls	r2, r2, #12
 8001164:	2400      	movs	r4, #0
 8001166:	0b12      	lsrs	r2, r2, #12
 8001168:	0d5b      	lsrs	r3, r3, #21
 800116a:	e7f1      	b.n	8001150 <__aeabi_ui2d+0x2c>
 800116c:	0000041e 	.word	0x0000041e

08001170 <__aeabi_cdrcmple>:
 8001170:	4684      	mov	ip, r0
 8001172:	0010      	movs	r0, r2
 8001174:	4662      	mov	r2, ip
 8001176:	468c      	mov	ip, r1
 8001178:	0019      	movs	r1, r3
 800117a:	4663      	mov	r3, ip
 800117c:	e000      	b.n	8001180 <__aeabi_cdcmpeq>
 800117e:	46c0      	nop			; (mov r8, r8)

08001180 <__aeabi_cdcmpeq>:
 8001180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001182:	f000 f8f9 	bl	8001378 <__ledf2>
 8001186:	2800      	cmp	r0, #0
 8001188:	d401      	bmi.n	800118e <__aeabi_cdcmpeq+0xe>
 800118a:	2100      	movs	r1, #0
 800118c:	42c8      	cmn	r0, r1
 800118e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001190 <__aeabi_dcmpeq>:
 8001190:	b510      	push	{r4, lr}
 8001192:	f000 f849 	bl	8001228 <__eqdf2>
 8001196:	4240      	negs	r0, r0
 8001198:	3001      	adds	r0, #1
 800119a:	bd10      	pop	{r4, pc}

0800119c <__aeabi_dcmplt>:
 800119c:	b510      	push	{r4, lr}
 800119e:	f000 f8eb 	bl	8001378 <__ledf2>
 80011a2:	2800      	cmp	r0, #0
 80011a4:	db01      	blt.n	80011aa <__aeabi_dcmplt+0xe>
 80011a6:	2000      	movs	r0, #0
 80011a8:	bd10      	pop	{r4, pc}
 80011aa:	2001      	movs	r0, #1
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)

080011b0 <__aeabi_dcmple>:
 80011b0:	b510      	push	{r4, lr}
 80011b2:	f000 f8e1 	bl	8001378 <__ledf2>
 80011b6:	2800      	cmp	r0, #0
 80011b8:	dd01      	ble.n	80011be <__aeabi_dcmple+0xe>
 80011ba:	2000      	movs	r0, #0
 80011bc:	bd10      	pop	{r4, pc}
 80011be:	2001      	movs	r0, #1
 80011c0:	bd10      	pop	{r4, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)

080011c4 <__aeabi_dcmpgt>:
 80011c4:	b510      	push	{r4, lr}
 80011c6:	f000 f871 	bl	80012ac <__gedf2>
 80011ca:	2800      	cmp	r0, #0
 80011cc:	dc01      	bgt.n	80011d2 <__aeabi_dcmpgt+0xe>
 80011ce:	2000      	movs	r0, #0
 80011d0:	bd10      	pop	{r4, pc}
 80011d2:	2001      	movs	r0, #1
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)

080011d8 <__aeabi_dcmpge>:
 80011d8:	b510      	push	{r4, lr}
 80011da:	f000 f867 	bl	80012ac <__gedf2>
 80011de:	2800      	cmp	r0, #0
 80011e0:	da01      	bge.n	80011e6 <__aeabi_dcmpge+0xe>
 80011e2:	2000      	movs	r0, #0
 80011e4:	bd10      	pop	{r4, pc}
 80011e6:	2001      	movs	r0, #1
 80011e8:	bd10      	pop	{r4, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)

080011ec <__clzsi2>:
 80011ec:	211c      	movs	r1, #28
 80011ee:	2301      	movs	r3, #1
 80011f0:	041b      	lsls	r3, r3, #16
 80011f2:	4298      	cmp	r0, r3
 80011f4:	d301      	bcc.n	80011fa <__clzsi2+0xe>
 80011f6:	0c00      	lsrs	r0, r0, #16
 80011f8:	3910      	subs	r1, #16
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	4298      	cmp	r0, r3
 80011fe:	d301      	bcc.n	8001204 <__clzsi2+0x18>
 8001200:	0a00      	lsrs	r0, r0, #8
 8001202:	3908      	subs	r1, #8
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	4298      	cmp	r0, r3
 8001208:	d301      	bcc.n	800120e <__clzsi2+0x22>
 800120a:	0900      	lsrs	r0, r0, #4
 800120c:	3904      	subs	r1, #4
 800120e:	a202      	add	r2, pc, #8	; (adr r2, 8001218 <__clzsi2+0x2c>)
 8001210:	5c10      	ldrb	r0, [r2, r0]
 8001212:	1840      	adds	r0, r0, r1
 8001214:	4770      	bx	lr
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	02020304 	.word	0x02020304
 800121c:	01010101 	.word	0x01010101
	...

08001228 <__eqdf2>:
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	464e      	mov	r6, r9
 800122c:	4645      	mov	r5, r8
 800122e:	46de      	mov	lr, fp
 8001230:	4657      	mov	r7, sl
 8001232:	4690      	mov	r8, r2
 8001234:	b5e0      	push	{r5, r6, r7, lr}
 8001236:	0017      	movs	r7, r2
 8001238:	031a      	lsls	r2, r3, #12
 800123a:	0b12      	lsrs	r2, r2, #12
 800123c:	0005      	movs	r5, r0
 800123e:	4684      	mov	ip, r0
 8001240:	4819      	ldr	r0, [pc, #100]	; (80012a8 <__eqdf2+0x80>)
 8001242:	030e      	lsls	r6, r1, #12
 8001244:	004c      	lsls	r4, r1, #1
 8001246:	4691      	mov	r9, r2
 8001248:	005a      	lsls	r2, r3, #1
 800124a:	0fdb      	lsrs	r3, r3, #31
 800124c:	469b      	mov	fp, r3
 800124e:	0b36      	lsrs	r6, r6, #12
 8001250:	0d64      	lsrs	r4, r4, #21
 8001252:	0fc9      	lsrs	r1, r1, #31
 8001254:	0d52      	lsrs	r2, r2, #21
 8001256:	4284      	cmp	r4, r0
 8001258:	d019      	beq.n	800128e <__eqdf2+0x66>
 800125a:	4282      	cmp	r2, r0
 800125c:	d010      	beq.n	8001280 <__eqdf2+0x58>
 800125e:	2001      	movs	r0, #1
 8001260:	4294      	cmp	r4, r2
 8001262:	d10e      	bne.n	8001282 <__eqdf2+0x5a>
 8001264:	454e      	cmp	r6, r9
 8001266:	d10c      	bne.n	8001282 <__eqdf2+0x5a>
 8001268:	2001      	movs	r0, #1
 800126a:	45c4      	cmp	ip, r8
 800126c:	d109      	bne.n	8001282 <__eqdf2+0x5a>
 800126e:	4559      	cmp	r1, fp
 8001270:	d017      	beq.n	80012a2 <__eqdf2+0x7a>
 8001272:	2c00      	cmp	r4, #0
 8001274:	d105      	bne.n	8001282 <__eqdf2+0x5a>
 8001276:	0030      	movs	r0, r6
 8001278:	4328      	orrs	r0, r5
 800127a:	1e43      	subs	r3, r0, #1
 800127c:	4198      	sbcs	r0, r3
 800127e:	e000      	b.n	8001282 <__eqdf2+0x5a>
 8001280:	2001      	movs	r0, #1
 8001282:	bcf0      	pop	{r4, r5, r6, r7}
 8001284:	46bb      	mov	fp, r7
 8001286:	46b2      	mov	sl, r6
 8001288:	46a9      	mov	r9, r5
 800128a:	46a0      	mov	r8, r4
 800128c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128e:	0033      	movs	r3, r6
 8001290:	2001      	movs	r0, #1
 8001292:	432b      	orrs	r3, r5
 8001294:	d1f5      	bne.n	8001282 <__eqdf2+0x5a>
 8001296:	42a2      	cmp	r2, r4
 8001298:	d1f3      	bne.n	8001282 <__eqdf2+0x5a>
 800129a:	464b      	mov	r3, r9
 800129c:	433b      	orrs	r3, r7
 800129e:	d1f0      	bne.n	8001282 <__eqdf2+0x5a>
 80012a0:	e7e2      	b.n	8001268 <__eqdf2+0x40>
 80012a2:	2000      	movs	r0, #0
 80012a4:	e7ed      	b.n	8001282 <__eqdf2+0x5a>
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	000007ff 	.word	0x000007ff

080012ac <__gedf2>:
 80012ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ae:	4647      	mov	r7, r8
 80012b0:	46ce      	mov	lr, r9
 80012b2:	0004      	movs	r4, r0
 80012b4:	0018      	movs	r0, r3
 80012b6:	0016      	movs	r6, r2
 80012b8:	031b      	lsls	r3, r3, #12
 80012ba:	0b1b      	lsrs	r3, r3, #12
 80012bc:	4d2d      	ldr	r5, [pc, #180]	; (8001374 <__gedf2+0xc8>)
 80012be:	004a      	lsls	r2, r1, #1
 80012c0:	4699      	mov	r9, r3
 80012c2:	b580      	push	{r7, lr}
 80012c4:	0043      	lsls	r3, r0, #1
 80012c6:	030f      	lsls	r7, r1, #12
 80012c8:	46a4      	mov	ip, r4
 80012ca:	46b0      	mov	r8, r6
 80012cc:	0b3f      	lsrs	r7, r7, #12
 80012ce:	0d52      	lsrs	r2, r2, #21
 80012d0:	0fc9      	lsrs	r1, r1, #31
 80012d2:	0d5b      	lsrs	r3, r3, #21
 80012d4:	0fc0      	lsrs	r0, r0, #31
 80012d6:	42aa      	cmp	r2, r5
 80012d8:	d021      	beq.n	800131e <__gedf2+0x72>
 80012da:	42ab      	cmp	r3, r5
 80012dc:	d013      	beq.n	8001306 <__gedf2+0x5a>
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d122      	bne.n	8001328 <__gedf2+0x7c>
 80012e2:	433c      	orrs	r4, r7
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <__gedf2+0x42>
 80012e8:	464d      	mov	r5, r9
 80012ea:	432e      	orrs	r6, r5
 80012ec:	d022      	beq.n	8001334 <__gedf2+0x88>
 80012ee:	2c00      	cmp	r4, #0
 80012f0:	d010      	beq.n	8001314 <__gedf2+0x68>
 80012f2:	4281      	cmp	r1, r0
 80012f4:	d022      	beq.n	800133c <__gedf2+0x90>
 80012f6:	2002      	movs	r0, #2
 80012f8:	3901      	subs	r1, #1
 80012fa:	4008      	ands	r0, r1
 80012fc:	3801      	subs	r0, #1
 80012fe:	bcc0      	pop	{r6, r7}
 8001300:	46b9      	mov	r9, r7
 8001302:	46b0      	mov	r8, r6
 8001304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001306:	464d      	mov	r5, r9
 8001308:	432e      	orrs	r6, r5
 800130a:	d129      	bne.n	8001360 <__gedf2+0xb4>
 800130c:	2a00      	cmp	r2, #0
 800130e:	d1f0      	bne.n	80012f2 <__gedf2+0x46>
 8001310:	433c      	orrs	r4, r7
 8001312:	d1ee      	bne.n	80012f2 <__gedf2+0x46>
 8001314:	2800      	cmp	r0, #0
 8001316:	d1f2      	bne.n	80012fe <__gedf2+0x52>
 8001318:	2001      	movs	r0, #1
 800131a:	4240      	negs	r0, r0
 800131c:	e7ef      	b.n	80012fe <__gedf2+0x52>
 800131e:	003d      	movs	r5, r7
 8001320:	4325      	orrs	r5, r4
 8001322:	d11d      	bne.n	8001360 <__gedf2+0xb4>
 8001324:	4293      	cmp	r3, r2
 8001326:	d0ee      	beq.n	8001306 <__gedf2+0x5a>
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e2      	bne.n	80012f2 <__gedf2+0x46>
 800132c:	464c      	mov	r4, r9
 800132e:	4326      	orrs	r6, r4
 8001330:	d1df      	bne.n	80012f2 <__gedf2+0x46>
 8001332:	e7e0      	b.n	80012f6 <__gedf2+0x4a>
 8001334:	2000      	movs	r0, #0
 8001336:	2c00      	cmp	r4, #0
 8001338:	d0e1      	beq.n	80012fe <__gedf2+0x52>
 800133a:	e7dc      	b.n	80012f6 <__gedf2+0x4a>
 800133c:	429a      	cmp	r2, r3
 800133e:	dc0a      	bgt.n	8001356 <__gedf2+0xaa>
 8001340:	dbe8      	blt.n	8001314 <__gedf2+0x68>
 8001342:	454f      	cmp	r7, r9
 8001344:	d8d7      	bhi.n	80012f6 <__gedf2+0x4a>
 8001346:	d00e      	beq.n	8001366 <__gedf2+0xba>
 8001348:	2000      	movs	r0, #0
 800134a:	454f      	cmp	r7, r9
 800134c:	d2d7      	bcs.n	80012fe <__gedf2+0x52>
 800134e:	2900      	cmp	r1, #0
 8001350:	d0e2      	beq.n	8001318 <__gedf2+0x6c>
 8001352:	0008      	movs	r0, r1
 8001354:	e7d3      	b.n	80012fe <__gedf2+0x52>
 8001356:	4243      	negs	r3, r0
 8001358:	4158      	adcs	r0, r3
 800135a:	0040      	lsls	r0, r0, #1
 800135c:	3801      	subs	r0, #1
 800135e:	e7ce      	b.n	80012fe <__gedf2+0x52>
 8001360:	2002      	movs	r0, #2
 8001362:	4240      	negs	r0, r0
 8001364:	e7cb      	b.n	80012fe <__gedf2+0x52>
 8001366:	45c4      	cmp	ip, r8
 8001368:	d8c5      	bhi.n	80012f6 <__gedf2+0x4a>
 800136a:	2000      	movs	r0, #0
 800136c:	45c4      	cmp	ip, r8
 800136e:	d2c6      	bcs.n	80012fe <__gedf2+0x52>
 8001370:	e7ed      	b.n	800134e <__gedf2+0xa2>
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	000007ff 	.word	0x000007ff

08001378 <__ledf2>:
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	4647      	mov	r7, r8
 800137c:	46ce      	mov	lr, r9
 800137e:	0004      	movs	r4, r0
 8001380:	0018      	movs	r0, r3
 8001382:	0016      	movs	r6, r2
 8001384:	031b      	lsls	r3, r3, #12
 8001386:	0b1b      	lsrs	r3, r3, #12
 8001388:	4d2c      	ldr	r5, [pc, #176]	; (800143c <__ledf2+0xc4>)
 800138a:	004a      	lsls	r2, r1, #1
 800138c:	4699      	mov	r9, r3
 800138e:	b580      	push	{r7, lr}
 8001390:	0043      	lsls	r3, r0, #1
 8001392:	030f      	lsls	r7, r1, #12
 8001394:	46a4      	mov	ip, r4
 8001396:	46b0      	mov	r8, r6
 8001398:	0b3f      	lsrs	r7, r7, #12
 800139a:	0d52      	lsrs	r2, r2, #21
 800139c:	0fc9      	lsrs	r1, r1, #31
 800139e:	0d5b      	lsrs	r3, r3, #21
 80013a0:	0fc0      	lsrs	r0, r0, #31
 80013a2:	42aa      	cmp	r2, r5
 80013a4:	d00d      	beq.n	80013c2 <__ledf2+0x4a>
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	d010      	beq.n	80013cc <__ledf2+0x54>
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	d127      	bne.n	80013fe <__ledf2+0x86>
 80013ae:	433c      	orrs	r4, r7
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d111      	bne.n	80013d8 <__ledf2+0x60>
 80013b4:	464d      	mov	r5, r9
 80013b6:	432e      	orrs	r6, r5
 80013b8:	d10e      	bne.n	80013d8 <__ledf2+0x60>
 80013ba:	2000      	movs	r0, #0
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d015      	beq.n	80013ec <__ledf2+0x74>
 80013c0:	e00e      	b.n	80013e0 <__ledf2+0x68>
 80013c2:	003d      	movs	r5, r7
 80013c4:	4325      	orrs	r5, r4
 80013c6:	d110      	bne.n	80013ea <__ledf2+0x72>
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d118      	bne.n	80013fe <__ledf2+0x86>
 80013cc:	464d      	mov	r5, r9
 80013ce:	432e      	orrs	r6, r5
 80013d0:	d10b      	bne.n	80013ea <__ledf2+0x72>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d102      	bne.n	80013dc <__ledf2+0x64>
 80013d6:	433c      	orrs	r4, r7
 80013d8:	2c00      	cmp	r4, #0
 80013da:	d00b      	beq.n	80013f4 <__ledf2+0x7c>
 80013dc:	4281      	cmp	r1, r0
 80013de:	d014      	beq.n	800140a <__ledf2+0x92>
 80013e0:	2002      	movs	r0, #2
 80013e2:	3901      	subs	r1, #1
 80013e4:	4008      	ands	r0, r1
 80013e6:	3801      	subs	r0, #1
 80013e8:	e000      	b.n	80013ec <__ledf2+0x74>
 80013ea:	2002      	movs	r0, #2
 80013ec:	bcc0      	pop	{r6, r7}
 80013ee:	46b9      	mov	r9, r7
 80013f0:	46b0      	mov	r8, r6
 80013f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f4:	2800      	cmp	r0, #0
 80013f6:	d1f9      	bne.n	80013ec <__ledf2+0x74>
 80013f8:	2001      	movs	r0, #1
 80013fa:	4240      	negs	r0, r0
 80013fc:	e7f6      	b.n	80013ec <__ledf2+0x74>
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1ec      	bne.n	80013dc <__ledf2+0x64>
 8001402:	464c      	mov	r4, r9
 8001404:	4326      	orrs	r6, r4
 8001406:	d1e9      	bne.n	80013dc <__ledf2+0x64>
 8001408:	e7ea      	b.n	80013e0 <__ledf2+0x68>
 800140a:	429a      	cmp	r2, r3
 800140c:	dd04      	ble.n	8001418 <__ledf2+0xa0>
 800140e:	4243      	negs	r3, r0
 8001410:	4158      	adcs	r0, r3
 8001412:	0040      	lsls	r0, r0, #1
 8001414:	3801      	subs	r0, #1
 8001416:	e7e9      	b.n	80013ec <__ledf2+0x74>
 8001418:	429a      	cmp	r2, r3
 800141a:	dbeb      	blt.n	80013f4 <__ledf2+0x7c>
 800141c:	454f      	cmp	r7, r9
 800141e:	d8df      	bhi.n	80013e0 <__ledf2+0x68>
 8001420:	d006      	beq.n	8001430 <__ledf2+0xb8>
 8001422:	2000      	movs	r0, #0
 8001424:	454f      	cmp	r7, r9
 8001426:	d2e1      	bcs.n	80013ec <__ledf2+0x74>
 8001428:	2900      	cmp	r1, #0
 800142a:	d0e5      	beq.n	80013f8 <__ledf2+0x80>
 800142c:	0008      	movs	r0, r1
 800142e:	e7dd      	b.n	80013ec <__ledf2+0x74>
 8001430:	45c4      	cmp	ip, r8
 8001432:	d8d5      	bhi.n	80013e0 <__ledf2+0x68>
 8001434:	2000      	movs	r0, #0
 8001436:	45c4      	cmp	ip, r8
 8001438:	d2d8      	bcs.n	80013ec <__ledf2+0x74>
 800143a:	e7f5      	b.n	8001428 <__ledf2+0xb0>
 800143c:	000007ff 	.word	0x000007ff

08001440 <send_to_lcd.constprop.0>:
/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8001440:	2090      	movs	r0, #144	; 0x90
void send_to_lcd (char data, int rs)
 8001442:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8001444:	2200      	movs	r2, #0
 8001446:	2101      	movs	r1, #1
 8001448:	05c0      	lsls	r0, r0, #23
 800144a:	f000 fd4d 	bl	8001ee8 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800144e:	2090      	movs	r0, #144	; 0x90
 8001450:	2200      	movs	r2, #0
 8001452:	2140      	movs	r1, #64	; 0x40
 8001454:	05c0      	lsls	r0, r0, #23
 8001456:	f000 fd47 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 800145a:	2090      	movs	r0, #144	; 0x90
 800145c:	2200      	movs	r2, #0
 800145e:	2120      	movs	r1, #32
 8001460:	05c0      	lsls	r0, r0, #23
 8001462:	f000 fd41 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8001466:	2090      	movs	r0, #144	; 0x90
 8001468:	2200      	movs	r2, #0
 800146a:	2110      	movs	r1, #16
 800146c:	05c0      	lsls	r0, r0, #23
 800146e:	f000 fd3b 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8001472:	2090      	movs	r0, #144	; 0x90
 8001474:	2200      	movs	r2, #0
 8001476:	2108      	movs	r1, #8
 8001478:	05c0      	lsls	r0, r0, #23
 800147a:	f000 fd35 	bl	8001ee8 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 800147e:	2090      	movs	r0, #144	; 0x90
 8001480:	2201      	movs	r2, #1
 8001482:	2104      	movs	r1, #4
 8001484:	05c0      	lsls	r0, r0, #23
 8001486:	f000 fd2f 	bl	8001ee8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800148a:	2300      	movs	r3, #0
 800148c:	4c09      	ldr	r4, [pc, #36]	; (80014b4 <send_to_lcd.constprop.0+0x74>)
 800148e:	6822      	ldr	r2, [r4, #0]
 8001490:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8001492:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001494:	2b13      	cmp	r3, #19
 8001496:	d9fc      	bls.n	8001492 <send_to_lcd.constprop.0+0x52>
	delay (20);
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8001498:	2090      	movs	r0, #144	; 0x90
 800149a:	2200      	movs	r2, #0
 800149c:	2104      	movs	r1, #4
 800149e:	05c0      	lsls	r0, r0, #23
 80014a0:	f000 fd22 	bl	8001ee8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80014a4:	2300      	movs	r3, #0
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80014aa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80014ac:	2b13      	cmp	r3, #19
 80014ae:	d9fc      	bls.n	80014aa <send_to_lcd.constprop.0+0x6a>
	delay (20);
}
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	2000003c 	.word	0x2000003c

080014b8 <send_to_lcd.constprop.1>:
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80014b8:	2090      	movs	r0, #144	; 0x90
void send_to_lcd (char data, int rs)
 80014ba:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80014bc:	2200      	movs	r2, #0
 80014be:	2101      	movs	r1, #1
 80014c0:	05c0      	lsls	r0, r0, #23
 80014c2:	f000 fd11 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80014c6:	2090      	movs	r0, #144	; 0x90
 80014c8:	2200      	movs	r2, #0
 80014ca:	2140      	movs	r1, #64	; 0x40
 80014cc:	05c0      	lsls	r0, r0, #23
 80014ce:	f000 fd0b 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80014d2:	2090      	movs	r0, #144	; 0x90
 80014d4:	2200      	movs	r2, #0
 80014d6:	2120      	movs	r1, #32
 80014d8:	05c0      	lsls	r0, r0, #23
 80014da:	f000 fd05 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80014de:	2090      	movs	r0, #144	; 0x90
 80014e0:	2201      	movs	r2, #1
 80014e2:	2110      	movs	r1, #16
 80014e4:	05c0      	lsls	r0, r0, #23
 80014e6:	f000 fcff 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80014ea:	2090      	movs	r0, #144	; 0x90
 80014ec:	2201      	movs	r2, #1
 80014ee:	2108      	movs	r1, #8
 80014f0:	05c0      	lsls	r0, r0, #23
 80014f2:	f000 fcf9 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80014f6:	2090      	movs	r0, #144	; 0x90
 80014f8:	2201      	movs	r2, #1
 80014fa:	2104      	movs	r1, #4
 80014fc:	05c0      	lsls	r0, r0, #23
 80014fe:	f000 fcf3 	bl	8001ee8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8001502:	2300      	movs	r3, #0
 8001504:	4c09      	ldr	r4, [pc, #36]	; (800152c <send_to_lcd.constprop.1+0x74>)
 8001506:	6822      	ldr	r2, [r4, #0]
 8001508:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800150a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800150c:	2b13      	cmp	r3, #19
 800150e:	d9fc      	bls.n	800150a <send_to_lcd.constprop.1+0x52>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8001510:	2090      	movs	r0, #144	; 0x90
 8001512:	2200      	movs	r2, #0
 8001514:	2104      	movs	r1, #4
 8001516:	05c0      	lsls	r0, r0, #23
 8001518:	f000 fce6 	bl	8001ee8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800151c:	2300      	movs	r3, #0
 800151e:	6822      	ldr	r2, [r4, #0]
 8001520:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8001522:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001524:	2b13      	cmp	r3, #19
 8001526:	d9fc      	bls.n	8001522 <send_to_lcd.constprop.1+0x6a>
}
 8001528:	bd10      	pop	{r4, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	2000003c 	.word	0x2000003c

08001530 <send_to_lcd>:
{
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8001534:	2090      	movs	r0, #144	; 0x90
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	05c0      	lsls	r0, r0, #23
 800153a:	2101      	movs	r1, #1
 800153c:	f000 fcd4 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8001540:	2401      	movs	r4, #1
 8001542:	2090      	movs	r0, #144	; 0x90
 8001544:	08ea      	lsrs	r2, r5, #3
 8001546:	4022      	ands	r2, r4
 8001548:	2140      	movs	r1, #64	; 0x40
 800154a:	05c0      	lsls	r0, r0, #23
 800154c:	f000 fccc 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8001550:	2090      	movs	r0, #144	; 0x90
 8001552:	08aa      	lsrs	r2, r5, #2
 8001554:	4022      	ands	r2, r4
 8001556:	2120      	movs	r1, #32
 8001558:	05c0      	lsls	r0, r0, #23
 800155a:	f000 fcc5 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800155e:	2090      	movs	r0, #144	; 0x90
 8001560:	086a      	lsrs	r2, r5, #1
 8001562:	4022      	ands	r2, r4
 8001564:	2110      	movs	r1, #16
 8001566:	05c0      	lsls	r0, r0, #23
 8001568:	f000 fcbe 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 800156c:	0022      	movs	r2, r4
 800156e:	2090      	movs	r0, #144	; 0x90
 8001570:	2108      	movs	r1, #8
 8001572:	402a      	ands	r2, r5
 8001574:	05c0      	lsls	r0, r0, #23
 8001576:	f000 fcb7 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 800157a:	2090      	movs	r0, #144	; 0x90
 800157c:	2201      	movs	r2, #1
 800157e:	2104      	movs	r1, #4
 8001580:	05c0      	lsls	r0, r0, #23
 8001582:	f000 fcb1 	bl	8001ee8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8001586:	2300      	movs	r3, #0
 8001588:	4c09      	ldr	r4, [pc, #36]	; (80015b0 <send_to_lcd+0x80>)
 800158a:	6822      	ldr	r2, [r4, #0]
 800158c:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800158e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001590:	2b13      	cmp	r3, #19
 8001592:	d9fc      	bls.n	800158e <send_to_lcd+0x5e>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8001594:	2090      	movs	r0, #144	; 0x90
 8001596:	2200      	movs	r2, #0
 8001598:	2104      	movs	r1, #4
 800159a:	05c0      	lsls	r0, r0, #23
 800159c:	f000 fca4 	bl	8001ee8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80015a0:	2300      	movs	r3, #0
 80015a2:	6822      	ldr	r2, [r4, #0]
 80015a4:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80015a6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80015a8:	2b13      	cmp	r3, #19
 80015aa:	d9fc      	bls.n	80015a6 <send_to_lcd+0x76>
}
 80015ac:	bd70      	pop	{r4, r5, r6, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	2000003c 	.word	0x2000003c

080015b4 <lcd_xy>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_xy(int row, int col)
{
 80015b4:	b510      	push	{r4, lr}
    switch (row)
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d00e      	beq.n	80015d8 <lcd_xy+0x24>
 80015ba:	2801      	cmp	r0, #1
 80015bc:	d101      	bne.n	80015c2 <lcd_xy+0xe>
    {
        case 0:
            col |= 0x80;
            break;
        case 1:
            col |= 0xC0;
 80015be:	23c0      	movs	r3, #192	; 0xc0
 80015c0:	4319      	orrs	r1, r3
            break;
    }

    lcd_send_cmd (col);
 80015c2:	b2cc      	uxtb	r4, r1
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80015c4:	0920      	lsrs	r0, r4, #4
 80015c6:	2100      	movs	r1, #0
 80015c8:	f7ff ffb2 	bl	8001530 <send_to_lcd>
	send_to_lcd(datatosend, 0);
 80015cc:	200f      	movs	r0, #15
 80015ce:	2100      	movs	r1, #0
 80015d0:	4020      	ands	r0, r4
 80015d2:	f7ff ffad 	bl	8001530 <send_to_lcd>
}
 80015d6:	bd10      	pop	{r4, pc}
            col |= 0x80;
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	4319      	orrs	r1, r3
            break;
 80015dc:	e7f1      	b.n	80015c2 <lcd_xy+0xe>
 80015de:	46c0      	nop			; (mov r8, r8)

080015e0 <lcd_init>:


void lcd_init (void)
{
 80015e0:	b510      	push	{r4, lr}
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80015e2:	2032      	movs	r0, #50	; 0x32
 80015e4:	f000 fb0a 	bl	8001bfc <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80015e8:	f7ff ff66 	bl	80014b8 <send_to_lcd.constprop.1>
	send_to_lcd(datatosend, 0);
 80015ec:	f7ff ff28 	bl	8001440 <send_to_lcd.constprop.0>
	lcd_send_cmd (0x30);
	HAL_Delay(5);  // wait for >4.1ms
 80015f0:	2005      	movs	r0, #5
 80015f2:	f000 fb03 	bl	8001bfc <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80015f6:	f7ff ff5f 	bl	80014b8 <send_to_lcd.constprop.1>
	send_to_lcd(datatosend, 0);
 80015fa:	f7ff ff21 	bl	8001440 <send_to_lcd.constprop.0>
	lcd_send_cmd (0x30);
	HAL_Delay(1);  // wait for >100us
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 fafc 	bl	8001bfc <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8001604:	f7ff ff58 	bl	80014b8 <send_to_lcd.constprop.1>
	send_to_lcd(datatosend, 0);
 8001608:	f7ff ff1a 	bl	8001440 <send_to_lcd.constprop.0>
	lcd_send_cmd (0x30);
	HAL_Delay(10);
 800160c:	200a      	movs	r0, #10
 800160e:	f000 faf5 	bl	8001bfc <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8001612:	2100      	movs	r1, #0
 8001614:	2002      	movs	r0, #2
 8001616:	f7ff ff8b 	bl	8001530 <send_to_lcd>
	send_to_lcd(datatosend, 0);
 800161a:	f7ff ff11 	bl	8001440 <send_to_lcd.constprop.0>
	lcd_send_cmd (0x20);  // 4bit mode
	HAL_Delay(10);
 800161e:	200a      	movs	r0, #10
 8001620:	f000 faec 	bl	8001bfc <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8001624:	2100      	movs	r1, #0
 8001626:	2002      	movs	r0, #2
 8001628:	f7ff ff82 	bl	8001530 <send_to_lcd>
	send_to_lcd(datatosend, 0);
 800162c:	2100      	movs	r1, #0
 800162e:	2008      	movs	r0, #8
 8001630:	f7ff ff7e 	bl	8001530 <send_to_lcd>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	HAL_Delay(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f000 fae1 	bl	8001bfc <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 800163a:	f7ff ff01 	bl	8001440 <send_to_lcd.constprop.0>
	send_to_lcd(datatosend, 0);
 800163e:	2100      	movs	r1, #0
 8001640:	2008      	movs	r0, #8
 8001642:	f7ff ff75 	bl	8001530 <send_to_lcd>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
	HAL_Delay(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f000 fad8 	bl	8001bfc <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 800164c:	f7ff fef8 	bl	8001440 <send_to_lcd.constprop.0>
	send_to_lcd(datatosend, 0);
 8001650:	2100      	movs	r1, #0
 8001652:	2001      	movs	r0, #1
 8001654:	f7ff ff6c 	bl	8001530 <send_to_lcd>
	lcd_send_cmd (0x01);  // clear display
	HAL_Delay(1);
 8001658:	2001      	movs	r0, #1
 800165a:	f000 facf 	bl	8001bfc <HAL_Delay>
	HAL_Delay(1);
 800165e:	2001      	movs	r0, #1
 8001660:	f000 facc 	bl	8001bfc <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8001664:	f7ff feec 	bl	8001440 <send_to_lcd.constprop.0>
	send_to_lcd(datatosend, 0);
 8001668:	2100      	movs	r1, #0
 800166a:	2006      	movs	r0, #6
 800166c:	f7ff ff60 	bl	8001530 <send_to_lcd>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
 8001670:	2001      	movs	r0, #1
 8001672:	f000 fac3 	bl	8001bfc <HAL_Delay>
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8001676:	f7ff fee3 	bl	8001440 <send_to_lcd.constprop.0>
	send_to_lcd(datatosend, 0);
 800167a:	2100      	movs	r1, #0
 800167c:	200c      	movs	r0, #12
 800167e:	f7ff ff57 	bl	8001530 <send_to_lcd>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}
 8001682:	bd10      	pop	{r4, pc}

08001684 <LCD_String>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**************** Below Function Send String ,Int and Float to LCD*************************************** */

void LCD_String (char *str)
{
 8001684:	b570      	push	{r4, r5, r6, lr}
	while (*str) lcd_send_data (*str++);
 8001686:	7804      	ldrb	r4, [r0, #0]
{
 8001688:	0005      	movs	r5, r0
	while (*str) lcd_send_data (*str++);
 800168a:	2c00      	cmp	r4, #0
 800168c:	d00d      	beq.n	80016aa <LCD_String+0x26>
	datatosend = ((data)&0x0f);
 800168e:	260f      	movs	r6, #15
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8001690:	0920      	lsrs	r0, r4, #4
 8001692:	2101      	movs	r1, #1
 8001694:	f7ff ff4c 	bl	8001530 <send_to_lcd>
	send_to_lcd(datatosend, 1);
 8001698:	0020      	movs	r0, r4
 800169a:	2101      	movs	r1, #1
	while (*str) lcd_send_data (*str++);
 800169c:	3501      	adds	r5, #1
	send_to_lcd(datatosend, 1);
 800169e:	4030      	ands	r0, r6
 80016a0:	f7ff ff46 	bl	8001530 <send_to_lcd>
	while (*str) lcd_send_data (*str++);
 80016a4:	782c      	ldrb	r4, [r5, #0]
 80016a6:	2c00      	cmp	r4, #0
 80016a8:	d1f2      	bne.n	8001690 <LCD_String+0xc>
}
 80016aa:	bd70      	pop	{r4, r5, r6, pc}

080016ac <LCD_intValue>:



void LCD_intValue(int value){
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	4647      	mov	r7, r8
 80016b0:	46ce      	mov	lr, r9
 80016b2:	b580      	push	{r7, lr}
 80016b4:	4680      	mov	r8, r0
  if (value == 0) {
 80016b6:	0003      	movs	r3, r0
void LCD_intValue(int value){
 80016b8:	b087      	sub	sp, #28
  if (value == 0) {
 80016ba:	2800      	cmp	r0, #0
 80016bc:	d11e      	bne.n	80016fc <LCD_intValue+0x50>
    str[i++] = '0';
 80016be:	2430      	movs	r4, #48	; 0x30
 80016c0:	ad01      	add	r5, sp, #4
 80016c2:	3330      	adds	r3, #48	; 0x30
 80016c4:	802b      	strh	r3, [r5, #0]
	datatosend = ((data)&0x0f);
 80016c6:	260f      	movs	r6, #15
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80016c8:	0920      	lsrs	r0, r4, #4
 80016ca:	2101      	movs	r1, #1
 80016cc:	f7ff ff30 	bl	8001530 <send_to_lcd>
	send_to_lcd(datatosend, 1);
 80016d0:	0020      	movs	r0, r4
 80016d2:	2101      	movs	r1, #1
	while (*str) lcd_send_data (*str++);
 80016d4:	3501      	adds	r5, #1
	send_to_lcd(datatosend, 1);
 80016d6:	4030      	ands	r0, r6
 80016d8:	f7ff ff2a 	bl	8001530 <send_to_lcd>
	while (*str) lcd_send_data (*str++);
 80016dc:	782c      	ldrb	r4, [r5, #0]
 80016de:	2c00      	cmp	r4, #0
 80016e0:	d1f2      	bne.n	80016c8 <LCD_intValue+0x1c>
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80016e2:	2101      	movs	r1, #1
 80016e4:	2002      	movs	r0, #2
 80016e6:	f7ff ff23 	bl	8001530 <send_to_lcd>
	send_to_lcd(datatosend, 1);
 80016ea:	2101      	movs	r1, #1
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff ff1f 	bl	8001530 <send_to_lcd>
	char str[20];
	int_to_str(value,  str);
	LCD_String(str);
	LCD_String(" ");
}
 80016f2:	b007      	add	sp, #28
 80016f4:	bcc0      	pop	{r6, r7}
 80016f6:	46b9      	mov	r9, r7
 80016f8:	46b0      	mov	r8, r6
 80016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int i = 0;
 80016fc:	2700      	movs	r7, #0
    value = abs(value);
 80016fe:	17c3      	asrs	r3, r0, #31
 8001700:	18c6      	adds	r6, r0, r3
 8001702:	405e      	eors	r6, r3
    while (value > 0) {
 8001704:	ad01      	add	r5, sp, #4
      str[i++] = (value % 10) + '0';
 8001706:	2303      	movs	r3, #3
 8001708:	446b      	add	r3, sp
 800170a:	4699      	mov	r9, r3
 800170c:	0030      	movs	r0, r6
 800170e:	003c      	movs	r4, r7
 8001710:	210a      	movs	r1, #10
 8001712:	3701      	adds	r7, #1
 8001714:	f7fe fe68 	bl	80003e8 <__aeabi_idivmod>
 8001718:	44b9      	add	r9, r7
 800171a:	464b      	mov	r3, r9
 800171c:	3130      	adds	r1, #48	; 0x30
      value /= 10;
 800171e:	0030      	movs	r0, r6
      str[i++] = (value % 10) + '0';
 8001720:	7019      	strb	r1, [r3, #0]
      value /= 10;
 8001722:	210a      	movs	r1, #10
 8001724:	f7fe fd7a 	bl	800021c <__divsi3>
 8001728:	1e06      	subs	r6, r0, #0
    while (value > 0) {
 800172a:	d1ec      	bne.n	8001706 <LCD_intValue+0x5a>
    if (isNegative) {
 800172c:	4643      	mov	r3, r8
 800172e:	2b00      	cmp	r3, #0
 8001730:	db13      	blt.n	800175a <LCD_intValue+0xae>
  str[i] = '\0';
 8001732:	55e8      	strb	r0, [r5, r7]
  while (start < end) {
 8001734:	2c00      	cmp	r4, #0
 8001736:	d00c      	beq.n	8001752 <LCD_intValue+0xa6>
 8001738:	002a      	movs	r2, r5
 800173a:	0026      	movs	r6, r4
 800173c:	192b      	adds	r3, r5, r4
    char temp = str[start];
 800173e:	7811      	ldrb	r1, [r2, #0]
    str[start] = str[end];
 8001740:	7818      	ldrb	r0, [r3, #0]
    end--;
 8001742:	3c01      	subs	r4, #1
    str[start] = str[end];
 8001744:	7010      	strb	r0, [r2, #0]
  while (start < end) {
 8001746:	3b01      	subs	r3, #1
    str[end] = temp;
 8001748:	7059      	strb	r1, [r3, #1]
  while (start < end) {
 800174a:	3201      	adds	r2, #1
 800174c:	1b31      	subs	r1, r6, r4
 800174e:	428c      	cmp	r4, r1
 8001750:	dcf5      	bgt.n	800173e <LCD_intValue+0x92>
	while (*str) lcd_send_data (*str++);
 8001752:	782c      	ldrb	r4, [r5, #0]
 8001754:	2c00      	cmp	r4, #0
 8001756:	d1b6      	bne.n	80016c6 <LCD_intValue+0x1a>
 8001758:	e7c3      	b.n	80016e2 <LCD_intValue+0x36>
      str[i++] = '-';
 800175a:	232d      	movs	r3, #45	; 0x2d
 800175c:	55eb      	strb	r3, [r5, r7]
  str[i] = '\0';
 800175e:	466b      	mov	r3, sp
 8001760:	3306      	adds	r3, #6
 8001762:	5518      	strb	r0, [r3, r4]
      str[i++] = (value % 10) + '0';
 8001764:	003c      	movs	r4, r7
 8001766:	e7e7      	b.n	8001738 <LCD_intValue+0x8c>

08001768 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOB

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001768:	b570      	push	{r4, r5, r6, lr}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
 800176a:	7f03      	ldrb	r3, [r0, #28]
{
 800176c:	0004      	movs	r4, r0
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
 800176e:	2b02      	cmp	r3, #2
 8001770:	d000      	beq.n	8001774 <HAL_TIM_IC_CaptureCallback+0xc>
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
		}
	}
}
 8001772:	bd70      	pop	{r4, r5, r6, pc}
		if (Is_First_Captured==0) // if the first value is not captured
 8001774:	4d27      	ldr	r5, [pc, #156]	; (8001814 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001776:	782b      	ldrb	r3, [r5, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d02e      	beq.n	80017da <HAL_TIM_IC_CaptureCallback+0x72>
		else if (Is_First_Captured==1)   // if the first is already captured
 800177c:	2b01      	cmp	r3, #1
 800177e:	d1f8      	bne.n	8001772 <HAL_TIM_IC_CaptureCallback+0xa>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8001780:	2104      	movs	r1, #4
 8001782:	f001 f9c5 	bl	8002b10 <HAL_TIM_ReadCapturedValue>
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001786:	2200      	movs	r2, #0
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8001788:	4b23      	ldr	r3, [pc, #140]	; (8001818 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800178a:	6018      	str	r0, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4298      	cmp	r0, r3
 8001796:	d931      	bls.n	80017fc <HAL_TIM_IC_CaptureCallback+0x94>
				Difference = IC_Val2-IC_Val1;
 8001798:	1ac0      	subs	r0, r0, r3
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800179c:	6018      	str	r0, [r3, #0]
			Distance = Difference * .034/2;
 800179e:	f7ff fcc1 	bl	8001124 <__aeabi_ui2d>
 80017a2:	4a20      	ldr	r2, [pc, #128]	; (8001824 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80017a6:	f7fe fe43 	bl	8000430 <__aeabi_dmul>
 80017aa:	2200      	movs	r2, #0
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <HAL_TIM_IC_CaptureCallback+0xc4>)
 80017ae:	f7fe fe3f 	bl	8000430 <__aeabi_dmul>
 80017b2:	f7fe fe1f 	bl	80003f4 <__aeabi_d2uiz>
			Is_First_Captured = 0; // set it back to false
 80017b6:	2300      	movs	r3, #0
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80017b8:	21a0      	movs	r1, #160	; 0xa0
			Distance = Difference * .034/2;
 80017ba:	4e1d      	ldr	r6, [pc, #116]	; (8001830 <HAL_TIM_IC_CaptureCallback+0xc8>)
			Is_First_Captured = 0; // set it back to false
 80017bc:	702b      	strb	r3, [r5, #0]
			Distance = Difference * .034/2;
 80017be:	7030      	strb	r0, [r6, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	6a1a      	ldr	r2, [r3, #32]
 80017c4:	438a      	bics	r2, r1
 80017c6:	621a      	str	r2, [r3, #32]
 80017c8:	6a1a      	ldr	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 80017ca:	399c      	subs	r1, #156	; 0x9c
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80017cc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68d3      	ldr	r3, [r2, #12]
 80017d4:	438b      	bics	r3, r1
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	e7cb      	b.n	8001772 <HAL_TIM_IC_CaptureCallback+0xa>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 80017da:	2104      	movs	r1, #4
 80017dc:	f001 f998 	bl	8002b10 <HAL_TIM_ReadCapturedValue>
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_TIM_IC_CaptureCallback+0xb4>)
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80017e2:	21a0      	movs	r1, #160	; 0xa0
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 80017e4:	6018      	str	r0, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80017e6:	2301      	movs	r3, #1
 80017e8:	702b      	strb	r3, [r5, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	438a      	bics	r2, r1
 80017f0:	621a      	str	r2, [r3, #32]
 80017f2:	6a1a      	ldr	r2, [r3, #32]
 80017f4:	3980      	subs	r1, #128	; 0x80
 80017f6:	430a      	orrs	r2, r1
 80017f8:	621a      	str	r2, [r3, #32]
 80017fa:	e7ba      	b.n	8001772 <HAL_TIM_IC_CaptureCallback+0xa>
			else if (IC_Val1 > IC_Val2)
 80017fc:	4298      	cmp	r0, r3
 80017fe:	d302      	bcc.n	8001806 <HAL_TIM_IC_CaptureCallback+0x9e>
			Distance = Difference * .034/2;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	e7cb      	b.n	800179e <HAL_TIM_IC_CaptureCallback+0x36>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001806:	1ac0      	subs	r0, r0, r3
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800180a:	469c      	mov	ip, r3
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800180e:	4460      	add	r0, ip
 8001810:	6018      	str	r0, [r3, #0]
 8001812:	e7c4      	b.n	800179e <HAL_TIM_IC_CaptureCallback+0x36>
 8001814:	20000038 	.word	0x20000038
 8001818:	20000034 	.word	0x20000034
 800181c:	20000030 	.word	0x20000030
 8001820:	20000028 	.word	0x20000028
 8001824:	b020c49c 	.word	0xb020c49c
 8001828:	3fa16872 	.word	0x3fa16872
 800182c:	3fe00000 	.word	0x3fe00000
 8001830:	2000002c 	.word	0x2000002c
 8001834:	2000003c 	.word	0x2000003c
 8001838:	0000ffff 	.word	0x0000ffff

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b500      	push	{lr}
 800183e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001840:	2228      	movs	r2, #40	; 0x28
 8001842:	2100      	movs	r1, #0
 8001844:	a806      	add	r0, sp, #24
 8001846:	f001 fa5d 	bl	8002d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184a:	2210      	movs	r2, #16
 800184c:	2100      	movs	r1, #0
 800184e:	4668      	mov	r0, sp
 8001850:	f001 fa58 	bl	8002d04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001854:	2201      	movs	r2, #1
 8001856:	2301      	movs	r3, #1
 8001858:	9204      	str	r2, [sp, #16]
 800185a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	2202      	movs	r2, #2
 8001860:	025b      	lsls	r3, r3, #9
 8001862:	920c      	str	r2, [sp, #48]	; 0x30
 8001864:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001866:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001868:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800186a:	02db      	lsls	r3, r3, #11
 800186c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186e:	f000 fb41 	bl	8001ef4 <HAL_RCC_OscConfig>
 8001872:	2800      	cmp	r0, #0
 8001874:	d001      	beq.n	800187a <SystemClock_Config+0x3e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001876:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001878:	e7fe      	b.n	8001878 <SystemClock_Config+0x3c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001880:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001882:	3b05      	subs	r3, #5
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001884:	2101      	movs	r1, #1
 8001886:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001888:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800188a:	f000 fd8d 	bl	80023a8 <HAL_RCC_ClockConfig>
 800188e:	2800      	cmp	r0, #0
 8001890:	d001      	beq.n	8001896 <SystemClock_Config+0x5a>
 8001892:	b672      	cpsid	i
  while (1)
 8001894:	e7fe      	b.n	8001894 <SystemClock_Config+0x58>
}
 8001896:	b011      	add	sp, #68	; 0x44
 8001898:	bd00      	pop	{pc}
 800189a:	46c0      	nop			; (mov r8, r8)

0800189c <main>:
{
 800189c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189e:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80018a0:	f000 f98a 	bl	8001bb8 <HAL_Init>
  SystemClock_Config();
 80018a4:	f7ff ffca 	bl	800183c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	2214      	movs	r2, #20
 80018aa:	2100      	movs	r1, #0
 80018ac:	a80b      	add	r0, sp, #44	; 0x2c
 80018ae:	f001 fa29 	bl	8002d04 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <main+0x190>)
 80018b6:	03c9      	lsls	r1, r1, #15
 80018b8:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80018ba:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018bc:	430a      	orrs	r2, r1
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80018c2:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c4:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c8:	9201      	str	r2, [sp, #4]
 80018ca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	0289      	lsls	r1, r1, #10
 80018d0:	430a      	orrs	r2, r1
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	9202      	str	r2, [sp, #8]
 80018de:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	02c9      	lsls	r1, r1, #11
 80018e4:	430a      	orrs	r2, r1
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80018ea:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ec:	400b      	ands	r3, r1
 80018ee:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80018f0:	217f      	movs	r1, #127	; 0x7f
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80018f4:	f000 faf8 	bl	8001ee8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2102      	movs	r1, #2
 80018fc:	484c      	ldr	r0, [pc, #304]	; (8001a30 <main+0x194>)
 80018fe:	f000 faf3 	bl	8001ee8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D4_Pin
 8001904:	237f      	movs	r3, #127	; 0x7f
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	a90b      	add	r1, sp, #44	; 0x2c
 800190a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D4_Pin
 800190c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	f000 f9dc 	bl	8001cd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001918:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	4845      	ldr	r0, [pc, #276]	; (8001a30 <main+0x194>)
 800191c:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800191e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f000 f9d3 	bl	8001cd0 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192a:	2210      	movs	r2, #16
 800192c:	2100      	movs	r1, #0
 800192e:	a807      	add	r0, sp, #28
 8001930:	f001 f9e8 	bl	8002d04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	2208      	movs	r2, #8
 8001936:	2100      	movs	r1, #0
 8001938:	a804      	add	r0, sp, #16
 800193a:	f001 f9e3 	bl	8002d04 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800193e:	2210      	movs	r2, #16
 8001940:	2100      	movs	r1, #0
 8001942:	a80b      	add	r0, sp, #44	; 0x2c
 8001944:	f001 f9de 	bl	8002d04 <memset>
  htim1.Instance = TIM1;
 8001948:	4c3a      	ldr	r4, [pc, #232]	; (8001a34 <main+0x198>)
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <main+0x19c>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800194c:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 800194e:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 48-1;
 8001950:	232f      	movs	r3, #47	; 0x2f
 8001952:	6063      	str	r3, [r4, #4]
  htim1.Init.Period = 65535;
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <main+0x1a0>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	60a5      	str	r5, [r4, #8]
  htim1.Init.Period = 65535;
 8001958:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800195c:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195e:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001960:	f000 fdde 	bl	8002520 <HAL_TIM_Base_Init>
 8001964:	2800      	cmp	r0, #0
 8001966:	d001      	beq.n	800196c <main+0xd0>
 8001968:	b672      	cpsid	i
  while (1)
 800196a:	e7fe      	b.n	800196a <main+0xce>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196c:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800196e:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001972:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001974:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001976:	f001 f813 	bl	80029a0 <HAL_TIM_ConfigClockSource>
 800197a:	2800      	cmp	r0, #0
 800197c:	d001      	beq.n	8001982 <main+0xe6>
 800197e:	b672      	cpsid	i
  while (1)
 8001980:	e7fe      	b.n	8001980 <main+0xe4>
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001982:	0020      	movs	r0, r4
 8001984:	f000 fe62 	bl	800264c <HAL_TIM_IC_Init>
 8001988:	2800      	cmp	r0, #0
 800198a:	d001      	beq.n	8001990 <main+0xf4>
 800198c:	b672      	cpsid	i
  while (1)
 800198e:	e7fe      	b.n	800198e <main+0xf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	2200      	movs	r2, #0
 8001992:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001994:	0020      	movs	r0, r4
 8001996:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001998:	9204      	str	r2, [sp, #16]
 800199a:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800199c:	f001 f984 	bl	8002ca8 <HAL_TIMEx_MasterConfigSynchronization>
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d001      	beq.n	80019a8 <main+0x10c>
 80019a4:	b672      	cpsid	i
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <main+0x10a>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019a8:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019aa:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 80019ac:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019ae:	2204      	movs	r2, #4
 80019b0:	0020      	movs	r0, r4
 80019b2:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019b4:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019b6:	f000 ff1b 	bl	80027f0 <HAL_TIM_IC_ConfigChannel>
 80019ba:	1e05      	subs	r5, r0, #0
 80019bc:	d001      	beq.n	80019c2 <main+0x126>
 80019be:	b672      	cpsid	i
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <main+0x124>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80019c2:	2104      	movs	r1, #4
 80019c4:	0020      	movs	r0, r4
 80019c6:	f000 feaf 	bl	8002728 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim1);  // Timer On and init this line
 80019ca:	0020      	movs	r0, r4
 80019cc:	f000 fe16 	bl	80025fc <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80019d0:	2601      	movs	r6, #1
  lcd_init();                //LCD init
 80019d2:	f7ff fe05 	bl	80015e0 <lcd_init>
  lcd_xy(0, 4);   // set curser postion
 80019d6:	0028      	movs	r0, r5
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80019d8:	2502      	movs	r5, #2
  lcd_xy(0, 4);   // set curser postion
 80019da:	2104      	movs	r1, #4
 80019dc:	f7ff fdea 	bl	80015b4 <lcd_xy>
  LCD_String("Distance");  // Print String
 80019e0:	4817      	ldr	r0, [pc, #92]	; (8001a40 <main+0x1a4>)
 80019e2:	f7ff fe4f 	bl	8001684 <LCD_String>
 80019e6:	4f17      	ldr	r7, [pc, #92]	; (8001a44 <main+0x1a8>)
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80019e8:	0032      	movs	r2, r6
 80019ea:	0029      	movs	r1, r5
 80019ec:	4810      	ldr	r0, [pc, #64]	; (8001a30 <main+0x194>)
 80019ee:	f000 fa7b 	bl	8001ee8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80019f2:	2300      	movs	r3, #0
 80019f4:	6822      	ldr	r2, [r4, #0]
 80019f6:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 80019f8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80019fa:	2b09      	cmp	r3, #9
 80019fc:	d9fc      	bls.n	80019f8 <main+0x15c>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80019fe:	0029      	movs	r1, r5
 8001a00:	2200      	movs	r2, #0
 8001a02:	480b      	ldr	r0, [pc, #44]	; (8001a30 <main+0x194>)
 8001a04:	f000 fa70 	bl	8001ee8 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 8001a08:	2304      	movs	r3, #4
 8001a0a:	6822      	ldr	r2, [r4, #0]
	  lcd_xy(1, 7);
 8001a0c:	0030      	movs	r0, r6
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 8001a0e:	68d1      	ldr	r1, [r2, #12]
 8001a10:	430b      	orrs	r3, r1
 8001a12:	60d3      	str	r3, [r2, #12]
	  lcd_xy(1, 7);
 8001a14:	2107      	movs	r1, #7
 8001a16:	f7ff fdcd 	bl	80015b4 <lcd_xy>
	  LCD_intValue(Distance);
 8001a1a:	7838      	ldrb	r0, [r7, #0]
 8001a1c:	f7ff fe46 	bl	80016ac <LCD_intValue>
	  HAL_Delay(500);
 8001a20:	20fa      	movs	r0, #250	; 0xfa
 8001a22:	0040      	lsls	r0, r0, #1
 8001a24:	f000 f8ea 	bl	8001bfc <HAL_Delay>
  while (1)
 8001a28:	e7de      	b.n	80019e8 <main+0x14c>
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48000400 	.word	0x48000400
 8001a34:	2000003c 	.word	0x2000003c
 8001a38:	40012c00 	.word	0x40012c00
 8001a3c:	0000ffff 	.word	0x0000ffff
 8001a40:	08002d74 	.word	0x08002d74
 8001a44:	2000002c 	.word	0x2000002c

08001a48 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_MspInit+0x2c>)
{
 8001a4c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	6999      	ldr	r1, [r3, #24]
 8001a50:	4311      	orrs	r1, r2
 8001a52:	6199      	str	r1, [r3, #24]
 8001a54:	6999      	ldr	r1, [r3, #24]
 8001a56:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a58:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	9200      	str	r2, [sp, #0]
 8001a5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	69da      	ldr	r2, [r3, #28]
 8001a60:	0549      	lsls	r1, r1, #21
 8001a62:	430a      	orrs	r2, r1
 8001a64:	61da      	str	r2, [r3, #28]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	400b      	ands	r3, r1
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	b002      	add	sp, #8
 8001a70:	4770      	bx	lr
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	40021000 	.word	0x40021000

08001a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	0004      	movs	r4, r0
 8001a7c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7e:	2214      	movs	r2, #20
 8001a80:	2100      	movs	r1, #0
 8001a82:	a802      	add	r0, sp, #8
 8001a84:	f001 f93e 	bl	8002d04 <memset>
  if(htim_base->Instance==TIM1)
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_TIM_Base_MspInit+0x6c>)
 8001a8a:	6822      	ldr	r2, [r4, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a90:	b008      	add	sp, #32
 8001a92:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a94:	2180      	movs	r1, #128	; 0x80
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_TIM_Base_MspInit+0x70>)
 8001a98:	0109      	lsls	r1, r1, #4
 8001a9a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	619a      	str	r2, [r3, #24]
 8001aa2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa6:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aaa:	9200      	str	r2, [sp, #0]
 8001aac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	0289      	lsls	r1, r1, #10
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	615a      	str	r2, [r3, #20]
 8001ab6:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ab8:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	400b      	ands	r3, r1
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	9202      	str	r2, [sp, #8]
 8001ac6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001ac8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001acc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f000 f8ff 	bl	8001cd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	200e      	movs	r0, #14
 8001ad8:	f000 f8a2 	bl	8001c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001adc:	200e      	movs	r0, #14
 8001ade:	f000 f8d1 	bl	8001c84 <HAL_NVIC_EnableIRQ>
}
 8001ae2:	e7d5      	b.n	8001a90 <HAL_TIM_Base_MspInit+0x18>
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40021000 	.word	0x40021000

08001aec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aec:	e7fe      	b.n	8001aec <NMI_Handler>
 8001aee:	46c0      	nop			; (mov r8, r8)

08001af0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <HardFault_Handler>
 8001af2:	46c0      	nop			; (mov r8, r8)

08001af4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001af4:	4770      	bx	lr
 8001af6:	46c0      	nop			; (mov r8, r8)

08001af8 <PendSV_Handler>:
 8001af8:	4770      	bx	lr
 8001afa:	46c0      	nop			; (mov r8, r8)

08001afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afe:	f000 f86b 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b02:	bd10      	pop	{r4, pc}

08001b04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b04:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b06:	4802      	ldr	r0, [pc, #8]	; (8001b10 <TIM1_CC_IRQHandler+0xc>)
 8001b08:	f001 f822 	bl	8002b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b0c:	bd10      	pop	{r4, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	2000003c 	.word	0x2000003c

08001b14 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b14:	4770      	bx	lr
 8001b16:	46c0      	nop			; (mov r8, r8)

08001b18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b18:	480d      	ldr	r0, [pc, #52]	; (8001b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b1c:	f7ff fffa 	bl	8001b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b22:	490d      	ldr	r1, [pc, #52]	; (8001b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <LoopForever+0xe>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b38:	4c0a      	ldr	r4, [pc, #40]	; (8001b64 <LoopForever+0x16>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b46:	f001 f8e5 	bl	8002d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b4a:	f7ff fea7 	bl	800189c <main>

08001b4e <LoopForever>:

LoopForever:
    b LoopForever
 8001b4e:	e7fe      	b.n	8001b4e <LoopForever>
  ldr   r0, =_estack
 8001b50:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b5c:	08002db8 	.word	0x08002db8
  ldr r2, =_sbss
 8001b60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b64:	20000088 	.word	0x20000088

08001b68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC1_IRQHandler>
	...

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b570      	push	{r4, r5, r6, lr}
 8001b6e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b70:	20fa      	movs	r0, #250	; 0xfa
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_InitTick+0x40>)
 8001b74:	0080      	lsls	r0, r0, #2
 8001b76:	7819      	ldrb	r1, [r3, #0]
 8001b78:	f7fe fac6 	bl	8000108 <__udivsi3>
 8001b7c:	4d0c      	ldr	r5, [pc, #48]	; (8001bb0 <HAL_InitTick+0x44>)
 8001b7e:	0001      	movs	r1, r0
 8001b80:	6828      	ldr	r0, [r5, #0]
 8001b82:	f7fe fac1 	bl	8000108 <__udivsi3>
 8001b86:	f000 f889 	bl	8001c9c <HAL_SYSTICK_Config>
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8001b8e:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b90:	2c03      	cmp	r4, #3
 8001b92:	d900      	bls.n	8001b96 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b96:	3802      	subs	r0, #2
 8001b98:	2200      	movs	r2, #0
 8001b9a:	0021      	movs	r1, r4
 8001b9c:	f000 f840 	bl	8001c20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <HAL_InitTick+0x48>)
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001ba6:	e7f5      	b.n	8001b94 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8001ba8:	2001      	movs	r0, #1
 8001baa:	e7f3      	b.n	8001b94 <HAL_InitTick+0x28>
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000008 	.word	0x20000008

08001bb8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb8:	2110      	movs	r1, #16
 8001bba:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <HAL_Init+0x1c>)
{
 8001bbc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbe:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc0:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc6:	f7ff ffd1 	bl	8001b6c <HAL_InitTick>
  HAL_MspInit();
 8001bca:	f7ff ff3d 	bl	8001a48 <HAL_MspInit>
}
 8001bce:	2000      	movs	r0, #0
 8001bd0:	bd10      	pop	{r4, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001bd8:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <HAL_IncTick+0x10>)
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <HAL_IncTick+0x14>)
 8001bdc:	6811      	ldr	r1, [r2, #0]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	185b      	adds	r3, r3, r1
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	4770      	bx	lr
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	20000084 	.word	0x20000084
 8001bec:	20000004 	.word	0x20000004

08001bf0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001bf0:	4b01      	ldr	r3, [pc, #4]	; (8001bf8 <HAL_GetTick+0x8>)
 8001bf2:	6818      	ldr	r0, [r3, #0]
}
 8001bf4:	4770      	bx	lr
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	20000084 	.word	0x20000084

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b570      	push	{r4, r5, r6, lr}
 8001bfe:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff fff6 	bl	8001bf0 <HAL_GetTick>
 8001c04:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c06:	1c63      	adds	r3, r4, #1
 8001c08:	d002      	beq.n	8001c10 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <HAL_Delay+0x20>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c10:	f7ff ffee 	bl	8001bf0 <HAL_GetTick>
 8001c14:	1b40      	subs	r0, r0, r5
 8001c16:	42a0      	cmp	r0, r4
 8001c18:	d3fa      	bcc.n	8001c10 <HAL_Delay+0x14>
  {
  }
}
 8001c1a:	bd70      	pop	{r4, r5, r6, pc}
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c20:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001c22:	2800      	cmp	r0, #0
 8001c24:	db14      	blt.n	8001c50 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_NVIC_SetPriority+0x5c>)
 8001c28:	2203      	movs	r2, #3
 8001c2a:	469c      	mov	ip, r3
 8001c2c:	23ff      	movs	r3, #255	; 0xff
 8001c2e:	0884      	lsrs	r4, r0, #2
 8001c30:	4002      	ands	r2, r0
 8001c32:	0018      	movs	r0, r3
 8001c34:	26c0      	movs	r6, #192	; 0xc0
 8001c36:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c38:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c3a:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	4093      	lsls	r3, r2
 8001c40:	00a4      	lsls	r4, r4, #2
 8001c42:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c44:	00b6      	lsls	r6, r6, #2
 8001c46:	59a5      	ldr	r5, [r4, r6]
 8001c48:	4385      	bics	r5, r0
 8001c4a:	432b      	orrs	r3, r5
 8001c4c:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c50:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <HAL_NVIC_SetPriority+0x60>)
 8001c52:	230f      	movs	r3, #15
 8001c54:	4694      	mov	ip, r2
 8001c56:	2203      	movs	r2, #3
 8001c58:	4003      	ands	r3, r0
 8001c5a:	4010      	ands	r0, r2
 8001c5c:	32fc      	adds	r2, #252	; 0xfc
 8001c5e:	0015      	movs	r5, r2
 8001c60:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c62:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c64:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c66:	400a      	ands	r2, r1
 8001c68:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c6a:	3b08      	subs	r3, #8
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4463      	add	r3, ip
 8001c72:	69dc      	ldr	r4, [r3, #28]
 8001c74:	43ac      	bics	r4, r5
 8001c76:	4322      	orrs	r2, r4
 8001c78:	61da      	str	r2, [r3, #28]
 8001c7a:	e7e8      	b.n	8001c4e <HAL_NVIC_SetPriority+0x2e>
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c84:	2800      	cmp	r0, #0
 8001c86:	db05      	blt.n	8001c94 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c88:	221f      	movs	r2, #31
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	4002      	ands	r2, r0
 8001c8e:	4093      	lsls	r3, r2
 8001c90:	4a01      	ldr	r2, [pc, #4]	; (8001c98 <HAL_NVIC_EnableIRQ+0x14>)
 8001c92:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001c94:	4770      	bx	lr
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	e000e100 	.word	0xe000e100

08001c9c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	2280      	movs	r2, #128	; 0x80
 8001c9e:	1e43      	subs	r3, r0, #1
 8001ca0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d20e      	bcs.n	8001cc6 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ca8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cac:	4807      	ldr	r0, [pc, #28]	; (8001ccc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb0:	6a03      	ldr	r3, [r0, #32]
 8001cb2:	0609      	lsls	r1, r1, #24
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbe:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	3307      	adds	r3, #7
 8001cc4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e010 	.word	0xe000e010
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd2:	46de      	mov	lr, fp
 8001cd4:	4657      	mov	r7, sl
 8001cd6:	464e      	mov	r6, r9
 8001cd8:	4645      	mov	r5, r8
 8001cda:	b5e0      	push	{r5, r6, r7, lr}
 8001cdc:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cde:	6809      	ldr	r1, [r1, #0]
 8001ce0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001ce2:	2300      	movs	r3, #0
{
 8001ce4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce6:	2900      	cmp	r1, #0
 8001ce8:	d07c      	beq.n	8001de4 <HAL_GPIO_Init+0x114>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	4c79      	ldr	r4, [pc, #484]	; (8001ed0 <HAL_GPIO_Init+0x200>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cec:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	46a3      	mov	fp, r4
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cf0:	2601      	movs	r6, #1
 8001cf2:	000c      	movs	r4, r1
 8001cf4:	409e      	lsls	r6, r3
 8001cf6:	4034      	ands	r4, r6
 8001cf8:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8001cfa:	4231      	tst	r1, r6
 8001cfc:	d06c      	beq.n	8001dd8 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cfe:	4654      	mov	r4, sl
 8001d00:	2503      	movs	r5, #3
 8001d02:	6864      	ldr	r4, [r4, #4]
 8001d04:	4025      	ands	r5, r4
 8001d06:	46ac      	mov	ip, r5
 8001d08:	3d01      	subs	r5, #1
 8001d0a:	2d01      	cmp	r5, #1
 8001d0c:	d800      	bhi.n	8001d10 <HAL_GPIO_Init+0x40>
 8001d0e:	e070      	b.n	8001df2 <HAL_GPIO_Init+0x122>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d10:	4665      	mov	r5, ip
 8001d12:	2d03      	cmp	r5, #3
 8001d14:	d000      	beq.n	8001d18 <HAL_GPIO_Init+0x48>
 8001d16:	e0b3      	b.n	8001e80 <HAL_GPIO_Init+0x1b0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d18:	4666      	mov	r6, ip
 8001d1a:	4096      	lsls	r6, r2
 8001d1c:	43f5      	mvns	r5, r6
 8001d1e:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8001d20:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d22:	9d02      	ldr	r5, [sp, #8]
 8001d24:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d26:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d28:	25c0      	movs	r5, #192	; 0xc0
 8001d2a:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 8001d2c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d2e:	422c      	tst	r4, r5
 8001d30:	d052      	beq.n	8001dd8 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	465d      	mov	r5, fp
 8001d34:	2601      	movs	r6, #1
 8001d36:	465f      	mov	r7, fp
 8001d38:	69ad      	ldr	r5, [r5, #24]
 8001d3a:	4335      	orrs	r5, r6
 8001d3c:	61bd      	str	r5, [r7, #24]
 8001d3e:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d40:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	4035      	ands	r5, r6
 8001d44:	4e63      	ldr	r6, [pc, #396]	; (8001ed4 <HAL_GPIO_Init+0x204>)
 8001d46:	9505      	str	r5, [sp, #20]
 8001d48:	46b4      	mov	ip, r6
 8001d4a:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d4c:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d4e:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d50:	00bf      	lsls	r7, r7, #2
 8001d52:	00ad      	lsls	r5, r5, #2
 8001d54:	4465      	add	r5, ip
 8001d56:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d58:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d5a:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d5c:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d5e:	4666      	mov	r6, ip
 8001d60:	40b7      	lsls	r7, r6
 8001d62:	003e      	movs	r6, r7
 8001d64:	464f      	mov	r7, r9
 8001d66:	43b7      	bics	r7, r6
 8001d68:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d6a:	2790      	movs	r7, #144	; 0x90
 8001d6c:	05ff      	lsls	r7, r7, #23
 8001d6e:	42b8      	cmp	r0, r7
 8001d70:	d012      	beq.n	8001d98 <HAL_GPIO_Init+0xc8>
 8001d72:	4f59      	ldr	r7, [pc, #356]	; (8001ed8 <HAL_GPIO_Init+0x208>)
 8001d74:	42b8      	cmp	r0, r7
 8001d76:	d100      	bne.n	8001d7a <HAL_GPIO_Init+0xaa>
 8001d78:	e09b      	b.n	8001eb2 <HAL_GPIO_Init+0x1e2>
 8001d7a:	4f58      	ldr	r7, [pc, #352]	; (8001edc <HAL_GPIO_Init+0x20c>)
 8001d7c:	42b8      	cmp	r0, r7
 8001d7e:	d100      	bne.n	8001d82 <HAL_GPIO_Init+0xb2>
 8001d80:	e09f      	b.n	8001ec2 <HAL_GPIO_Init+0x1f2>
 8001d82:	4f57      	ldr	r7, [pc, #348]	; (8001ee0 <HAL_GPIO_Init+0x210>)
 8001d84:	42b8      	cmp	r0, r7
 8001d86:	d100      	bne.n	8001d8a <HAL_GPIO_Init+0xba>
 8001d88:	e08c      	b.n	8001ea4 <HAL_GPIO_Init+0x1d4>
 8001d8a:	4666      	mov	r6, ip
 8001d8c:	2705      	movs	r7, #5
 8001d8e:	40b7      	lsls	r7, r6
 8001d90:	003e      	movs	r6, r7
 8001d92:	464f      	mov	r7, r9
 8001d94:	4337      	orrs	r7, r6
 8001d96:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d98:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d9a:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d9c:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 8001d9e:	4d51      	ldr	r5, [pc, #324]	; (8001ee4 <HAL_GPIO_Init+0x214>)
        temp &= ~(iocurrent);
 8001da0:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001da2:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8001da4:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 8001da6:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001da8:	423c      	tst	r4, r7
 8001daa:	d000      	beq.n	8001dae <HAL_GPIO_Init+0xde>
 8001dac:	e077      	b.n	8001e9e <HAL_GPIO_Init+0x1ce>
        temp &= ~(iocurrent);
 8001dae:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001db0:	4f4c      	ldr	r7, [pc, #304]	; (8001ee4 <HAL_GPIO_Init+0x214>)
 8001db2:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8001db4:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db6:	02a7      	lsls	r7, r4, #10
 8001db8:	d46e      	bmi.n	8001e98 <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 8001dba:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001dbc:	4f49      	ldr	r7, [pc, #292]	; (8001ee4 <HAL_GPIO_Init+0x214>)
 8001dbe:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001dc0:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc2:	03a7      	lsls	r7, r4, #14
 8001dc4:	d465      	bmi.n	8001e92 <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 8001dc6:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001dc8:	4f46      	ldr	r7, [pc, #280]	; (8001ee4 <HAL_GPIO_Init+0x214>)
 8001dca:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 8001dcc:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dce:	03e4      	lsls	r4, r4, #15
 8001dd0:	d45b      	bmi.n	8001e8a <HAL_GPIO_Init+0x1ba>
        temp &= ~(iocurrent);
 8001dd2:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001dd4:	4c43      	ldr	r4, [pc, #268]	; (8001ee4 <HAL_GPIO_Init+0x214>)
 8001dd6:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd8:	000c      	movs	r4, r1
      }
    }

    position++;
 8001dda:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ddc:	40dc      	lsrs	r4, r3
 8001dde:	3202      	adds	r2, #2
 8001de0:	2c00      	cmp	r4, #0
 8001de2:	d185      	bne.n	8001cf0 <HAL_GPIO_Init+0x20>
  } 
}
 8001de4:	b007      	add	sp, #28
 8001de6:	bcf0      	pop	{r4, r5, r6, r7}
 8001de8:	46bb      	mov	fp, r7
 8001dea:	46b2      	mov	sl, r6
 8001dec:	46a9      	mov	r9, r5
 8001dee:	46a0      	mov	r8, r4
 8001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8001df2:	6885      	ldr	r5, [r0, #8]
 8001df4:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001df6:	2503      	movs	r5, #3
 8001df8:	4095      	lsls	r5, r2
 8001dfa:	46a8      	mov	r8, r5
 8001dfc:	43ed      	mvns	r5, r5
 8001dfe:	464f      	mov	r7, r9
 8001e00:	9502      	str	r5, [sp, #8]
 8001e02:	4645      	mov	r5, r8
 8001e04:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e06:	4655      	mov	r5, sl
 8001e08:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e0a:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e0c:	002f      	movs	r7, r5
 8001e0e:	4097      	lsls	r7, r2
 8001e10:	46b8      	mov	r8, r7
 8001e12:	464f      	mov	r7, r9
 8001e14:	4645      	mov	r5, r8
 8001e16:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8001e18:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e1a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e1c:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e1e:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e20:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e22:	0926      	lsrs	r6, r4, #4
 8001e24:	402e      	ands	r6, r5
 8001e26:	409e      	lsls	r6, r3
 8001e28:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8001e2a:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001e2c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e2e:	9d02      	ldr	r5, [sp, #8]
 8001e30:	402e      	ands	r6, r5
 8001e32:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e34:	4656      	mov	r6, sl
 8001e36:	68b6      	ldr	r6, [r6, #8]
 8001e38:	4647      	mov	r7, r8
 8001e3a:	4096      	lsls	r6, r2
 8001e3c:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8001e3e:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e40:	4667      	mov	r7, ip
 8001e42:	4666      	mov	r6, ip
 8001e44:	4096      	lsls	r6, r2
 8001e46:	2f02      	cmp	r7, #2
 8001e48:	d000      	beq.n	8001e4c <HAL_GPIO_Init+0x17c>
 8001e4a:	e769      	b.n	8001d20 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 8001e4c:	08dd      	lsrs	r5, r3, #3
 8001e4e:	00ad      	lsls	r5, r5, #2
 8001e50:	46ac      	mov	ip, r5
 8001e52:	4484      	add	ip, r0
 8001e54:	4665      	mov	r5, ip
 8001e56:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e58:	2507      	movs	r5, #7
 8001e5a:	401d      	ands	r5, r3
 8001e5c:	00ad      	lsls	r5, r5, #2
 8001e5e:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8001e60:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e62:	250f      	movs	r5, #15
 8001e64:	4647      	mov	r7, r8
 8001e66:	40bd      	lsls	r5, r7
 8001e68:	9f03      	ldr	r7, [sp, #12]
 8001e6a:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e6c:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e6e:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e70:	4647      	mov	r7, r8
 8001e72:	692d      	ldr	r5, [r5, #16]
 8001e74:	40bd      	lsls	r5, r7
 8001e76:	9f03      	ldr	r7, [sp, #12]
 8001e78:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8001e7a:	4665      	mov	r5, ip
 8001e7c:	622f      	str	r7, [r5, #32]
 8001e7e:	e74f      	b.n	8001d20 <HAL_GPIO_Init+0x50>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e80:	2503      	movs	r5, #3
 8001e82:	4095      	lsls	r5, r2
 8001e84:	43ed      	mvns	r5, r5
 8001e86:	9502      	str	r5, [sp, #8]
 8001e88:	e7d0      	b.n	8001e2c <HAL_GPIO_Init+0x15c>
          temp |= iocurrent;
 8001e8a:	9c01      	ldr	r4, [sp, #4]
 8001e8c:	432c      	orrs	r4, r5
 8001e8e:	0025      	movs	r5, r4
 8001e90:	e7a0      	b.n	8001dd4 <HAL_GPIO_Init+0x104>
          temp |= iocurrent;
 8001e92:	9f01      	ldr	r7, [sp, #4]
 8001e94:	433d      	orrs	r5, r7
 8001e96:	e797      	b.n	8001dc8 <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 8001e98:	9f01      	ldr	r7, [sp, #4]
 8001e9a:	433d      	orrs	r5, r7
 8001e9c:	e78e      	b.n	8001dbc <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 8001e9e:	9f01      	ldr	r7, [sp, #4]
 8001ea0:	433d      	orrs	r5, r7
 8001ea2:	e785      	b.n	8001db0 <HAL_GPIO_Init+0xe0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ea4:	4667      	mov	r7, ip
 8001ea6:	2603      	movs	r6, #3
 8001ea8:	40be      	lsls	r6, r7
 8001eaa:	464f      	mov	r7, r9
 8001eac:	4337      	orrs	r7, r6
 8001eae:	46b9      	mov	r9, r7
 8001eb0:	e772      	b.n	8001d98 <HAL_GPIO_Init+0xc8>
 8001eb2:	4666      	mov	r6, ip
 8001eb4:	2701      	movs	r7, #1
 8001eb6:	40b7      	lsls	r7, r6
 8001eb8:	003e      	movs	r6, r7
 8001eba:	464f      	mov	r7, r9
 8001ebc:	4337      	orrs	r7, r6
 8001ebe:	46b9      	mov	r9, r7
 8001ec0:	e76a      	b.n	8001d98 <HAL_GPIO_Init+0xc8>
 8001ec2:	4667      	mov	r7, ip
 8001ec4:	2602      	movs	r6, #2
 8001ec6:	40be      	lsls	r6, r7
 8001ec8:	464f      	mov	r7, r9
 8001eca:	4337      	orrs	r7, r6
 8001ecc:	46b9      	mov	r9, r7
 8001ece:	e763      	b.n	8001d98 <HAL_GPIO_Init+0xc8>
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	48000400 	.word	0x48000400
 8001edc:	48000800 	.word	0x48000800
 8001ee0:	48000c00 	.word	0x48000c00
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ee8:	2a00      	cmp	r2, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eec:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eee:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ef0:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001ef2:	e7fc      	b.n	8001eee <HAL_GPIO_WritePin+0x6>

08001ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef6:	46ce      	mov	lr, r9
 8001ef8:	4647      	mov	r7, r8
 8001efa:	b580      	push	{r7, lr}
 8001efc:	0004      	movs	r4, r0
 8001efe:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d100      	bne.n	8001f06 <HAL_RCC_OscConfig+0x12>
 8001f04:	e0ee      	b.n	80020e4 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f06:	6803      	ldr	r3, [r0, #0]
 8001f08:	07da      	lsls	r2, r3, #31
 8001f0a:	d535      	bpl.n	8001f78 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f0c:	210c      	movs	r1, #12
 8001f0e:	48c3      	ldr	r0, [pc, #780]	; (800221c <HAL_RCC_OscConfig+0x328>)
 8001f10:	6842      	ldr	r2, [r0, #4]
 8001f12:	400a      	ands	r2, r1
 8001f14:	2a04      	cmp	r2, #4
 8001f16:	d100      	bne.n	8001f1a <HAL_RCC_OscConfig+0x26>
 8001f18:	e101      	b.n	800211e <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f1a:	6842      	ldr	r2, [r0, #4]
 8001f1c:	4011      	ands	r1, r2
 8001f1e:	2908      	cmp	r1, #8
 8001f20:	d100      	bne.n	8001f24 <HAL_RCC_OscConfig+0x30>
 8001f22:	e0f8      	b.n	8002116 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f24:	6863      	ldr	r3, [r4, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d00f      	beq.n	8001f4a <HAL_RCC_OscConfig+0x56>
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d100      	bne.n	8001f30 <HAL_RCC_OscConfig+0x3c>
 8001f2e:	e11e      	b.n	800216e <HAL_RCC_OscConfig+0x27a>
 8001f30:	2b05      	cmp	r3, #5
 8001f32:	d100      	bne.n	8001f36 <HAL_RCC_OscConfig+0x42>
 8001f34:	e1a7      	b.n	8002286 <HAL_RCC_OscConfig+0x392>
 8001f36:	4bb9      	ldr	r3, [pc, #740]	; (800221c <HAL_RCC_OscConfig+0x328>)
 8001f38:	49b9      	ldr	r1, [pc, #740]	; (8002220 <HAL_RCC_OscConfig+0x32c>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	49b8      	ldr	r1, [pc, #736]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f44:	400a      	ands	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e005      	b.n	8001f56 <HAL_RCC_OscConfig+0x62>
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	4ab3      	ldr	r2, [pc, #716]	; (800221c <HAL_RCC_OscConfig+0x328>)
 8001f4e:	025b      	lsls	r3, r3, #9
 8001f50:	6811      	ldr	r1, [r2, #0]
 8001f52:	430b      	orrs	r3, r1
 8001f54:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7ff fe4b 	bl	8001bf0 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001f5c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	4faf      	ldr	r7, [pc, #700]	; (800221c <HAL_RCC_OscConfig+0x328>)
 8001f60:	02b6      	lsls	r6, r6, #10
 8001f62:	e005      	b.n	8001f70 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fe44 	bl	8001bf0 <HAL_GetTick>
 8001f68:	1b40      	subs	r0, r0, r5
 8001f6a:	2864      	cmp	r0, #100	; 0x64
 8001f6c:	d900      	bls.n	8001f70 <HAL_RCC_OscConfig+0x7c>
 8001f6e:	e0fc      	b.n	800216a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4233      	tst	r3, r6
 8001f74:	d0f6      	beq.n	8001f64 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	079a      	lsls	r2, r3, #30
 8001f7a:	d529      	bpl.n	8001fd0 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f7c:	220c      	movs	r2, #12
 8001f7e:	49a7      	ldr	r1, [pc, #668]	; (800221c <HAL_RCC_OscConfig+0x328>)
 8001f80:	6848      	ldr	r0, [r1, #4]
 8001f82:	4202      	tst	r2, r0
 8001f84:	d100      	bne.n	8001f88 <HAL_RCC_OscConfig+0x94>
 8001f86:	e0a6      	b.n	80020d6 <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f88:	6848      	ldr	r0, [r1, #4]
 8001f8a:	4002      	ands	r2, r0
 8001f8c:	2a08      	cmp	r2, #8
 8001f8e:	d100      	bne.n	8001f92 <HAL_RCC_OscConfig+0x9e>
 8001f90:	e09d      	b.n	80020ce <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f92:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	4da1      	ldr	r5, [pc, #644]	; (800221c <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d100      	bne.n	8001f9c <HAL_RCC_OscConfig+0xa8>
 8001f9a:	e11f      	b.n	80021dc <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fe23 	bl	8001bf0 <HAL_GetTick>
 8001faa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	e005      	b.n	8001fba <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fae:	f7ff fe1f 	bl	8001bf0 <HAL_GetTick>
 8001fb2:	1b80      	subs	r0, r0, r6
 8001fb4:	2802      	cmp	r0, #2
 8001fb6:	d900      	bls.n	8001fba <HAL_RCC_OscConfig+0xc6>
 8001fb8:	e0d7      	b.n	800216a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	682b      	ldr	r3, [r5, #0]
 8001fbc:	421f      	tst	r7, r3
 8001fbe:	d0f6      	beq.n	8001fae <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	21f8      	movs	r1, #248	; 0xf8
 8001fc2:	682a      	ldr	r2, [r5, #0]
 8001fc4:	6923      	ldr	r3, [r4, #16]
 8001fc6:	438a      	bics	r2, r1
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	071a      	lsls	r2, r3, #28
 8001fd2:	d42d      	bmi.n	8002030 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd4:	075a      	lsls	r2, r3, #29
 8001fd6:	d544      	bpl.n	8002062 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fdc:	4b8f      	ldr	r3, [pc, #572]	; (800221c <HAL_RCC_OscConfig+0x328>)
 8001fde:	0552      	lsls	r2, r2, #21
 8001fe0:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001fe2:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe4:	4211      	tst	r1, r2
 8001fe6:	d108      	bne.n	8001ffa <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe8:	69d9      	ldr	r1, [r3, #28]
 8001fea:	4311      	orrs	r1, r2
 8001fec:	61d9      	str	r1, [r3, #28]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	2780      	movs	r7, #128	; 0x80
 8001ffc:	4e8a      	ldr	r6, [pc, #552]	; (8002228 <HAL_RCC_OscConfig+0x334>)
 8001ffe:	007f      	lsls	r7, r7, #1
 8002000:	6833      	ldr	r3, [r6, #0]
 8002002:	423b      	tst	r3, r7
 8002004:	d100      	bne.n	8002008 <HAL_RCC_OscConfig+0x114>
 8002006:	e094      	b.n	8002132 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002008:	68a3      	ldr	r3, [r4, #8]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d100      	bne.n	8002010 <HAL_RCC_OscConfig+0x11c>
 800200e:	e0f8      	b.n	8002202 <HAL_RCC_OscConfig+0x30e>
 8002010:	2b00      	cmp	r3, #0
 8002012:	d100      	bne.n	8002016 <HAL_RCC_OscConfig+0x122>
 8002014:	e0c4      	b.n	80021a0 <HAL_RCC_OscConfig+0x2ac>
 8002016:	2b05      	cmp	r3, #5
 8002018:	d100      	bne.n	800201c <HAL_RCC_OscConfig+0x128>
 800201a:	e140      	b.n	800229e <HAL_RCC_OscConfig+0x3aa>
 800201c:	2101      	movs	r1, #1
 800201e:	4b7f      	ldr	r3, [pc, #508]	; (800221c <HAL_RCC_OscConfig+0x328>)
 8002020:	6a1a      	ldr	r2, [r3, #32]
 8002022:	438a      	bics	r2, r1
 8002024:	621a      	str	r2, [r3, #32]
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	3103      	adds	r1, #3
 800202a:	438a      	bics	r2, r1
 800202c:	621a      	str	r2, [r3, #32]
 800202e:	e0ec      	b.n	800220a <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002030:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8002032:	4d7a      	ldr	r5, [pc, #488]	; (800221c <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002034:	2b00      	cmp	r3, #0
 8002036:	d05b      	beq.n	80020f0 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8002038:	2201      	movs	r2, #1
 800203a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 800203e:	4313      	orrs	r3, r2
 8002040:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002042:	f7ff fdd5 	bl	8001bf0 <HAL_GetTick>
 8002046:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002048:	e005      	b.n	8002056 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204a:	f7ff fdd1 	bl	8001bf0 <HAL_GetTick>
 800204e:	1b80      	subs	r0, r0, r6
 8002050:	2802      	cmp	r0, #2
 8002052:	d900      	bls.n	8002056 <HAL_RCC_OscConfig+0x162>
 8002054:	e089      	b.n	800216a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002058:	421f      	tst	r7, r3
 800205a:	d0f6      	beq.n	800204a <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	075a      	lsls	r2, r3, #29
 8002060:	d4ba      	bmi.n	8001fd8 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002062:	06db      	lsls	r3, r3, #27
 8002064:	d512      	bpl.n	800208c <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002066:	6963      	ldr	r3, [r4, #20]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d100      	bne.n	800206e <HAL_RCC_OscConfig+0x17a>
 800206c:	e13d      	b.n	80022ea <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800206e:	3305      	adds	r3, #5
 8002070:	d000      	beq.n	8002074 <HAL_RCC_OscConfig+0x180>
 8002072:	e0e9      	b.n	8002248 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002074:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002076:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8002078:	4a68      	ldr	r2, [pc, #416]	; (800221c <HAL_RCC_OscConfig+0x328>)
 800207a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800207c:	438b      	bics	r3, r1
 800207e:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002080:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002082:	69a3      	ldr	r3, [r4, #24]
 8002084:	4381      	bics	r1, r0
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	430b      	orrs	r3, r1
 800208a:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208c:	6a23      	ldr	r3, [r4, #32]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01b      	beq.n	80020ca <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002092:	220c      	movs	r2, #12
 8002094:	4d61      	ldr	r5, [pc, #388]	; (800221c <HAL_RCC_OscConfig+0x328>)
 8002096:	6869      	ldr	r1, [r5, #4]
 8002098:	400a      	ands	r2, r1
 800209a:	2a08      	cmp	r2, #8
 800209c:	d100      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1ac>
 800209e:	e108      	b.n	80022b2 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d100      	bne.n	80020a6 <HAL_RCC_OscConfig+0x1b2>
 80020a4:	e13f      	b.n	8002326 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	682b      	ldr	r3, [r5, #0]
 80020a8:	4a60      	ldr	r2, [pc, #384]	; (800222c <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020aa:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80020ac:	4013      	ands	r3, r2
 80020ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020b0:	f7ff fd9e 	bl	8001bf0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b4:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80020b6:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	e004      	b.n	80020c4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ba:	f7ff fd99 	bl	8001bf0 <HAL_GetTick>
 80020be:	1b00      	subs	r0, r0, r4
 80020c0:	2802      	cmp	r0, #2
 80020c2:	d852      	bhi.n	800216a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c4:	682b      	ldr	r3, [r5, #0]
 80020c6:	4233      	tst	r3, r6
 80020c8:	d1f7      	bne.n	80020ba <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 80020ca:	2000      	movs	r0, #0
 80020cc:	e00b      	b.n	80020e6 <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020ce:	684a      	ldr	r2, [r1, #4]
 80020d0:	03d2      	lsls	r2, r2, #15
 80020d2:	d500      	bpl.n	80020d6 <HAL_RCC_OscConfig+0x1e2>
 80020d4:	e75d      	b.n	8001f92 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_RCC_OscConfig+0x328>)
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	0792      	lsls	r2, r2, #30
 80020dc:	d539      	bpl.n	8002152 <HAL_RCC_OscConfig+0x25e>
 80020de:	68e2      	ldr	r2, [r4, #12]
 80020e0:	2a01      	cmp	r2, #1
 80020e2:	d036      	beq.n	8002152 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 80020e4:	2001      	movs	r0, #1
}
 80020e6:	b003      	add	sp, #12
 80020e8:	bcc0      	pop	{r6, r7}
 80020ea:	46b9      	mov	r9, r7
 80020ec:	46b0      	mov	r8, r6
 80020ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80020f0:	2201      	movs	r2, #1
 80020f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80020f6:	4393      	bics	r3, r2
 80020f8:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80020fa:	f7ff fd79 	bl	8001bf0 <HAL_GetTick>
 80020fe:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	e004      	b.n	800210c <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002102:	f7ff fd75 	bl	8001bf0 <HAL_GetTick>
 8002106:	1b80      	subs	r0, r0, r6
 8002108:	2802      	cmp	r0, #2
 800210a:	d82e      	bhi.n	800216a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800210e:	421f      	tst	r7, r3
 8002110:	d1f7      	bne.n	8002102 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	e7a3      	b.n	800205e <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002116:	6842      	ldr	r2, [r0, #4]
 8002118:	03d2      	lsls	r2, r2, #15
 800211a:	d400      	bmi.n	800211e <HAL_RCC_OscConfig+0x22a>
 800211c:	e702      	b.n	8001f24 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211e:	4a3f      	ldr	r2, [pc, #252]	; (800221c <HAL_RCC_OscConfig+0x328>)
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	0392      	lsls	r2, r2, #14
 8002124:	d400      	bmi.n	8002128 <HAL_RCC_OscConfig+0x234>
 8002126:	e727      	b.n	8001f78 <HAL_RCC_OscConfig+0x84>
 8002128:	6862      	ldr	r2, [r4, #4]
 800212a:	2a00      	cmp	r2, #0
 800212c:	d000      	beq.n	8002130 <HAL_RCC_OscConfig+0x23c>
 800212e:	e723      	b.n	8001f78 <HAL_RCC_OscConfig+0x84>
 8002130:	e7d8      	b.n	80020e4 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002132:	6833      	ldr	r3, [r6, #0]
 8002134:	433b      	orrs	r3, r7
 8002136:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002138:	f7ff fd5a 	bl	8001bf0 <HAL_GetTick>
 800213c:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	e004      	b.n	800214a <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002140:	f7ff fd56 	bl	8001bf0 <HAL_GetTick>
 8002144:	1b40      	subs	r0, r0, r5
 8002146:	2864      	cmp	r0, #100	; 0x64
 8002148:	d80f      	bhi.n	800216a <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214a:	6833      	ldr	r3, [r6, #0]
 800214c:	423b      	tst	r3, r7
 800214e:	d0f7      	beq.n	8002140 <HAL_RCC_OscConfig+0x24c>
 8002150:	e75a      	b.n	8002008 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	25f8      	movs	r5, #248	; 0xf8
 8002154:	4831      	ldr	r0, [pc, #196]	; (800221c <HAL_RCC_OscConfig+0x328>)
 8002156:	6922      	ldr	r2, [r4, #16]
 8002158:	6801      	ldr	r1, [r0, #0]
 800215a:	00d2      	lsls	r2, r2, #3
 800215c:	43a9      	bics	r1, r5
 800215e:	430a      	orrs	r2, r1
 8002160:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002162:	071a      	lsls	r2, r3, #28
 8002164:	d400      	bmi.n	8002168 <HAL_RCC_OscConfig+0x274>
 8002166:	e735      	b.n	8001fd4 <HAL_RCC_OscConfig+0xe0>
 8002168:	e762      	b.n	8002030 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 800216a:	2003      	movs	r0, #3
 800216c:	e7bb      	b.n	80020e6 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216e:	4d2b      	ldr	r5, [pc, #172]	; (800221c <HAL_RCC_OscConfig+0x328>)
 8002170:	4a2b      	ldr	r2, [pc, #172]	; (8002220 <HAL_RCC_OscConfig+0x32c>)
 8002172:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002174:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002176:	4013      	ands	r3, r2
 8002178:	602b      	str	r3, [r5, #0]
 800217a:	682b      	ldr	r3, [r5, #0]
 800217c:	4a29      	ldr	r2, [pc, #164]	; (8002224 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002180:	4013      	ands	r3, r2
 8002182:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002184:	f7ff fd34 	bl	8001bf0 <HAL_GetTick>
 8002188:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	e004      	b.n	8002196 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fd30 	bl	8001bf0 <HAL_GetTick>
 8002190:	1b80      	subs	r0, r0, r6
 8002192:	2864      	cmp	r0, #100	; 0x64
 8002194:	d8e9      	bhi.n	800216a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	682b      	ldr	r3, [r5, #0]
 8002198:	423b      	tst	r3, r7
 800219a:	d1f7      	bne.n	800218c <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	e6eb      	b.n	8001f78 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a0:	2201      	movs	r2, #1
 80021a2:	4e1e      	ldr	r6, [pc, #120]	; (800221c <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	4d22      	ldr	r5, [pc, #136]	; (8002230 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a6:	6a33      	ldr	r3, [r6, #32]
 80021a8:	4393      	bics	r3, r2
 80021aa:	6233      	str	r3, [r6, #32]
 80021ac:	6a33      	ldr	r3, [r6, #32]
 80021ae:	3203      	adds	r2, #3
 80021b0:	4393      	bics	r3, r2
 80021b2:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80021b4:	f7ff fd1c 	bl	8001bf0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 80021ba:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	4698      	mov	r8, r3
 80021be:	e004      	b.n	80021ca <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7ff fd16 	bl	8001bf0 <HAL_GetTick>
 80021c4:	1bc0      	subs	r0, r0, r7
 80021c6:	42a8      	cmp	r0, r5
 80021c8:	d8cf      	bhi.n	800216a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ca:	4642      	mov	r2, r8
 80021cc:	6a33      	ldr	r3, [r6, #32]
 80021ce:	421a      	tst	r2, r3
 80021d0:	d1f6      	bne.n	80021c0 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 80021d2:	464b      	mov	r3, r9
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d04f      	beq.n	8002278 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	e742      	b.n	8002062 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 80021dc:	2201      	movs	r2, #1
 80021de:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80021e2:	4393      	bics	r3, r2
 80021e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80021e6:	f7ff fd03 	bl	8001bf0 <HAL_GetTick>
 80021ea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ec:	e004      	b.n	80021f8 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ee:	f7ff fcff 	bl	8001bf0 <HAL_GetTick>
 80021f2:	1b80      	subs	r0, r0, r6
 80021f4:	2802      	cmp	r0, #2
 80021f6:	d8b8      	bhi.n	800216a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f8:	682b      	ldr	r3, [r5, #0]
 80021fa:	421f      	tst	r7, r3
 80021fc:	d1f7      	bne.n	80021ee <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	e6e6      	b.n	8001fd0 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002202:	4906      	ldr	r1, [pc, #24]	; (800221c <HAL_RCC_OscConfig+0x328>)
 8002204:	6a0a      	ldr	r2, [r1, #32]
 8002206:	4313      	orrs	r3, r2
 8002208:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800220a:	f7ff fcf1 	bl	8001bf0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220e:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8002210:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002212:	4698      	mov	r8, r3
 8002214:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	4d06      	ldr	r5, [pc, #24]	; (8002230 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	e011      	b.n	800223e <HAL_RCC_OscConfig+0x34a>
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	40021000 	.word	0x40021000
 8002220:	fffeffff 	.word	0xfffeffff
 8002224:	fffbffff 	.word	0xfffbffff
 8002228:	40007000 	.word	0x40007000
 800222c:	feffffff 	.word	0xfeffffff
 8002230:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7ff fcdc 	bl	8001bf0 <HAL_GetTick>
 8002238:	1b80      	subs	r0, r0, r6
 800223a:	42a8      	cmp	r0, r5
 800223c:	d895      	bhi.n	800216a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223e:	4643      	mov	r3, r8
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	421f      	tst	r7, r3
 8002244:	d0f6      	beq.n	8002234 <HAL_RCC_OscConfig+0x340>
 8002246:	e7c4      	b.n	80021d2 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002248:	2204      	movs	r2, #4
 800224a:	4d53      	ldr	r5, [pc, #332]	; (8002398 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800224c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800224e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002250:	4313      	orrs	r3, r2
 8002252:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002254:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002256:	3a03      	subs	r2, #3
 8002258:	4393      	bics	r3, r2
 800225a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800225c:	f7ff fcc8 	bl	8001bf0 <HAL_GetTick>
 8002260:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002262:	e005      	b.n	8002270 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002264:	f7ff fcc4 	bl	8001bf0 <HAL_GetTick>
 8002268:	1b80      	subs	r0, r0, r6
 800226a:	2802      	cmp	r0, #2
 800226c:	d900      	bls.n	8002270 <HAL_RCC_OscConfig+0x37c>
 800226e:	e77c      	b.n	800216a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002270:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002272:	421f      	tst	r7, r3
 8002274:	d1f6      	bne.n	8002264 <HAL_RCC_OscConfig+0x370>
 8002276:	e709      	b.n	800208c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002278:	4a47      	ldr	r2, [pc, #284]	; (8002398 <HAL_RCC_OscConfig+0x4a4>)
 800227a:	4948      	ldr	r1, [pc, #288]	; (800239c <HAL_RCC_OscConfig+0x4a8>)
 800227c:	69d3      	ldr	r3, [r2, #28]
 800227e:	400b      	ands	r3, r1
 8002280:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	e6ed      	b.n	8002062 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCC_OscConfig+0x4a4>)
 800228a:	02d2      	lsls	r2, r2, #11
 800228c:	6819      	ldr	r1, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	2280      	movs	r2, #128	; 0x80
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	0252      	lsls	r2, r2, #9
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	e65b      	b.n	8001f56 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229e:	2104      	movs	r1, #4
 80022a0:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCC_OscConfig+0x4a4>)
 80022a2:	6a1a      	ldr	r2, [r3, #32]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	621a      	str	r2, [r3, #32]
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	3903      	subs	r1, #3
 80022ac:	430a      	orrs	r2, r1
 80022ae:	621a      	str	r2, [r3, #32]
 80022b0:	e7ab      	b.n	800220a <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d100      	bne.n	80022b8 <HAL_RCC_OscConfig+0x3c4>
 80022b6:	e715      	b.n	80020e4 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b8:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 80022ba:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80022be:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 80022c0:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 80022c2:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c4:	4013      	ands	r3, r2
 80022c6:	428b      	cmp	r3, r1
 80022c8:	d000      	beq.n	80022cc <HAL_RCC_OscConfig+0x3d8>
 80022ca:	e70c      	b.n	80020e6 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022cc:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022d0:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	428b      	cmp	r3, r1
 80022d4:	d000      	beq.n	80022d8 <HAL_RCC_OscConfig+0x3e4>
 80022d6:	e706      	b.n	80020e6 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022d8:	23f0      	movs	r3, #240	; 0xf0
 80022da:	039b      	lsls	r3, r3, #14
 80022dc:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022e0:	1ad2      	subs	r2, r2, r3
 80022e2:	1e53      	subs	r3, r2, #1
 80022e4:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 80022e6:	b2d0      	uxtb	r0, r2
 80022e8:	e6fd      	b.n	80020e6 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 80022ea:	2104      	movs	r1, #4
 80022ec:	4d2a      	ldr	r5, [pc, #168]	; (8002398 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022ee:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80022f0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80022f2:	430a      	orrs	r2, r1
 80022f4:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80022f6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80022f8:	4313      	orrs	r3, r2
 80022fa:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80022fc:	f7ff fc78 	bl	8001bf0 <HAL_GetTick>
 8002300:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002302:	e005      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002304:	f7ff fc74 	bl	8001bf0 <HAL_GetTick>
 8002308:	1b80      	subs	r0, r0, r6
 800230a:	2802      	cmp	r0, #2
 800230c:	d900      	bls.n	8002310 <HAL_RCC_OscConfig+0x41c>
 800230e:	e72c      	b.n	800216a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002310:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002312:	421f      	tst	r7, r3
 8002314:	d0f6      	beq.n	8002304 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002316:	21f8      	movs	r1, #248	; 0xf8
 8002318:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800231a:	69a3      	ldr	r3, [r4, #24]
 800231c:	438a      	bics	r2, r1
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4313      	orrs	r3, r2
 8002322:	636b      	str	r3, [r5, #52]	; 0x34
 8002324:	e6b2      	b.n	800208c <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8002326:	682b      	ldr	r3, [r5, #0]
 8002328:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800232c:	4013      	ands	r3, r2
 800232e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002330:	f7ff fc5e 	bl	8001bf0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8002336:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002338:	e005      	b.n	8002346 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233a:	f7ff fc59 	bl	8001bf0 <HAL_GetTick>
 800233e:	1b80      	subs	r0, r0, r6
 8002340:	2802      	cmp	r0, #2
 8002342:	d900      	bls.n	8002346 <HAL_RCC_OscConfig+0x452>
 8002344:	e711      	b.n	800216a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	682b      	ldr	r3, [r5, #0]
 8002348:	423b      	tst	r3, r7
 800234a:	d1f6      	bne.n	800233a <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234c:	220f      	movs	r2, #15
 800234e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002350:	4e11      	ldr	r6, [pc, #68]	; (8002398 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002352:	4393      	bics	r3, r2
 8002354:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002356:	4313      	orrs	r3, r2
 8002358:	62eb      	str	r3, [r5, #44]	; 0x2c
 800235a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800235c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800235e:	686a      	ldr	r2, [r5, #4]
 8002360:	430b      	orrs	r3, r1
 8002362:	4910      	ldr	r1, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x4b0>)
 8002364:	400a      	ands	r2, r1
 8002366:	4313      	orrs	r3, r2
 8002368:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	682a      	ldr	r2, [r5, #0]
 800236e:	045b      	lsls	r3, r3, #17
 8002370:	4313      	orrs	r3, r2
 8002372:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002374:	f7ff fc3c 	bl	8001bf0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002378:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800237a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800237c:	04ad      	lsls	r5, r5, #18
 800237e:	e005      	b.n	800238c <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002380:	f7ff fc36 	bl	8001bf0 <HAL_GetTick>
 8002384:	1b00      	subs	r0, r0, r4
 8002386:	2802      	cmp	r0, #2
 8002388:	d900      	bls.n	800238c <HAL_RCC_OscConfig+0x498>
 800238a:	e6ee      	b.n	800216a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800238c:	6833      	ldr	r3, [r6, #0]
 800238e:	422b      	tst	r3, r5
 8002390:	d0f6      	beq.n	8002380 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8002392:	2000      	movs	r0, #0
 8002394:	e6a7      	b.n	80020e6 <HAL_RCC_OscConfig+0x1f2>
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	40021000 	.word	0x40021000
 800239c:	efffffff 	.word	0xefffffff
 80023a0:	feffffff 	.word	0xfeffffff
 80023a4:	ffc2ffff 	.word	0xffc2ffff

080023a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023aa:	46ce      	mov	lr, r9
 80023ac:	4647      	mov	r7, r8
 80023ae:	0004      	movs	r4, r0
 80023b0:	000d      	movs	r5, r1
 80023b2:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d00d      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b8:	2301      	movs	r3, #1
 80023ba:	494f      	ldr	r1, [pc, #316]	; (80024f8 <HAL_RCC_ClockConfig+0x150>)
 80023bc:	680a      	ldr	r2, [r1, #0]
 80023be:	401a      	ands	r2, r3
 80023c0:	42aa      	cmp	r2, r5
 80023c2:	d20c      	bcs.n	80023de <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c4:	680a      	ldr	r2, [r1, #0]
 80023c6:	439a      	bics	r2, r3
 80023c8:	432a      	orrs	r2, r5
 80023ca:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023cc:	680a      	ldr	r2, [r1, #0]
 80023ce:	4013      	ands	r3, r2
 80023d0:	42ab      	cmp	r3, r5
 80023d2:	d004      	beq.n	80023de <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 80023d4:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80023d6:	bcc0      	pop	{r6, r7}
 80023d8:	46b9      	mov	r9, r7
 80023da:	46b0      	mov	r8, r6
 80023dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	079a      	lsls	r2, r3, #30
 80023e2:	d50e      	bpl.n	8002402 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	075a      	lsls	r2, r3, #29
 80023e6:	d505      	bpl.n	80023f4 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023e8:	22e0      	movs	r2, #224	; 0xe0
 80023ea:	4944      	ldr	r1, [pc, #272]	; (80024fc <HAL_RCC_ClockConfig+0x154>)
 80023ec:	00d2      	lsls	r2, r2, #3
 80023ee:	6848      	ldr	r0, [r1, #4]
 80023f0:	4302      	orrs	r2, r0
 80023f2:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	20f0      	movs	r0, #240	; 0xf0
 80023f6:	4941      	ldr	r1, [pc, #260]	; (80024fc <HAL_RCC_ClockConfig+0x154>)
 80023f8:	684a      	ldr	r2, [r1, #4]
 80023fa:	4382      	bics	r2, r0
 80023fc:	68a0      	ldr	r0, [r4, #8]
 80023fe:	4302      	orrs	r2, r0
 8002400:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002402:	07db      	lsls	r3, r3, #31
 8002404:	d522      	bpl.n	800244c <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_RCC_ClockConfig+0x154>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002408:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240c:	2a01      	cmp	r2, #1
 800240e:	d065      	beq.n	80024dc <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002410:	2a02      	cmp	r2, #2
 8002412:	d060      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x12e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	079b      	lsls	r3, r3, #30
 8002416:	d5dd      	bpl.n	80023d4 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002418:	2103      	movs	r1, #3
 800241a:	4e38      	ldr	r6, [pc, #224]	; (80024fc <HAL_RCC_ClockConfig+0x154>)
 800241c:	6873      	ldr	r3, [r6, #4]
 800241e:	438b      	bics	r3, r1
 8002420:	4313      	orrs	r3, r2
 8002422:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002424:	f7ff fbe4 	bl	8001bf0 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002428:	230c      	movs	r3, #12
 800242a:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <HAL_RCC_ClockConfig+0x158>)
    tickstart = HAL_GetTick();
 800242e:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	e004      	b.n	800243e <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002434:	f7ff fbdc 	bl	8001bf0 <HAL_GetTick>
 8002438:	1bc0      	subs	r0, r0, r7
 800243a:	4548      	cmp	r0, r9
 800243c:	d851      	bhi.n	80024e2 <HAL_RCC_ClockConfig+0x13a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4643      	mov	r3, r8
 8002440:	6872      	ldr	r2, [r6, #4]
 8002442:	401a      	ands	r2, r3
 8002444:	6863      	ldr	r3, [r4, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d1f3      	bne.n	8002434 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800244c:	2101      	movs	r1, #1
 800244e:	4a2a      	ldr	r2, [pc, #168]	; (80024f8 <HAL_RCC_ClockConfig+0x150>)
 8002450:	6813      	ldr	r3, [r2, #0]
 8002452:	400b      	ands	r3, r1
 8002454:	42ab      	cmp	r3, r5
 8002456:	d905      	bls.n	8002464 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002458:	6813      	ldr	r3, [r2, #0]
 800245a:	438b      	bics	r3, r1
 800245c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	6813      	ldr	r3, [r2, #0]
 8002460:	4219      	tst	r1, r3
 8002462:	d1b7      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	075b      	lsls	r3, r3, #29
 8002468:	d416      	bmi.n	8002498 <HAL_RCC_ClockConfig+0xf0>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800246a:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800246c:	4923      	ldr	r1, [pc, #140]	; (80024fc <HAL_RCC_ClockConfig+0x154>)
 800246e:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002470:	4013      	ands	r3, r2
 8002472:	2b04      	cmp	r3, #4
 8002474:	d01d      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x10a>
 8002476:	2b08      	cmp	r3, #8
 8002478:	d01d      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
 800247a:	4822      	ldr	r0, [pc, #136]	; (8002504 <HAL_RCC_ClockConfig+0x15c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800247c:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <HAL_RCC_ClockConfig+0x154>)
 800247e:	4a22      	ldr	r2, [pc, #136]	; (8002508 <HAL_RCC_ClockConfig+0x160>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4922      	ldr	r1, [pc, #136]	; (800250c <HAL_RCC_ClockConfig+0x164>)
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	0f1b      	lsrs	r3, r3, #28
 8002488:	5cd3      	ldrb	r3, [r2, r3]
 800248a:	40d8      	lsrs	r0, r3
 800248c:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800248e:	2003      	movs	r0, #3
 8002490:	f7ff fb6c 	bl	8001b6c <HAL_InitTick>
  return HAL_OK;
 8002494:	2000      	movs	r0, #0
 8002496:	e79e      	b.n	80023d6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4a18      	ldr	r2, [pc, #96]	; (80024fc <HAL_RCC_ClockConfig+0x154>)
 800249a:	491d      	ldr	r1, [pc, #116]	; (8002510 <HAL_RCC_ClockConfig+0x168>)
 800249c:	6853      	ldr	r3, [r2, #4]
 800249e:	400b      	ands	r3, r1
 80024a0:	68e1      	ldr	r1, [r4, #12]
 80024a2:	430b      	orrs	r3, r1
 80024a4:	6053      	str	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80024a6:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80024a8:	4914      	ldr	r1, [pc, #80]	; (80024fc <HAL_RCC_ClockConfig+0x154>)
 80024aa:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d1e1      	bne.n	8002476 <HAL_RCC_ClockConfig+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024b2:	4818      	ldr	r0, [pc, #96]	; (8002514 <HAL_RCC_ClockConfig+0x16c>)
 80024b4:	e7e2      	b.n	800247c <HAL_RCC_ClockConfig+0xd4>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024b6:	250f      	movs	r5, #15
 80024b8:	4817      	ldr	r0, [pc, #92]	; (8002518 <HAL_RCC_ClockConfig+0x170>)
 80024ba:	0c93      	lsrs	r3, r2, #18
 80024bc:	402b      	ands	r3, r5
 80024be:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024c0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024c2:	03d2      	lsls	r2, r2, #15
 80024c4:	d50f      	bpl.n	80024e6 <HAL_RCC_ClockConfig+0x13e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_RCC_ClockConfig+0x174>)
 80024c8:	400d      	ands	r5, r1
 80024ca:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024cc:	4811      	ldr	r0, [pc, #68]	; (8002514 <HAL_RCC_ClockConfig+0x16c>)
 80024ce:	f7fd fe1b 	bl	8000108 <__udivsi3>
 80024d2:	4360      	muls	r0, r4
 80024d4:	e7d2      	b.n	800247c <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	019b      	lsls	r3, r3, #6
 80024d8:	d49e      	bmi.n	8002418 <HAL_RCC_ClockConfig+0x70>
 80024da:	e77b      	b.n	80023d4 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024dc:	039b      	lsls	r3, r3, #14
 80024de:	d49b      	bmi.n	8002418 <HAL_RCC_ClockConfig+0x70>
 80024e0:	e778      	b.n	80023d4 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 80024e2:	2003      	movs	r0, #3
 80024e4:	e777      	b.n	80023d6 <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024e6:	0162      	lsls	r2, r4, #5
 80024e8:	1b12      	subs	r2, r2, r4
 80024ea:	0193      	lsls	r3, r2, #6
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	191b      	adds	r3, r3, r4
 80024f2:	0218      	lsls	r0, r3, #8
 80024f4:	e7c2      	b.n	800247c <HAL_RCC_ClockConfig+0xd4>
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	40022000 	.word	0x40022000
 80024fc:	40021000 	.word	0x40021000
 8002500:	00001388 	.word	0x00001388
 8002504:	007a1200 	.word	0x007a1200
 8002508:	08002d80 	.word	0x08002d80
 800250c:	20000000 	.word	0x20000000
 8002510:	fffff8ff 	.word	0xfffff8ff
 8002514:	00f42400 	.word	0x00f42400
 8002518:	08002d90 	.word	0x08002d90
 800251c:	08002da0 	.word	0x08002da0

08002520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002520:	b510      	push	{r4, lr}
 8002522:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002524:	d05b      	beq.n	80025de <HAL_TIM_Base_Init+0xbe>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002526:	233d      	movs	r3, #61	; 0x3d
 8002528:	5cc3      	ldrb	r3, [r0, r3]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d048      	beq.n	80025c2 <HAL_TIM_Base_Init+0xa2>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	233d      	movs	r3, #61	; 0x3d
 8002532:	2202      	movs	r2, #2
 8002534:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002536:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002538:	492a      	ldr	r1, [pc, #168]	; (80025e4 <HAL_TIM_Base_Init+0xc4>)
  tmpcr1 = TIMx->CR1;
 800253a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800253c:	428a      	cmp	r2, r1
 800253e:	d015      	beq.n	800256c <HAL_TIM_Base_Init+0x4c>
 8002540:	4929      	ldr	r1, [pc, #164]	; (80025e8 <HAL_TIM_Base_Init+0xc8>)
 8002542:	428a      	cmp	r2, r1
 8002544:	d042      	beq.n	80025cc <HAL_TIM_Base_Init+0xac>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002546:	4929      	ldr	r1, [pc, #164]	; (80025ec <HAL_TIM_Base_Init+0xcc>)
 8002548:	428a      	cmp	r2, r1
 800254a:	d043      	beq.n	80025d4 <HAL_TIM_Base_Init+0xb4>
 800254c:	4928      	ldr	r1, [pc, #160]	; (80025f0 <HAL_TIM_Base_Init+0xd0>)
 800254e:	428a      	cmp	r2, r1
 8002550:	d010      	beq.n	8002574 <HAL_TIM_Base_Init+0x54>
 8002552:	4928      	ldr	r1, [pc, #160]	; (80025f4 <HAL_TIM_Base_Init+0xd4>)
 8002554:	428a      	cmp	r2, r1
 8002556:	d00d      	beq.n	8002574 <HAL_TIM_Base_Init+0x54>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	438b      	bics	r3, r1
 800255c:	69a1      	ldr	r1, [r4, #24]
 800255e:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8002560:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002562:	68e3      	ldr	r3, [r4, #12]
 8002564:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002566:	6863      	ldr	r3, [r4, #4]
 8002568:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800256a:	e012      	b.n	8002592 <HAL_TIM_Base_Init+0x72>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800256c:	2170      	movs	r1, #112	; 0x70
 800256e:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8002570:	68a1      	ldr	r1, [r4, #8]
 8002572:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8002574:	4920      	ldr	r1, [pc, #128]	; (80025f8 <HAL_TIM_Base_Init+0xd8>)
 8002576:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002578:	6921      	ldr	r1, [r4, #16]
 800257a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	438b      	bics	r3, r1
 8002580:	69a1      	ldr	r1, [r4, #24]
 8002582:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002584:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002586:	68e3      	ldr	r3, [r4, #12]
 8002588:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800258a:	6863      	ldr	r3, [r4, #4]
 800258c:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800258e:	6963      	ldr	r3, [r4, #20]
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002592:	2301      	movs	r3, #1
 8002594:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002596:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8002598:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800259a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800259c:	3a08      	subs	r2, #8
 800259e:	54a3      	strb	r3, [r4, r2]
 80025a0:	3201      	adds	r2, #1
 80025a2:	54a3      	strb	r3, [r4, r2]
 80025a4:	3201      	adds	r2, #1
 80025a6:	54a3      	strb	r3, [r4, r2]
 80025a8:	3201      	adds	r2, #1
 80025aa:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	3201      	adds	r2, #1
 80025ae:	54a3      	strb	r3, [r4, r2]
 80025b0:	3201      	adds	r2, #1
 80025b2:	54a3      	strb	r3, [r4, r2]
 80025b4:	3201      	adds	r2, #1
 80025b6:	54a3      	strb	r3, [r4, r2]
 80025b8:	3201      	adds	r2, #1
 80025ba:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80025bc:	3a08      	subs	r2, #8
 80025be:	54a3      	strb	r3, [r4, r2]
}
 80025c0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80025c2:	333c      	adds	r3, #60	; 0x3c
 80025c4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80025c6:	f7ff fa57 	bl	8001a78 <HAL_TIM_Base_MspInit>
 80025ca:	e7b1      	b.n	8002530 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025cc:	2170      	movs	r1, #112	; 0x70
 80025ce:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80025d0:	68a1      	ldr	r1, [r4, #8]
 80025d2:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d4:	4908      	ldr	r1, [pc, #32]	; (80025f8 <HAL_TIM_Base_Init+0xd8>)
 80025d6:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025d8:	6921      	ldr	r1, [r4, #16]
 80025da:	430b      	orrs	r3, r1
 80025dc:	e7bc      	b.n	8002558 <HAL_TIM_Base_Init+0x38>
    return HAL_ERROR;
 80025de:	2001      	movs	r0, #1
 80025e0:	e7ee      	b.n	80025c0 <HAL_TIM_Base_Init+0xa0>
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	40012c00 	.word	0x40012c00
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40002000 	.word	0x40002000
 80025f0:	40014400 	.word	0x40014400
 80025f4:	40014800 	.word	0x40014800
 80025f8:	fffffcff 	.word	0xfffffcff

080025fc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80025fc:	223d      	movs	r2, #61	; 0x3d
 80025fe:	5c81      	ldrb	r1, [r0, r2]
{
 8002600:	0003      	movs	r3, r0
    return HAL_ERROR;
 8002602:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002604:	2901      	cmp	r1, #1
 8002606:	d10c      	bne.n	8002622 <HAL_TIM_Base_Start+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	3101      	adds	r1, #1
 800260a:	5499      	strb	r1, [r3, r2]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a0c      	ldr	r2, [pc, #48]	; (8002640 <HAL_TIM_Base_Start+0x44>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d007      	beq.n	8002624 <HAL_TIM_Base_Start+0x28>
 8002614:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <HAL_TIM_Base_Start+0x48>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d004      	beq.n	8002624 <HAL_TIM_Base_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4302      	orrs	r2, r0
  return HAL_OK;
 800261e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002620:	601a      	str	r2, [r3, #0]
}
 8002622:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002624:	2207      	movs	r2, #7
 8002626:	6899      	ldr	r1, [r3, #8]
 8002628:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262a:	2a06      	cmp	r2, #6
 800262c:	d005      	beq.n	800263a <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
 800262e:	2101      	movs	r1, #1
 8002630:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002632:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e7f3      	b.n	8002622 <HAL_TIM_Base_Start+0x26>
  return HAL_OK;
 800263a:	2000      	movs	r0, #0
 800263c:	e7f1      	b.n	8002622 <HAL_TIM_Base_Start+0x26>
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	40012c00 	.word	0x40012c00
 8002644:	40000400 	.word	0x40000400

08002648 <HAL_TIM_IC_MspInit>:
 8002648:	4770      	bx	lr
 800264a:	46c0      	nop			; (mov r8, r8)

0800264c <HAL_TIM_IC_Init>:
{
 800264c:	b510      	push	{r4, lr}
 800264e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002650:	d05b      	beq.n	800270a <HAL_TIM_IC_Init+0xbe>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002652:	233d      	movs	r3, #61	; 0x3d
 8002654:	5cc3      	ldrb	r3, [r0, r3]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d048      	beq.n	80026ee <HAL_TIM_IC_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	233d      	movs	r3, #61	; 0x3d
 800265e:	2202      	movs	r2, #2
 8002660:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002662:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002664:	492a      	ldr	r1, [pc, #168]	; (8002710 <HAL_TIM_IC_Init+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002666:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002668:	428a      	cmp	r2, r1
 800266a:	d015      	beq.n	8002698 <HAL_TIM_IC_Init+0x4c>
 800266c:	4929      	ldr	r1, [pc, #164]	; (8002714 <HAL_TIM_IC_Init+0xc8>)
 800266e:	428a      	cmp	r2, r1
 8002670:	d042      	beq.n	80026f8 <HAL_TIM_IC_Init+0xac>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002672:	4929      	ldr	r1, [pc, #164]	; (8002718 <HAL_TIM_IC_Init+0xcc>)
 8002674:	428a      	cmp	r2, r1
 8002676:	d043      	beq.n	8002700 <HAL_TIM_IC_Init+0xb4>
 8002678:	4928      	ldr	r1, [pc, #160]	; (800271c <HAL_TIM_IC_Init+0xd0>)
 800267a:	428a      	cmp	r2, r1
 800267c:	d010      	beq.n	80026a0 <HAL_TIM_IC_Init+0x54>
 800267e:	4928      	ldr	r1, [pc, #160]	; (8002720 <HAL_TIM_IC_Init+0xd4>)
 8002680:	428a      	cmp	r2, r1
 8002682:	d00d      	beq.n	80026a0 <HAL_TIM_IC_Init+0x54>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	438b      	bics	r3, r1
 8002688:	69a1      	ldr	r1, [r4, #24]
 800268a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800268c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800268e:	68e3      	ldr	r3, [r4, #12]
 8002690:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002692:	6863      	ldr	r3, [r4, #4]
 8002694:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002696:	e012      	b.n	80026be <HAL_TIM_IC_Init+0x72>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002698:	2170      	movs	r1, #112	; 0x70
 800269a:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800269c:	68a1      	ldr	r1, [r4, #8]
 800269e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80026a0:	4920      	ldr	r1, [pc, #128]	; (8002724 <HAL_TIM_IC_Init+0xd8>)
 80026a2:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026a4:	6921      	ldr	r1, [r4, #16]
 80026a6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	438b      	bics	r3, r1
 80026ac:	69a1      	ldr	r1, [r4, #24]
 80026ae:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80026b0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b2:	68e3      	ldr	r3, [r4, #12]
 80026b4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80026b6:	6863      	ldr	r3, [r4, #4]
 80026b8:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80026ba:	6963      	ldr	r3, [r4, #20]
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80026be:	2301      	movs	r3, #1
 80026c0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c2:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80026c4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c8:	3a08      	subs	r2, #8
 80026ca:	54a3      	strb	r3, [r4, r2]
 80026cc:	3201      	adds	r2, #1
 80026ce:	54a3      	strb	r3, [r4, r2]
 80026d0:	3201      	adds	r2, #1
 80026d2:	54a3      	strb	r3, [r4, r2]
 80026d4:	3201      	adds	r2, #1
 80026d6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	3201      	adds	r2, #1
 80026da:	54a3      	strb	r3, [r4, r2]
 80026dc:	3201      	adds	r2, #1
 80026de:	54a3      	strb	r3, [r4, r2]
 80026e0:	3201      	adds	r2, #1
 80026e2:	54a3      	strb	r3, [r4, r2]
 80026e4:	3201      	adds	r2, #1
 80026e6:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80026e8:	3a08      	subs	r2, #8
 80026ea:	54a3      	strb	r3, [r4, r2]
}
 80026ec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80026ee:	333c      	adds	r3, #60	; 0x3c
 80026f0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_IC_MspInit(htim);
 80026f2:	f7ff ffa9 	bl	8002648 <HAL_TIM_IC_MspInit>
 80026f6:	e7b1      	b.n	800265c <HAL_TIM_IC_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f8:	2170      	movs	r1, #112	; 0x70
 80026fa:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80026fc:	68a1      	ldr	r1, [r4, #8]
 80026fe:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8002700:	4908      	ldr	r1, [pc, #32]	; (8002724 <HAL_TIM_IC_Init+0xd8>)
 8002702:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002704:	6921      	ldr	r1, [r4, #16]
 8002706:	430b      	orrs	r3, r1
 8002708:	e7bc      	b.n	8002684 <HAL_TIM_IC_Init+0x38>
    return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
 800270c:	e7ee      	b.n	80026ec <HAL_TIM_IC_Init+0xa0>
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40000400 	.word	0x40000400
 8002718:	40002000 	.word	0x40002000
 800271c:	40014400 	.word	0x40014400
 8002720:	40014800 	.word	0x40014800
 8002724:	fffffcff 	.word	0xfffffcff

08002728 <HAL_TIM_IC_Start_IT>:
{
 8002728:	0003      	movs	r3, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800272a:	223e      	movs	r2, #62	; 0x3e
{
 800272c:	b510      	push	{r4, lr}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800272e:	2900      	cmp	r1, #0
 8002730:	d006      	beq.n	8002740 <HAL_TIM_IC_Start_IT+0x18>
 8002732:	223f      	movs	r2, #63	; 0x3f
 8002734:	2904      	cmp	r1, #4
 8002736:	d003      	beq.n	8002740 <HAL_TIM_IC_Start_IT+0x18>
 8002738:	2240      	movs	r2, #64	; 0x40
 800273a:	2908      	cmp	r1, #8
 800273c:	d000      	beq.n	8002740 <HAL_TIM_IC_Start_IT+0x18>
 800273e:	2241      	movs	r2, #65	; 0x41
 8002740:	5c98      	ldrb	r0, [r3, r2]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002742:	3204      	adds	r2, #4
 8002744:	5c9a      	ldrb	r2, [r3, r2]
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002746:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002748:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800274a:	2801      	cmp	r0, #1
 800274c:	d001      	beq.n	8002752 <HAL_TIM_IC_Start_IT+0x2a>
    return HAL_ERROR;
 800274e:	2001      	movs	r0, #1
}
 8002750:	bd10      	pop	{r4, pc}
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002752:	2a01      	cmp	r2, #1
 8002754:	d1fc      	bne.n	8002750 <HAL_TIM_IC_Start_IT+0x28>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002756:	2900      	cmp	r1, #0
 8002758:	d023      	beq.n	80027a2 <HAL_TIM_IC_Start_IT+0x7a>
 800275a:	2202      	movs	r2, #2
 800275c:	2904      	cmp	r1, #4
 800275e:	d03e      	beq.n	80027de <HAL_TIM_IC_Start_IT+0xb6>
 8002760:	2908      	cmp	r1, #8
 8002762:	d033      	beq.n	80027cc <HAL_TIM_IC_Start_IT+0xa4>
 8002764:	2441      	movs	r4, #65	; 0x41
 8002766:	551a      	strb	r2, [r3, r4]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002768:	3404      	adds	r4, #4
 800276a:	551a      	strb	r2, [r3, r4]
  switch (Channel)
 800276c:	290c      	cmp	r1, #12
 800276e:	d1ef      	bne.n	8002750 <HAL_TIM_IC_Start_IT+0x28>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002770:	681c      	ldr	r4, [r3, #0]
 8002772:	320e      	adds	r2, #14
 8002774:	68e3      	ldr	r3, [r4, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60e3      	str	r3, [r4, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800277a:	2001      	movs	r0, #1
 800277c:	0003      	movs	r3, r0
 800277e:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002780:	6a22      	ldr	r2, [r4, #32]
 8002782:	439a      	bics	r2, r3
 8002784:	6222      	str	r2, [r4, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002786:	6a22      	ldr	r2, [r4, #32]
 8002788:	4313      	orrs	r3, r2
 800278a:	6223      	str	r3, [r4, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800278c:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <HAL_TIM_IC_Start_IT+0xc0>)
 800278e:	429c      	cmp	r4, r3
 8002790:	d011      	beq.n	80027b6 <HAL_TIM_IC_Start_IT+0x8e>
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_TIM_IC_Start_IT+0xc4>)
 8002794:	429c      	cmp	r4, r3
 8002796:	d00e      	beq.n	80027b6 <HAL_TIM_IC_Start_IT+0x8e>
      __HAL_TIM_ENABLE(htim);
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	4303      	orrs	r3, r0
 800279c:	6023      	str	r3, [r4, #0]
 800279e:	2000      	movs	r0, #0
 80027a0:	e7d6      	b.n	8002750 <HAL_TIM_IC_Start_IT+0x28>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027a2:	3201      	adds	r2, #1
 80027a4:	303d      	adds	r0, #61	; 0x3d
 80027a6:	541a      	strb	r2, [r3, r0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027a8:	3004      	adds	r0, #4
 80027aa:	541a      	strb	r2, [r3, r0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80027ac:	681c      	ldr	r4, [r3, #0]
 80027ae:	68e3      	ldr	r3, [r4, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60e3      	str	r3, [r4, #12]
  if (status == HAL_OK)
 80027b4:	e7e1      	b.n	800277a <HAL_TIM_IC_Start_IT+0x52>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b6:	2307      	movs	r3, #7
 80027b8:	68a2      	ldr	r2, [r4, #8]
 80027ba:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027bc:	2b06      	cmp	r3, #6
 80027be:	d010      	beq.n	80027e2 <HAL_TIM_IC_Start_IT+0xba>
        __HAL_TIM_ENABLE(htim);
 80027c0:	2201      	movs	r2, #1
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	2000      	movs	r0, #0
 80027c6:	4313      	orrs	r3, r2
 80027c8:	6023      	str	r3, [r4, #0]
 80027ca:	e7c1      	b.n	8002750 <HAL_TIM_IC_Start_IT+0x28>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027cc:	2040      	movs	r0, #64	; 0x40
 80027ce:	541a      	strb	r2, [r3, r0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027d0:	3004      	adds	r0, #4
 80027d2:	541a      	strb	r2, [r3, r0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027d4:	681c      	ldr	r4, [r3, #0]
 80027d6:	68e3      	ldr	r3, [r4, #12]
 80027d8:	430b      	orrs	r3, r1
 80027da:	60e3      	str	r3, [r4, #12]
  if (status == HAL_OK)
 80027dc:	e7cd      	b.n	800277a <HAL_TIM_IC_Start_IT+0x52>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027de:	203f      	movs	r0, #63	; 0x3f
 80027e0:	e7f5      	b.n	80027ce <HAL_TIM_IC_Start_IT+0xa6>
 80027e2:	2000      	movs	r0, #0
 80027e4:	e7b4      	b.n	8002750 <HAL_TIM_IC_Start_IT+0x28>
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40000400 	.word	0x40000400

080027f0 <HAL_TIM_IC_ConfigChannel>:
{
 80027f0:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80027f2:	203c      	movs	r0, #60	; 0x3c
{
 80027f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f6:	46ce      	mov	lr, r9
 80027f8:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 80027fa:	5c1c      	ldrb	r4, [r3, r0]
{
 80027fc:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 80027fe:	2c01      	cmp	r4, #1
 8002800:	d100      	bne.n	8002804 <HAL_TIM_IC_ConfigChannel+0x14>
 8002802:	e0b8      	b.n	8002976 <HAL_TIM_IC_ConfigChannel+0x186>
 8002804:	2401      	movs	r4, #1
 8002806:	541c      	strb	r4, [r3, r0]
  if (Channel == TIM_CHANNEL_1)
 8002808:	2a00      	cmp	r2, #0
 800280a:	d12e      	bne.n	800286a <HAL_TIM_IC_ConfigChannel+0x7a>
    TIM_TI1_SetConfig(htim->Instance,
 800280c:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICSelection,
 800280e:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002810:	6a15      	ldr	r5, [r2, #32]
                      sConfig->ICPolarity,
 8002812:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002814:	43a5      	bics	r5, r4
                      sConfig->ICFilter);
 8002816:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002818:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281a:	6995      	ldr	r5, [r2, #24]
                      sConfig->ICSelection,
 800281c:	4681      	mov	r9, r0
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800281e:	4857      	ldr	r0, [pc, #348]	; (800297c <HAL_TIM_IC_ConfigChannel+0x18c>)
  tmpccmr1 = TIMx->CCMR1;
 8002820:	46ac      	mov	ip, r5
  tmpccer = TIMx->CCER;
 8002822:	6a15      	ldr	r5, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002824:	4282      	cmp	r2, r0
 8002826:	d050      	beq.n	80028ca <HAL_TIM_IC_ConfigChannel+0xda>
 8002828:	4855      	ldr	r0, [pc, #340]	; (8002980 <HAL_TIM_IC_ConfigChannel+0x190>)
 800282a:	4282      	cmp	r2, r0
 800282c:	d04d      	beq.n	80028ca <HAL_TIM_IC_ConfigChannel+0xda>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800282e:	4660      	mov	r0, ip
 8002830:	4320      	orrs	r0, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002832:	24f0      	movs	r4, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002834:	013f      	lsls	r7, r7, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002836:	43a0      	bics	r0, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002838:	340f      	adds	r4, #15
 800283a:	403c      	ands	r4, r7
 800283c:	4304      	orrs	r4, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800283e:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8002840:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002842:	240c      	movs	r4, #12
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002844:	4385      	bics	r5, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002846:	4030      	ands	r0, r6
 8002848:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 800284a:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800284c:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800284e:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002850:	43a0      	bics	r0, r4
 8002852:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002854:	6990      	ldr	r0, [r2, #24]
 8002856:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8002858:	2000      	movs	r0, #0
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800285a:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800285c:	223c      	movs	r2, #60	; 0x3c
 800285e:	2100      	movs	r1, #0
 8002860:	5499      	strb	r1, [r3, r2]
}
 8002862:	bcc0      	pop	{r6, r7}
 8002864:	46b9      	mov	r9, r7
 8002866:	46b0      	mov	r8, r6
 8002868:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800286a:	2a04      	cmp	r2, #4
 800286c:	d05c      	beq.n	8002928 <HAL_TIM_IC_ConfigChannel+0x138>
  else if (Channel == TIM_CHANNEL_3)
 800286e:	2a08      	cmp	r2, #8
 8002870:	d032      	beq.n	80028d8 <HAL_TIM_IC_ConfigChannel+0xe8>
    status = HAL_ERROR;
 8002872:	2001      	movs	r0, #1
  else if (Channel == TIM_CHANNEL_4)
 8002874:	2a0c      	cmp	r2, #12
 8002876:	d1f1      	bne.n	800285c <HAL_TIM_IC_ConfigChannel+0x6c>
                      sConfig->ICPolarity,
 8002878:	6808      	ldr	r0, [r1, #0]
    TIM_TI4_SetConfig(htim->Instance,
 800287a:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICPolarity,
 800287c:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800287e:	6a16      	ldr	r6, [r2, #32]
 8002880:	4f40      	ldr	r7, [pc, #256]	; (8002984 <HAL_TIM_IC_ConfigChannel+0x194>)
                      sConfig->ICSelection,
 8002882:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002884:	403e      	ands	r6, r7
                      sConfig->ICFilter);
 8002886:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002888:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 800288a:	69d7      	ldr	r7, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800288c:	483e      	ldr	r0, [pc, #248]	; (8002988 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800288e:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002890:	4007      	ands	r7, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002892:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002894:	4f3d      	ldr	r7, [pc, #244]	; (800298c <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002896:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002898:	403d      	ands	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800289a:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
 800289c:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800289e:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028a0:	4d3b      	ldr	r5, [pc, #236]	; (8002990 <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80028a2:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028a4:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80028a6:	26a0      	movs	r6, #160	; 0xa0
 80028a8:	0300      	lsls	r0, r0, #12
 80028aa:	0236      	lsls	r6, r6, #8
 80028ac:	4030      	ands	r0, r6
 80028ae:	4328      	orrs	r0, r5
  TIMx->CCMR2 = tmpccmr2;
 80028b0:	61d4      	str	r4, [r2, #28]
  TIMx->CCER = tmpccer ;
 80028b2:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80028b4:	69d0      	ldr	r0, [r2, #28]
 80028b6:	4c37      	ldr	r4, [pc, #220]	; (8002994 <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028b8:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80028ba:	4020      	ands	r0, r4
 80028bc:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028be:	69d0      	ldr	r0, [r2, #28]
 80028c0:	0209      	lsls	r1, r1, #8
 80028c2:	4301      	orrs	r1, r0
 80028c4:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80028c6:	2000      	movs	r0, #0
 80028c8:	e7c8      	b.n	800285c <HAL_TIM_IC_ConfigChannel+0x6c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80028ca:	2403      	movs	r4, #3
 80028cc:	4660      	mov	r0, ip
 80028ce:	43a0      	bics	r0, r4
 80028d0:	0004      	movs	r4, r0
    tmpccmr1 |= TIM_ICSelection;
 80028d2:	4648      	mov	r0, r9
 80028d4:	4320      	orrs	r0, r4
 80028d6:	e7ac      	b.n	8002832 <HAL_TIM_IC_ConfigChannel+0x42>
                      sConfig->ICPolarity,
 80028d8:	6808      	ldr	r0, [r1, #0]
    TIM_TI3_SetConfig(htim->Instance,
 80028da:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICPolarity,
 80028dc:	4680      	mov	r8, r0
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80028de:	2003      	movs	r0, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028e0:	6a14      	ldr	r4, [r2, #32]
 80028e2:	4e2d      	ldr	r6, [pc, #180]	; (8002998 <HAL_TIM_IC_ConfigChannel+0x1a8>)
                      sConfig->ICSelection,
 80028e4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028e6:	4034      	ands	r4, r6
                      sConfig->ICFilter);
 80028e8:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028ea:	6214      	str	r4, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 80028ec:	69d4      	ldr	r4, [r2, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80028ee:	013f      	lsls	r7, r7, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80028f0:	4384      	bics	r4, r0
  tmpccmr2 |= TIM_ICSelection;
 80028f2:	4325      	orrs	r5, r4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80028f4:	24f0      	movs	r4, #240	; 0xf0
 80028f6:	43a5      	bics	r5, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80028f8:	340f      	adds	r4, #15
 80028fa:	403c      	ands	r4, r7
  tmpccer = TIMx->CCER;
 80028fc:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80028fe:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002900:	4d26      	ldr	r5, [pc, #152]	; (800299c <HAL_TIM_IC_ConfigChannel+0x1ac>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002902:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002904:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002906:	26a0      	movs	r6, #160	; 0xa0
  TIMx->CCMR2 = tmpccmr2;
 8002908:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800290a:	240c      	movs	r4, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800290c:	0200      	lsls	r0, r0, #8
 800290e:	0136      	lsls	r6, r6, #4
 8002910:	4030      	ands	r0, r6
 8002912:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8002914:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002916:	69d0      	ldr	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002918:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800291a:	43a0      	bics	r0, r4
 800291c:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800291e:	69d0      	ldr	r0, [r2, #28]
 8002920:	4301      	orrs	r1, r0
 8002922:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002924:	2000      	movs	r0, #0
 8002926:	e799      	b.n	800285c <HAL_TIM_IC_ConfigChannel+0x6c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002928:	2710      	movs	r7, #16
                      sConfig->ICFilter);
 800292a:	68c8      	ldr	r0, [r1, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800292c:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 800292e:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002930:	6a15      	ldr	r5, [r2, #32]
                      sConfig->ICPolarity,
 8002932:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002934:	43bd      	bics	r5, r7
                      sConfig->ICSelection,
 8002936:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002938:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293a:	6997      	ldr	r7, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800293c:	4812      	ldr	r0, [pc, #72]	; (8002988 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800293e:	0224      	lsls	r4, r4, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002940:	4007      	ands	r7, r0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002942:	4640      	mov	r0, r8
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002944:	433c      	orrs	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002946:	4f11      	ldr	r7, [pc, #68]	; (800298c <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002948:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800294a:	403c      	ands	r4, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800294c:	0c00      	lsrs	r0, r0, #16
 800294e:	4320      	orrs	r0, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002950:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002952:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002954:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002956:	43a5      	bics	r5, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002958:	4034      	ands	r4, r6
 800295a:	432c      	orrs	r4, r5
  TIMx->CCMR1 = tmpccmr1 ;
 800295c:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 800295e:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002960:	6990      	ldr	r0, [r2, #24]
 8002962:	4c0c      	ldr	r4, [pc, #48]	; (8002994 <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002964:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002966:	4020      	ands	r0, r4
 8002968:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800296a:	6990      	ldr	r0, [r2, #24]
 800296c:	0209      	lsls	r1, r1, #8
 800296e:	4301      	orrs	r1, r0
 8002970:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002972:	2000      	movs	r0, #0
 8002974:	e772      	b.n	800285c <HAL_TIM_IC_ConfigChannel+0x6c>
  __HAL_LOCK(htim);
 8002976:	2002      	movs	r0, #2
 8002978:	e773      	b.n	8002862 <HAL_TIM_IC_ConfigChannel+0x72>
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400
 8002984:	ffffefff 	.word	0xffffefff
 8002988:	fffffcff 	.word	0xfffffcff
 800298c:	ffff0fff 	.word	0xffff0fff
 8002990:	ffff5fff 	.word	0xffff5fff
 8002994:	fffff3ff 	.word	0xfffff3ff
 8002998:	fffffeff 	.word	0xfffffeff
 800299c:	fffff5ff 	.word	0xfffff5ff

080029a0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80029a0:	233c      	movs	r3, #60	; 0x3c
{
 80029a2:	b570      	push	{r4, r5, r6, lr}
 80029a4:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80029a6:	5cc0      	ldrb	r0, [r0, r3]
 80029a8:	2801      	cmp	r0, #1
 80029aa:	d100      	bne.n	80029ae <HAL_TIM_ConfigClockSource+0xe>
 80029ac:	e075      	b.n	8002a9a <HAL_TIM_ConfigClockSource+0xfa>
 80029ae:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80029b2:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	3301      	adds	r3, #1
 80029b6:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 80029b8:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ba:	4d52      	ldr	r5, [pc, #328]	; (8002b04 <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr = htim->Instance->SMCR;
 80029bc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029be:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80029c0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80029c2:	680b      	ldr	r3, [r1, #0]
 80029c4:	2b60      	cmp	r3, #96	; 0x60
 80029c6:	d100      	bne.n	80029ca <HAL_TIM_ConfigClockSource+0x2a>
 80029c8:	e069      	b.n	8002a9e <HAL_TIM_ConfigClockSource+0xfe>
 80029ca:	d823      	bhi.n	8002a14 <HAL_TIM_ConfigClockSource+0x74>
 80029cc:	2b40      	cmp	r3, #64	; 0x40
 80029ce:	d100      	bne.n	80029d2 <HAL_TIM_ConfigClockSource+0x32>
 80029d0:	e07f      	b.n	8002ad2 <HAL_TIM_ConfigClockSource+0x132>
 80029d2:	d952      	bls.n	8002a7a <HAL_TIM_ConfigClockSource+0xda>
 80029d4:	2b50      	cmp	r3, #80	; 0x50
 80029d6:	d13b      	bne.n	8002a50 <HAL_TIM_ConfigClockSource+0xb0>
                               sClockSourceConfig->ClockPolarity,
 80029d8:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80029da:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80029dc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029de:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029e0:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e2:	43a6      	bics	r6, r4
 80029e4:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029e6:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80029e8:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029ea:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029ec:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ee:	240a      	movs	r4, #10
 80029f0:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80029f2:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80029f4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80029f6:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029f8:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80029fa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029fc:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029fe:	3919      	subs	r1, #25
 8002a00:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002a02:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002a06:	233d      	movs	r3, #61	; 0x3d
 8002a08:	2101      	movs	r1, #1
 8002a0a:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	54d1      	strb	r1, [r2, r3]
}
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002a14:	2480      	movs	r4, #128	; 0x80
 8002a16:	0164      	lsls	r4, r4, #5
 8002a18:	42a3      	cmp	r3, r4
 8002a1a:	d03c      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0xf6>
 8002a1c:	2480      	movs	r4, #128	; 0x80
 8002a1e:	01a4      	lsls	r4, r4, #6
 8002a20:	42a3      	cmp	r3, r4
 8002a22:	d117      	bne.n	8002a54 <HAL_TIM_ConfigClockSource+0xb4>
  tmpsmcr = TIMx->SMCR;
 8002a24:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a26:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a28:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2a:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a2c:	688b      	ldr	r3, [r1, #8]
 8002a2e:	68c9      	ldr	r1, [r1, #12]
 8002a30:	432b      	orrs	r3, r5
 8002a32:	0209      	lsls	r1, r1, #8
 8002a34:	430b      	orrs	r3, r1
 8002a36:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8002a38:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	6881      	ldr	r1, [r0, #8]
 8002a3e:	01db      	lsls	r3, r3, #7
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002a44:	2000      	movs	r0, #0
      break;
 8002a46:	e7de      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8002a48:	2110      	movs	r1, #16
 8002a4a:	001c      	movs	r4, r3
 8002a4c:	438c      	bics	r4, r1
 8002a4e:	d019      	beq.n	8002a84 <HAL_TIM_ConfigClockSource+0xe4>
 8002a50:	2001      	movs	r0, #1
 8002a52:	e7d8      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x66>
 8002a54:	2b70      	cmp	r3, #112	; 0x70
 8002a56:	d1fb      	bne.n	8002a50 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr = TIMx->SMCR;
 8002a58:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a5c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a5e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a60:	688b      	ldr	r3, [r1, #8]
 8002a62:	68c9      	ldr	r1, [r1, #12]
 8002a64:	432b      	orrs	r3, r5
 8002a66:	0209      	lsls	r1, r1, #8
 8002a68:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a6a:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a6c:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8002a6e:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002a70:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a72:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8002a74:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002a76:	2000      	movs	r0, #0
      break;
 8002a78:	e7c5      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d002      	beq.n	8002a84 <HAL_TIM_ConfigClockSource+0xe4>
 8002a7e:	d9e3      	bls.n	8002a48 <HAL_TIM_ConfigClockSource+0xa8>
 8002a80:	2b30      	cmp	r3, #48	; 0x30
 8002a82:	d1e5      	bne.n	8002a50 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a84:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002a86:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a88:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	2107      	movs	r1, #7
 8002a8e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002a90:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	2000      	movs	r0, #0
}
 8002a94:	e7b7      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2000      	movs	r0, #0
 8002a98:	e7b5      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	e7b9      	b.n	8002a12 <HAL_TIM_ConfigClockSource+0x72>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a9e:	2510      	movs	r5, #16
 8002aa0:	6a04      	ldr	r4, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8002aa2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa4:	43ac      	bics	r4, r5
                               sClockSourceConfig->ClockFilter);
 8002aa6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aaa:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aac:	4e17      	ldr	r6, [pc, #92]	; (8002b0c <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aae:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ab0:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ab2:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ab4:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002ab6:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8002ab8:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aba:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002abc:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 8002ac2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002ac4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac6:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ac8:	3909      	subs	r1, #9
 8002aca:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002acc:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2000      	movs	r0, #0
}
 8002ad0:	e799      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8002ad2:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad4:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002ad6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad8:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ada:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002adc:	43a6      	bics	r6, r4
 8002ade:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae0:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002ae2:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae4:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ae6:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ae8:	240a      	movs	r4, #10
 8002aea:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002aec:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002aee:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002af0:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002af2:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002af4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002af6:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002af8:	3929      	subs	r1, #41	; 0x29
 8002afa:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002afc:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002afe:	2000      	movs	r0, #0
}
 8002b00:	e781      	b.n	8002a06 <HAL_TIM_ConfigClockSource+0x66>
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	ffff0088 	.word	0xffff0088
 8002b08:	ffff00ff 	.word	0xffff00ff
 8002b0c:	ffff0fff 	.word	0xffff0fff

08002b10 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8002b10:	2908      	cmp	r1, #8
 8002b12:	d011      	beq.n	8002b38 <HAL_TIM_ReadCapturedValue+0x28>
 8002b14:	d806      	bhi.n	8002b24 <HAL_TIM_ReadCapturedValue+0x14>
 8002b16:	2900      	cmp	r1, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_TIM_ReadCapturedValue+0x22>
 8002b1a:	2904      	cmp	r1, #4
 8002b1c:	d107      	bne.n	8002b2e <HAL_TIM_ReadCapturedValue+0x1e>
      tmpreg =   htim->Instance->CCR2;
 8002b1e:	6803      	ldr	r3, [r0, #0]
 8002b20:	6b98      	ldr	r0, [r3, #56]	; 0x38
}
 8002b22:	4770      	bx	lr
  switch (Channel)
 8002b24:	290c      	cmp	r1, #12
 8002b26:	d102      	bne.n	8002b2e <HAL_TIM_ReadCapturedValue+0x1e>
      tmpreg =   htim->Instance->CCR4;
 8002b28:	6803      	ldr	r3, [r0, #0]
 8002b2a:	6c18      	ldr	r0, [r3, #64]	; 0x40
  return tmpreg;
 8002b2c:	e7f9      	b.n	8002b22 <HAL_TIM_ReadCapturedValue+0x12>
  switch (Channel)
 8002b2e:	2000      	movs	r0, #0
 8002b30:	e7f7      	b.n	8002b22 <HAL_TIM_ReadCapturedValue+0x12>
      tmpreg =  htim->Instance->CCR1;
 8002b32:	6803      	ldr	r3, [r0, #0]
 8002b34:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8002b36:	e7f4      	b.n	8002b22 <HAL_TIM_ReadCapturedValue+0x12>
      tmpreg =   htim->Instance->CCR3;
 8002b38:	6803      	ldr	r3, [r0, #0]
 8002b3a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8002b3c:	e7f1      	b.n	8002b22 <HAL_TIM_ReadCapturedValue+0x12>
 8002b3e:	46c0      	nop			; (mov r8, r8)

08002b40 <HAL_TIM_PeriodElapsedCallback>:
 8002b40:	4770      	bx	lr
 8002b42:	46c0      	nop			; (mov r8, r8)

08002b44 <HAL_TIM_OC_DelayElapsedCallback>:
 8002b44:	4770      	bx	lr
 8002b46:	46c0      	nop			; (mov r8, r8)

08002b48 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002b48:	4770      	bx	lr
 8002b4a:	46c0      	nop			; (mov r8, r8)

08002b4c <HAL_TIM_TriggerCallback>:
 8002b4c:	4770      	bx	lr
 8002b4e:	46c0      	nop			; (mov r8, r8)

08002b50 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b50:	2202      	movs	r2, #2
 8002b52:	6803      	ldr	r3, [r0, #0]
{
 8002b54:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b56:	6919      	ldr	r1, [r3, #16]
{
 8002b58:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b5a:	420a      	tst	r2, r1
 8002b5c:	d002      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b5e:	68d9      	ldr	r1, [r3, #12]
 8002b60:	420a      	tst	r2, r1
 8002b62:	d165      	bne.n	8002c30 <HAL_TIM_IRQHandler+0xe0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b64:	2204      	movs	r2, #4
 8002b66:	6919      	ldr	r1, [r3, #16]
 8002b68:	420a      	tst	r2, r1
 8002b6a:	d002      	beq.n	8002b72 <HAL_TIM_IRQHandler+0x22>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b6c:	68d9      	ldr	r1, [r3, #12]
 8002b6e:	420a      	tst	r2, r1
 8002b70:	d14b      	bne.n	8002c0a <HAL_TIM_IRQHandler+0xba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b72:	2208      	movs	r2, #8
 8002b74:	6919      	ldr	r1, [r3, #16]
 8002b76:	420a      	tst	r2, r1
 8002b78:	d002      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b7a:	68d9      	ldr	r1, [r3, #12]
 8002b7c:	420a      	tst	r2, r1
 8002b7e:	d133      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x98>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b80:	2210      	movs	r2, #16
 8002b82:	6919      	ldr	r1, [r3, #16]
 8002b84:	420a      	tst	r2, r1
 8002b86:	d002      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x3e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b88:	68d9      	ldr	r1, [r3, #12]
 8002b8a:	420a      	tst	r2, r1
 8002b8c:	d11c      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x78>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	6919      	ldr	r1, [r3, #16]
 8002b92:	420a      	tst	r2, r1
 8002b94:	d002      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b96:	68d9      	ldr	r1, [r3, #12]
 8002b98:	420a      	tst	r2, r1
 8002b9a:	d15c      	bne.n	8002c56 <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	6919      	ldr	r1, [r3, #16]
 8002ba0:	420a      	tst	r2, r1
 8002ba2:	d002      	beq.n	8002baa <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ba4:	68d9      	ldr	r1, [r3, #12]
 8002ba6:	420a      	tst	r2, r1
 8002ba8:	d15c      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x114>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002baa:	2240      	movs	r2, #64	; 0x40
 8002bac:	6919      	ldr	r1, [r3, #16]
 8002bae:	420a      	tst	r2, r1
 8002bb0:	d002      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bb2:	68d9      	ldr	r1, [r3, #12]
 8002bb4:	420a      	tst	r2, r1
 8002bb6:	d15d      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x124>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bb8:	2220      	movs	r2, #32
 8002bba:	6919      	ldr	r1, [r3, #16]
 8002bbc:	420a      	tst	r2, r1
 8002bbe:	d002      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bc0:	68d9      	ldr	r1, [r3, #12]
 8002bc2:	420a      	tst	r2, r1
 8002bc4:	d141      	bne.n	8002c4a <HAL_TIM_IRQHandler+0xfa>
}
 8002bc6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc8:	3a21      	subs	r2, #33	; 0x21
 8002bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bcc:	3219      	adds	r2, #25
 8002bce:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	23c0      	movs	r3, #192	; 0xc0
 8002bd4:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd8:	421a      	tst	r2, r3
 8002bda:	d05e      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002bdc:	f7fe fdc4 	bl	8001768 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be0:	2300      	movs	r3, #0
 8002be2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	e7d2      	b.n	8002b8e <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002be8:	3a11      	subs	r2, #17
 8002bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bec:	320d      	adds	r2, #13
 8002bee:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bf0:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf2:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bf4:	079b      	lsls	r3, r3, #30
 8002bf6:	d14d      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf8:	f7ff ffa4 	bl	8002b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	0020      	movs	r0, r4
 8002bfe:	f7ff ffa3 	bl	8002b48 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	2300      	movs	r3, #0
 8002c04:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	e7ba      	b.n	8002b80 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c0a:	3a09      	subs	r2, #9
 8002c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c0e:	3207      	adds	r2, #7
 8002c10:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	23c0      	movs	r3, #192	; 0xc0
 8002c16:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002c18:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c1a:	421a      	tst	r2, r3
 8002c1c:	d137      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1e:	f7ff ff91 	bl	8002b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c22:	0020      	movs	r0, r4
 8002c24:	f7ff ff90 	bl	8002b48 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	e7a0      	b.n	8002b72 <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c30:	3a05      	subs	r2, #5
 8002c32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c34:	3204      	adds	r2, #4
 8002c36:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	079b      	lsls	r3, r3, #30
 8002c3c:	d021      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	f7fe fd93 	bl	8001768 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	2300      	movs	r3, #0
 8002c44:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	e78c      	b.n	8002b64 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c4a:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8002c4c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c4e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002c50:	f000 f854 	bl	8002cfc <HAL_TIMEx_CommutCallback>
}
 8002c54:	e7b7      	b.n	8002bc6 <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c56:	3a03      	subs	r2, #3
 8002c58:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c5a:	0020      	movs	r0, r4
 8002c5c:	f7ff ff70 	bl	8002b40 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	e79b      	b.n	8002b9c <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c64:	3a02      	subs	r2, #2
 8002c66:	3aff      	subs	r2, #255	; 0xff
 8002c68:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002c6a:	0020      	movs	r0, r4
 8002c6c:	f000 f848 	bl	8002d00 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	e79a      	b.n	8002baa <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c74:	3a81      	subs	r2, #129	; 0x81
 8002c76:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002c78:	0020      	movs	r0, r4
 8002c7a:	f7ff ff67 	bl	8002b4c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	e79a      	b.n	8002bb8 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	f7ff ff5f 	bl	8002b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c86:	0020      	movs	r0, r4
 8002c88:	f7ff ff5e 	bl	8002b48 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c8c:	e7d9      	b.n	8002c42 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	f7fe fd6b 	bl	8001768 <HAL_TIM_IC_CaptureCallback>
 8002c92:	e7c9      	b.n	8002c28 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c94:	f7fe fd68 	bl	8001768 <HAL_TIM_IC_CaptureCallback>
 8002c98:	e7b3      	b.n	8002c02 <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	f7ff ff53 	bl	8002b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9e:	0020      	movs	r0, r4
 8002ca0:	f7ff ff52 	bl	8002b48 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ca4:	e79c      	b.n	8002be0 <HAL_TIM_IRQHandler+0x90>
 8002ca6:	46c0      	nop			; (mov r8, r8)

08002ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ca8:	233c      	movs	r3, #60	; 0x3c
{
 8002caa:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002cac:	5cc3      	ldrb	r3, [r0, r3]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d01e      	beq.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb2:	233d      	movs	r3, #61	; 0x3d
 8002cb4:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cb6:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8002cba:	6803      	ldr	r3, [r0, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002cbe:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cc0:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc2:	680d      	ldr	r5, [r1, #0]
 8002cc4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc8:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	233d      	movs	r3, #61	; 0x3d
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002ce0:	2000      	movs	r0, #0
}
 8002ce2:	bd30      	pop	{r4, r5, pc}
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	4394      	bics	r4, r2
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ce8:	684a      	ldr	r2, [r1, #4]
 8002cea:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 8002cec:	609c      	str	r4, [r3, #8]
 8002cee:	e7f1      	b.n	8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 8002cf0:	2002      	movs	r0, #2
 8002cf2:	e7f6      	b.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40000400 	.word	0x40000400

08002cfc <HAL_TIMEx_CommutCallback>:
 8002cfc:	4770      	bx	lr
 8002cfe:	46c0      	nop			; (mov r8, r8)

08002d00 <HAL_TIMEx_BreakCallback>:
 8002d00:	4770      	bx	lr
 8002d02:	46c0      	nop			; (mov r8, r8)

08002d04 <memset>:
 8002d04:	0003      	movs	r3, r0
 8002d06:	1882      	adds	r2, r0, r2
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d100      	bne.n	8002d0e <memset+0xa>
 8002d0c:	4770      	bx	lr
 8002d0e:	7019      	strb	r1, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	e7f9      	b.n	8002d08 <memset+0x4>

08002d14 <__libc_init_array>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	2600      	movs	r6, #0
 8002d18:	4c0c      	ldr	r4, [pc, #48]	; (8002d4c <__libc_init_array+0x38>)
 8002d1a:	4d0d      	ldr	r5, [pc, #52]	; (8002d50 <__libc_init_array+0x3c>)
 8002d1c:	1b64      	subs	r4, r4, r5
 8002d1e:	10a4      	asrs	r4, r4, #2
 8002d20:	42a6      	cmp	r6, r4
 8002d22:	d109      	bne.n	8002d38 <__libc_init_array+0x24>
 8002d24:	2600      	movs	r6, #0
 8002d26:	f000 f819 	bl	8002d5c <_init>
 8002d2a:	4c0a      	ldr	r4, [pc, #40]	; (8002d54 <__libc_init_array+0x40>)
 8002d2c:	4d0a      	ldr	r5, [pc, #40]	; (8002d58 <__libc_init_array+0x44>)
 8002d2e:	1b64      	subs	r4, r4, r5
 8002d30:	10a4      	asrs	r4, r4, #2
 8002d32:	42a6      	cmp	r6, r4
 8002d34:	d105      	bne.n	8002d42 <__libc_init_array+0x2e>
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	00b3      	lsls	r3, r6, #2
 8002d3a:	58eb      	ldr	r3, [r5, r3]
 8002d3c:	4798      	blx	r3
 8002d3e:	3601      	adds	r6, #1
 8002d40:	e7ee      	b.n	8002d20 <__libc_init_array+0xc>
 8002d42:	00b3      	lsls	r3, r6, #2
 8002d44:	58eb      	ldr	r3, [r5, r3]
 8002d46:	4798      	blx	r3
 8002d48:	3601      	adds	r6, #1
 8002d4a:	e7f2      	b.n	8002d32 <__libc_init_array+0x1e>
 8002d4c:	08002db0 	.word	0x08002db0
 8002d50:	08002db0 	.word	0x08002db0
 8002d54:	08002db4 	.word	0x08002db4
 8002d58:	08002db0 	.word	0x08002db0

08002d5c <_init>:
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d62:	bc08      	pop	{r3}
 8002d64:	469e      	mov	lr, r3
 8002d66:	4770      	bx	lr

08002d68 <_fini>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6e:	bc08      	pop	{r3}
 8002d70:	469e      	mov	lr, r3
 8002d72:	4770      	bx	lr
